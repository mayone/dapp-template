{"version":3,"file":"static/js/7146.769014ce.chunk.js","mappings":"gpCAIMA,EAAS,IAAIC,EAAAA,GCJI,kBDuBvB,SAASC,EAAmBC,GACxB,IAAMC,EAAO,SAASC,EAAgBC,GACnB,MAAXA,IAAmBA,EAAU,CAAC,GAClC,IAAMC,EAA2B,GAEjC,GAAIF,EAAUG,gBAAqC,MAAnBF,EAAQG,OACpC,IACIF,EAAaG,KAAK,IAAIL,EAAUG,eAAeL,EAASG,EAAQG,Q,CAClE,MAAME,GAAQ,CAGpB,GAAIN,EAAUO,mBAA2C,MAAtBN,EAAQO,UACvC,IACIN,EAAaG,KAAK,IAAIL,EAAUO,kBAAkBT,EAASG,EAAQO,W,CACrE,MAAMF,GAAQ,CAGpB,GAAIN,EAAUS,iBAAuC,MAApBR,EAAQS,QACrC,IACIR,EAAaG,KAAK,IAAIL,EAAUS,gBAAgBX,EAASG,EAAQS,S,CACnE,MAAMJ,GAAQ,CAGpB,GAAIN,EAAUW,gBAAqC,MAAnBV,EAAQW,OAAgB,CAMpD,IACI,IAAMC,EAAW,IAAIb,EAAUW,eAAeb,EAASG,EAAQW,QAC3DC,EAASf,UAAoD,IAHxD,CAAE,SAAU,UAAW,UAAW,WAGdgB,QAAQD,EAASf,QAAQiB,OAClDb,EAAaG,KAAKQ,E,CAExB,MAAMP,GAAQ,C,CAGpB,GAAIN,EAAUgB,oBAA6C,MAAvBf,EAAQgB,WACxC,IACIf,EAAaG,KAAK,IAAIL,EAAUgB,mBAAmBlB,G,CACrD,MAAMQ,GAAQ,CAGpB,GAAIN,EAAUkB,cAAiC,MAAjBjB,EAAQkB,KAClC,IACI,IACMN,EAAW,IAAIb,EAAUkB,aAAapB,EAASG,EAAQkB,MACzDN,EAASf,UAAoD,IAFpD,CAAE,WAEcgB,QAAQD,EAASf,QAAQiB,OAClDb,EAAaG,KAAKQ,E,CAExB,MAAMP,GAAQ,CAGpB,GAA4B,IAAxBJ,EAAakB,OAAgB,OAAO,KAExC,GAAIpB,EAAUqB,iBAAkB,CAC5B,IAAIC,EAAS,EAMb,OALsB,MAAlBrB,EAAQqB,OACRA,EAASrB,EAAQqB,OACE,cAAZxB,IACPwB,EAAS,GAEN,IAAItB,EAAUqB,iBAAiBnB,EAAcoB,E,CAGxD,OAAOpB,EAAa,EACxB,EAMA,OAJAH,EAAKwB,UAAY,SAASzB,GACtB,OAAOD,EAAmBC,EAC9B,EAEOC,CACX,CAEA,SAASyB,EAAmBC,EAAa3B,GACrC,IAAMC,EAAO,SAASC,EAAgBC,GAClC,OAAID,EAAU0B,gBACH,IAAI1B,EAAU0B,gBAAgBD,EAAK3B,GAGvC,IACX,EAMA,OAJAC,EAAKwB,UAAY,SAASzB,GACtB,OAAO0B,EAAmBC,EAAK3B,EACnC,EAEOC,CACX,CAEA,IAAM4B,EAAqB,CACvBC,QAAS,EACTC,WAAY,6CACZd,KAAM,YACNe,iBAAkBjC,EAAmB,cAGnCkC,EAAmB,CACrBH,QAAS,EACTC,WAAY,6CACZd,KAAM,UACNe,iBAAkBjC,EAAmB,YAGnCmC,EAAyB,CAC3BJ,QAAS,GACTb,KAAM,gBACNe,iBAAkBN,EAAmB,sCAAuC,kBAI1ES,EAAwC,CAC1CC,YAAa,CAAEN,QAAS,EAAGb,KAAM,eAEjCY,UAAWA,EACXQ,QAASR,EAETS,OAAQ,CAAER,QAAS,EAAGb,KAAM,UAE5BgB,QAASA,EACTM,QAASN,EAETO,QAAS,CACLV,QAAS,EACTC,WAAY,6CACZd,KAAM,UACNe,iBAAkBjC,EAAmB,YAGzC0C,MAAO,CACHX,QAAS,GACTb,KAAM,QACNe,iBAAkBjC,EAAmB,UAGzC2C,OAAQ,CACJZ,QAAS,EACTC,WAAY,6CACZd,KAAM,SACNe,iBAAkBjC,EAAmB,WAGzC4C,SAAU,CAAEb,QAAS,QAASb,KAAM,YAEpC2B,QAAS,CACLd,QAAS,SACTb,KAAM,UACNe,iBAAkBjC,EAAmB,YAKzC8C,QAAS,CACLf,QAAS,GACTb,KAAM,UACNe,iBAAkBN,EAAmB,mCAAqC,YAG9EoB,cAAe,CAAEhB,QAAS,GAAIb,KAAM,iBAEpCiB,cAAeA,EACfa,eAAgBb,EAEhBc,aAAc,CACVlB,QAAS,EACTb,KAAM,eACNe,iBAAkBN,EAAmB,qCAAuC,iBAGhFuB,KAAM,CAAEnB,QAAS,IAAKb,KAAM,QAE5BiC,MAAO,CACHpB,QAAS,IACTb,KAAM,QACNe,iBAAkBjC,EAAmB,UAEzCoD,SAAU,CAAErB,QAAS,MAAOb,KAAM,YAElCmC,SAAU,CACNtB,QAAS,GACTb,KAAM,WACNe,iBAAkBjC,EAAmB,aAEzC,iBAAkB,CAAE+B,QAAS,GAAIb,KAAM,kBACvC,kBAAmB,CAAEa,QAAS,IAAKb,KAAM,mBAEzCoC,SAAU,CAAEvB,QAAS,MAAOb,KAAM,YAClC,mBAAoB,CAAEa,QAAS,OAAQb,KAAM,oBAC7C,kBAAmB,CAAEa,QAAS,OAAQb,KAAM,mBAE5CqC,IAAK,CAAExB,QAAS,GAAIb,KAAM,OAC1BsC,KAAM,CAAEzB,QAAS,GAAIb,KAAM,SASzB,SAAUuC,EAAWxD,GAEvB,GAAe,MAAXA,EAAmB,OAAO,KAE9B,GAAwB,kBAAbA,EAAuB,CAC9B,IAAK,IAAMiB,KAAQkB,EAAU,CACzB,IAAMsB,EAAWtB,EAASlB,GAC1B,GAAIwC,EAAS3B,UAAY9B,EACrB,MAAO,CACHiB,KAAMwC,EAASxC,KACfa,QAAS2B,EAAS3B,QAClBC,WAAa0B,EAAS1B,YAAc,KACpCC,iBAAmByB,EAASzB,kBAAoB,K,CAK5D,MAAO,CACHF,QAAS9B,EACTiB,KAAM,U,CAId,GAAwB,kBAAbjB,EAAuB,CAC9B,IAAMyD,EAAWtB,EAASnC,GAC1B,OAAgB,MAAZyD,EAA2B,KACxB,CACHxC,KAAMwC,EAASxC,KACfa,QAAS2B,EAAS3B,QAClBC,WAAY0B,EAAS1B,WACrBC,iBAAmByB,EAASzB,kBAAoB,K,CAIxD,IAAMyB,EAAYtB,EAASnC,EAAQiB,MAGnC,IAAKwC,EAID,MAHgC,kBAArBzD,EAAQ8B,SACfjC,EAAO6D,mBAAmB,0BAA2B,UAAW1D,GAE7DA,EAIa,IAApBA,EAAQ8B,SAAiB9B,EAAQ8B,UAAY2B,EAAS3B,SACtDjC,EAAO6D,mBAAmB,2BAA4B,UAAW1D,GAKrE,IAhQqB2D,EAgQjBC,EAAuC5D,EAAQgC,kBAAoB,KAUvE,OATuB,MAAnB4B,GAA2BH,EAASzB,mBAEhC4B,GAnQaD,EAkQGF,EAASzB,mBAjQY,oBAArB2B,EAAMlC,UAkQJgC,EAASzB,iBAAiBP,UAAUzB,GAEpCyD,EAASzB,kBAK5B,CACHf,KAAMjB,EAAQiB,KACda,QAAS2B,EAAS3B,QAClBC,WAAa/B,EAAQ+B,YAAc0B,EAAS1B,YAAc,KAC1DC,iBAAkB4B,EAE1B,C,4FExPaC,EAAK,WAOd,SAAAA,EAAYC,IAAgBC,EAAAA,EAAAA,GAAA,KAAAF,IACxBG,EAAAA,EAAAA,IAAeC,KAAM,WAAYH,IACjCE,EAAAA,EAAAA,IAAeC,KAAM,OAAQH,EAASxC,SAEtC0C,EAAAA,EAAAA,IAAeC,KAAM,eAAgB,CAAC,IACtCD,EAAAA,EAAAA,IAAeC,KAAM,UAAWH,EAASI,OAAO,IAGhD,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAASxC,OAAQ6C,IACjCF,KAAKG,aAAaN,EAASI,OAAOC,IAAMA,CAEhD,CAwEC,OAxEAE,EAAAA,EAAAA,GAAAR,EAAA,EAAAS,IAAA,SAAAX,MAED,SAAOA,GACH,IAAIY,GAASC,EAAAA,EAAAA,IAASb,GAEtB,GAAsB,IAAlBY,EAAOjD,OAAgB,MAAO,GAGlC,IADA,IAAImD,EAAS,CAAE,GACNN,EAAI,EAAGA,EAAII,EAAOjD,SAAU6C,EAAG,CAEpC,IADA,IAAIO,EAAQH,EAAOJ,GACVQ,EAAI,EAAGA,EAAIF,EAAOnD,SAAUqD,EACjCD,GAASD,EAAOE,IAAM,EACtBF,EAAOE,GAAKD,EAAQT,KAAKW,KACzBF,EAASA,EAAQT,KAAKW,KAAQ,EAGlC,KAAOF,EAAQ,GACXD,EAAOlE,KAAKmE,EAAQT,KAAKW,MACzBF,EAASA,EAAQT,KAAKW,KAAQ,C,CAOtC,IAHA,IAAIC,EAAS,GAGJC,EAAI,EAAiB,IAAdP,EAAOO,IAAYA,EAAIP,EAAOjD,OAAS,IAAKwD,EACxDD,GAAUZ,KAAKc,QAInB,IAAK,IAAIC,EAAIP,EAAOnD,OAAS,EAAG0D,GAAK,IAAKA,EACtCH,GAAUZ,KAAKH,SAASW,EAAOO,IAGnC,OAAOH,CACX,GAAC,CAAAP,IAAA,SAAAX,MAED,SAAOA,GACH,GAAsB,kBAAXA,EACP,MAAM,IAAIsB,UAAU,mBAGxB,IAAIC,EAAuB,GAC3B,GAAqB,IAAjBvB,EAAMrC,OAAgB,OAAO,IAAI6D,WAAWD,GAEhDA,EAAM3E,KAAK,GACX,IAAK,IAAI4D,EAAI,EAAGA,EAAIR,EAAMrC,OAAQ6C,IAAK,CACnC,IAAIiB,EAAOnB,KAAKG,aAAaT,EAAMQ,IAEnC,QAAakB,IAATD,EACA,MAAM,IAAIE,MAAM,WAAarB,KAAKW,KAAO,cAI7C,IADA,IAAIF,EAAQU,EACHT,EAAI,EAAGA,EAAIO,EAAM5D,SAAUqD,EAChCD,GAASQ,EAAMP,GAAKV,KAAKW,KACzBM,EAAMP,GAAa,IAARD,EACXA,IAAU,EAGd,KAAOA,EAAQ,GACXQ,EAAM3E,KAAa,IAARmE,GACXA,IAAU,C,CAKlB,IAAK,IAAII,EAAI,EAAGnB,EAAMmB,KAAOb,KAAKc,SAAWD,EAAInB,EAAMrC,OAAS,IAAKwD,EACjEI,EAAM3E,KAAK,GAGf,OAAOiE,EAAAA,EAAAA,IAAS,IAAIW,WAAWD,EAAMK,WACzC,KAAC1B,CAAA,CA1Fa,GA8FZ2B,GADS,IAAI3B,EAAM,oCACV,IAAIA,EAAM,+D,+BCzIZ4B,EAAU,a,sBCIjB,SAAUC,EAAOC,GACnBA,EAAWC,KAAKD,GAEhB,IADA,IAAME,EAAO,GACJ1B,EAAI,EAAGA,EAAIwB,EAASrE,OAAQ6C,IACjC0B,EAAKtF,KAAKoF,EAASG,WAAW3B,IAElC,OAAOK,EAAAA,EAAAA,IAASqB,EACpB,CAEM,SAAUE,EAAOF,GACnBA,GAAOrB,EAAAA,EAAAA,IAASqB,GAEhB,IADA,IAAIF,EAAW,GACNxB,EAAI,EAAGA,EAAI0B,EAAKvE,OAAQ6C,IAC7BwB,GAAYK,OAAOC,aAAaJ,EAAK1B,IAEzC,OAAO+B,KAAKP,EAChB,CCaA,SAASQ,EAAKC,EAAmBC,GAChB,MAATA,IAAiBA,EAAQ,GAC7B,IAAMC,EAAqB,GAErBC,EAAUD,EAAOC,QAavB,OAXiB,SAAXC,EAAqBC,EAAiBJ,GACxCE,EAAQG,KAAKD,GAAK,SAAUE,GACpBN,EAAQ,GAAKO,MAAMC,QAAQF,GAC3BH,EAASG,EAAKN,EAAQ,GAEvBC,EAAO/F,KAAKoG,EAEnB,GACJ,CAEAH,CAASJ,EAAOC,GACTC,CACX,CAmGM,SAAUQ,EAAwB5B,GACvC,OALK,SAAuB6B,GAC5B,IAAIC,EAAM,EACV,OAAO,kBAAMD,EAAEC,IAAM,CACtB,CAEQC,CAzFF,SAA4B/B,GACjC,IAAI8B,EAAM,EACV,SAASE,IAAQ,OAAQhC,EAAM8B,MAAU,EAAK9B,EAAM8B,IAAQ,CAM5D,IAHA,IAAIG,EAAeD,IACfE,EAAQ,EACRC,EAAM,CAAC,EAAG,GACLlD,EAAI,EAAGA,EAAIgD,EAAchD,IACjCkD,EAAI9G,KAAK6G,GAASF,KAInB,IAAII,EAAOJ,IACPK,EAAcP,EAClBA,GAAOM,EAEP,IAAIE,EAAa,EACbC,EAAc,EAClB,SAASC,IAOR,OANkB,GAAdF,IAGHC,EAAeA,GAAe,EAAKvC,EAAM8B,KACzCQ,EAAa,GAENC,KAAiBD,EAAc,CACxC,CAUA,IARA,IACMG,EAAOC,KAAAC,IAAA,EADH,IAEJC,EAAOH,IAAS,EAChBI,EAAOD,GAAQ,EACfE,EAAOL,EAAO,EAGhBM,EAAW,EACN9D,EAAI,EAAGA,EARN,GAQaA,IAAK8D,EAAYA,GAAY,EAAKP,IAKzD,IAHA,IAAIQ,EAAU,GACVC,EAAM,EACNC,EAAQT,IACC,CAIZ,IAHA,IAAIhE,EAAQiE,KAAKS,QAASJ,EAAWE,EAAM,GAAKf,EAAS,GAAKgB,GAC1DE,EAAQ,EACRC,EAAMpB,EACHoB,EAAMD,EAAQ,GAAG,CACvB,IAAIE,EAAOF,EAAQC,IAAS,EACxB5E,EAAQ0D,EAAImB,GACfD,EAAMC,EAENF,EAAQE,C,CAGV,GAAa,GAATF,EAAY,MAChBJ,EAAQ3H,KAAK+H,GAGb,IAFA,IAAIG,EAAIN,EAAMP,KAAKS,MAAMD,EAAQf,EAAIiB,GAAWlB,GAC5CsB,EAAIP,EAAMP,KAAKS,MAAMD,EAAQf,EAAIiB,EAAM,GAAKlB,GAAS,EAC9B,KAAlBqB,EAAIC,GAAKZ,IACjBG,EAAYA,GAAY,EAAKD,EAAON,IACpCe,EAAKA,GAAK,EAAKT,EACfU,EAAKA,GAAK,EAAKV,EAAO,EAEvB,KAAOS,GAAKC,EAAIX,GACfE,EAAYA,EAAWH,EAAUG,GAAY,EAAMD,IAAS,EAAMN,IAClEe,EAAKA,GAAK,EAAKX,EACfY,GAAMA,EAAIZ,IAAS,EAAKA,EAAO,EAEhCK,EAAMM,EACNL,EAAQ,EAAIM,EAAID,C,CAEjB,IAAIE,EAASxB,EAAe,EAC5B,OAAOe,EAAQU,KAAI,SAAAC,GAClB,OAAQA,EAAIF,GACX,KAAK,EAAG,OAAOA,EAAS,OAAYzD,EAAMqC,MAAkB,GAAOrC,EAAMqC,MAAkB,EAAKrC,EAAMqC,MACtG,KAAK,EAAG,OAAOoB,EAAS,KAAUzD,EAAMqC,MAAkB,EAAKrC,EAAMqC,MACrE,KAAK,EAAG,OAAOoB,EAASzD,EAAMqC,KAC9B,QAAS,OAAOsB,EAAI,EAEtB,GACD,CASqBC,CAAkB5D,GACvC,CAGM,SAAU6D,EAAO5E,GACtB,OAAY,EAAJA,GAAWA,GAAK,EAAMA,GAAK,CACpC,CAQA,SAAS6E,EAAeC,EAAWC,GAElC,IADA,IAAInC,EAAIH,MAAMqC,GACL9E,EAAI,EAAG0E,GAAK,EAAG1E,EAAI8E,EAAG9E,IAAK4C,EAAE5C,GAAK0E,GAAK,EAAIK,IACpD,OAAOnC,CACR,CAEA,SAASoC,EAAYF,EAAWC,GAE/B,IADA,IAAInC,EAAIH,MAAMqC,GACL9E,EAAI,EAAG0E,EAAI,EAAG1E,EAAI8E,EAAG9E,IAAK4C,EAAE5C,GAAK0E,GAAKE,EAAOG,KACtD,OAAOnC,CACR,CAEM,SAAUqC,EAAkBF,EAAgBG,GAK9C,IAJA,IAAItC,EAAIiC,EAAeE,IAAQA,GAC3BD,EAAIC,IACJI,EAAKN,EAAeC,EAAGC,GACvBK,EAtBR,SAAqBN,EAAWC,GAE/B,IADA,IAAInC,EAAIH,MAAMqC,GACL9E,EAAI,EAAGA,EAAI8E,EAAG9E,IAAK4C,EAAE5C,GAAK,EAAI+E,IACvC,OAAOnC,CACR,CAkBayC,CAAYP,EAAGC,GACf/E,EAAI,EAAGA,EAAI8E,EAAG9E,IACnB,IAAK,IAAIQ,EAAI,EAAGA,EAAI4E,EAAGpF,GAAIQ,IACvBoC,EAAExG,KAAK+I,EAAGnF,GAAKQ,GAGvB,OAAO0E,EAAStC,EAAE6B,KAAI,SAAAC,GAAC,OAAIQ,EAAOR,EAAE,IAAI9B,CAC5C,CA8BA,SAAS0C,EAAgBR,EAAWS,EAAWR,GAE3C,IADA,IAAIS,EAAI/C,MAAMqC,GAAGW,UAAKvE,GAAWuD,KAAI,iBAAM,EAAE,IACpCzE,EAAI,EAAGA,EAAIuF,EAAGvF,IACnBgF,EAAYF,EAAGC,GAAM3C,SAAQ,SAACsC,EAAGlE,GAAC,OAAKgF,EAAEhF,GAAGpE,KAAKsI,EAAE,IAEvD,OAAOc,CACX,CAGA,SAASE,EAAkBH,EAAWR,GACrC,IAAIY,EAAK,EAAIZ,IACTa,EAAKb,IACLK,EAtBC,SAAqCL,GAE1C,IADA,IAAInC,EAAI,KACK,CACZ,IAAI5C,EAAI+E,IACR,GAAS,GAAL/E,EAAQ,MACZ4C,EAAExG,KAAK4D,E,CAER,OAAO4C,CACR,CAcUiD,CAA2Bd,GAEpC,OAAO/C,EADCsD,EAAgBF,EAAGjI,OAAQ,EAAEoI,EAAGR,GAC1BN,KAAI,SAAC7B,EAAG5C,GACpB,IAAM0E,EAAI9B,EAAE,GAAIkD,EAAKlD,EAAEmD,MAAM,GAG9B,OAAOtD,MAAM2C,EAAGpF,IAAIyF,UAAKvE,GAAWuD,KAAI,SAACuB,EAAGxF,GAC3C,IAAIyF,EAAOzF,EAAIoF,EACf,MAAO,CAAClB,EAAIlE,EAAImF,EAAIG,EAAGrB,KAAI,SAAAyB,GAAC,OAAIA,EAAID,CAAI,IACzC,GACD,IACD,CAEA,SAASE,EAAuBZ,EAAWR,GAG1C,OADQO,EADA,EAAIP,IACe,EAAEQ,EAAGR,GACvBN,KAAI,SAAA7B,GAAC,MAAI,CAACA,EAAE,GAAIA,EAAEmD,MAAM,GAAG,GACrC,CCvNA,IAAMK,ECEKzD,EAAwBpB,EAAO,q6cDIpC8E,EAAQ,IAAIC,IAAIrB,EAAkBmB,IAClCG,EAAU,IAAID,IAAIrB,EAAkBmB,IACpCI,EDyJA,SAA0BzB,GAE/B,IADA,IAAI0B,EAAM,KACG,CACZ,IAAIlB,EAAIR,IACR,GAAS,GAALQ,EAAQ,MACZkB,EAAIrK,KAAKsJ,EAAkBH,EAAGR,G,CAE/B,OAAa,CACZ,IAAIQ,EAAIR,IAAS,EACjB,GAAIQ,EAAI,EAAG,MACXkB,EAAIrK,KAAK+J,EAAuBZ,EAAGR,G,CAEpC,OAxJD,SAA6F9C,GAEzF,IADA,IAAME,EAAqC,CAAC,EACnCnC,EAAI,EAAGA,EAAIiC,EAAM9E,OAAQ6C,IAAK,CACnC,IAAMR,EAAQyC,EAAMjC,GACpBmC,EAAO3C,EAAM,IAAMA,EAAM,E,CAE7B,OAAO2C,CACX,CAiJQuE,CAAmC1E,EAAKyE,GAChD,CCtKeE,CAAgBP,GACzBQ,ED6NA,SAA0B7B,GAC/B,IAAI8B,EAAS5B,EAAkBF,GAAM+B,MAAK,SAACxC,EAAGC,GAAC,OAAKD,EAAIC,CAAC,IACzD,OACA,SAASwC,IACR,IAAIC,EAAW,GACf,OAAa,CACZ,IAAIC,EAAOhC,EAAkBF,EAAM8B,GACnC,GAAmB,GAAfI,EAAK9J,OAAa,MACtB6J,EAAS5K,KAAK,CAAC8K,IAAK,IAAIZ,IAAIW,GAAOE,KAAMJ,K,CAExCC,EAASF,MAAK,SAACxC,EAAGC,GAAC,OAAKA,EAAE2C,IAAIE,KAAO9C,EAAE4C,IAAIE,IAAI,IAChD,IAAIC,EAAOtC,IAOX,MAAO,CAACiC,SAAAA,EAAUM,MANND,EAAO,EAMME,QAJJ,GADrBF,EAAQA,EAAO,EAAG,IAKaG,KAFZ,IADnBH,IAAS,GAG4BI,MADjB,GAARJ,EAEd,CAjBON,EAkBR,CCjPmBW,CAAgBtB,GAI7BuB,EAAS,GACTC,EAAa,GAEnB,SAASC,EAAW/K,GAChB,OAAOgL,EAAAA,EAAAA,IAAiBhL,EAC5B,CAEA,SAASiL,EAAYC,GACjB,OAAOA,EAAIC,QAAO,SAAAC,GAAE,OAAU,OAANA,CAAY,GACxC,CAEM,SAAUC,EAAyBrL,GAAY,IACnBsL,EADmBC,GAAAC,EAAAA,EAAAA,GAClCxL,EAAKyL,MAAM,MAAI,IAAjC,IAAAF,EAAAG,MAAAJ,EAAAC,EAAAvD,KAAA2D,MAAmC,KAA1BC,EAAKN,EAAA5I,MACTwI,EAAMH,EAAWa,GACrB,IACC,IAAK,IAAI1I,EAAIgI,EAAIW,YAAYf,GAAc,EAAG5H,GAAK,EAAGA,IACrD,GAAIgI,EAAIhI,KAAO4H,EACd,MAAM,IAAIzG,MAAM,oCAGlB,GAAI6G,EAAI7K,QAAU,GAAK6K,EAAIY,OAAM,SAAAV,GAAE,OAAIA,EAAK,GAAI,KAAKF,EAAI,KAAOL,GAAUK,EAAI,KAAOL,EACpF,MAAM,IAAIxG,MAAM,0B,CAEhB,MAAO0H,GACR,MAAM,IAAI1H,MAAM,kBAAD2H,OAAmBJ,EAAK,OAAAI,OAAMD,EAAIE,S,EAElD,OAAAF,GAAAR,EAAAW,EAAAH,EAAA,SAAAR,EAAAY,GAAA,CACD,OAAOnM,CACR,CAEM,SAAUoM,EAAcpM,GAC7B,OAAOqL,EAGR,SAAmBrL,EAAcqM,GAChC,IAAIC,EAAQvB,EAAW/K,GAAMsE,UACzBiI,EAAS,GACb,KAAOD,EAAMjM,QAAQ,CACpB,IAAImM,EAAQC,EAAuBH,GACnC,GAAIE,EACHD,EAAOjN,KAAIoN,MAAXH,GAAMI,EAAAA,EAAAA,GAASN,EAAaG,SAD7B,CAIA,IAAIpB,EAAKkB,EAAMM,MACf,GAAIrD,EAAMsD,IAAIzB,GACbmB,EAAOjN,KAAK8L,QAGb,IAAI3B,EAAQoD,IAAIzB,GAAhB,CAGA,IAAIF,EAAMxB,EAAO0B,GACjB,IAAIF,EAIJ,MAAM,IAAI7G,MAAM,2BAAD2H,OAA4BZ,EAAG0B,SAAS,IAAIC,gBAH1DR,EAAOjN,KAAIoN,MAAXH,GAAMI,EAAAA,EAAAA,GAASzB,G,GAKjB,OAAOG,GAGKK,EAHwB3G,OAAOiI,cAAaN,MAApB3H,OAAwBwH,GAIlDb,EAAEuB,UAAU,SADvB,IAAavB,CAFb,CA5BiCuB,CAAUjN,EAAMiL,GACjD,CAiCA,SAASwB,EAAuBvB,EAAoBgC,G,MAE/CV,EACAW,EAFA9C,EAAOP,EAGPsD,EAAQ,GACRrH,EAAMmF,EAAI7K,OACV6M,IAAOA,EAAM7M,OAAS,GAC1B,IAD6B,IAAAgN,EAAA,WAE5B,IAAIjC,EAAKF,IAAMnF,GAEf,KADAsE,EAA6C,QAAtCiD,EAAAjD,EAAKH,SAASqD,MAAK,SAAA3F,GAAC,OAAIA,EAAEwC,IAAIyC,IAAIzB,EAAG,WAAC,IAAAkC,OAAA,EAAAA,EAAEjD,MACpC,MAAF,QACT,GAAIA,EAAKK,KACRyC,EAAQ/B,OACF,GAAIf,EAAKM,OACXS,IAAO+B,EAAO,MAAF,QAEjBC,EAAM9N,KAAK8L,GACPf,EAAKI,OACR2C,EAAM9N,KAAK,OACPyG,EAAM,GAAqB,OAAhBmF,EAAInF,EAAM,IAAcA,KAEpCsE,EAAKG,QACRgC,EAAQY,EAAMnE,QACI,GAAdoB,EAAKG,OAAYgC,EAAMgB,OAAO,EAAG,GACjCN,GAAOA,EAAM5N,KAAIoN,MAAVQ,GAAKP,EAAAA,EAAAA,GAASzB,EAAIjC,MAAMlD,GAAKzB,YACxC4G,EAAI7K,OAAS0F,E,EAlBRA,GAAK,CAAF,aAAAsH,IAGE,KAAM,CAkBlB,OAAOb,CACR,CErIA,IAAM5N,EAAS,IAAIC,EAAAA,GAAO2F,GAIpBiJ,EAAQ,IAAIvJ,WAAW,IAG7B,SAASwJ,GAAeC,GACpB,GAAoB,IAAhBA,EAAKtN,OAAgB,MAAM,IAAIgE,MAAM,qCACzC,OAAOsJ,CACX,CAEA,SAASC,GAAa5N,GAClB,IAAMiE,GAAQ4J,EAAAA,EAAAA,IAAYzB,EAAcpM,IAClC8N,EAA2B,GAEjC,GAAoB,IAAhB9N,EAAKK,OAAgB,OAAOyN,EAGhC,IADA,IAAIC,EAAO,EACF7K,EAAI,EAAGA,EAAIe,EAAM5D,OAAQ6C,IAAK,CAIzB,KAHAe,EAAMf,KAIZ4K,EAAMxO,KAAKoO,GAAezJ,EAAMgF,MAAM8E,EAAM7K,KAC5C6K,EAAO7K,EAAI,E,CAKnB,GAAI6K,GAAQ9J,EAAM5D,OAAU,MAAM,IAAIgE,MAAM,qCAG5C,OADAyJ,EAAMxO,KAAKoO,GAAezJ,EAAMgF,MAAM8E,KAC/BD,CACX,CAaM,SAAUE,GAAShO,GAEA,kBAAVA,GACPpB,EAAO6D,mBAAmB,iCAAkC,OAAQzC,GAMxE,IAHA,IAAIqF,EAA8BoI,EAE5BK,EAAQF,GAAa5N,GACpB8N,EAAMzN,QACTgF,GAAS4I,EAAAA,EAAAA,IAAUjC,EAAAA,EAAAA,IAAO,CAAC3G,GAAQ4I,EAAAA,EAAAA,GAAUH,EAAMlB,UAGvD,OAAOsB,EAAAA,EAAAA,IAAQ7I,EACnB,CAxDAoI,EAAM9E,KAAK,G,2BCAI,IAAI9J,EAAAA,GCXI,cDiBjB,SAAUsP,GAAOvJ,GACnB,MAAO,KAAQwJ,KAAAA,SAAcC,QAAO9K,EAAAA,EAAAA,IAASqB,IAAO0J,OAAO,MAC/D,CEnBO,I,uSCQD,SAAgBC,GAAOC,EAActP,G,8IA0BtB,OAzBF,MAAXA,IAAmBA,EAAU,CAAC,GAE5BuP,EAAuB,CACzBC,OAASxP,EAAQwP,QAAU,MAC3BC,QAAUzP,EAAQyP,SAAW,CAAC,EAC9BC,KAAO1P,EAAQ0P,WAAQxK,IAGI,IAA3BlF,EAAQ2P,iBACRJ,EAAQK,KAAoB,OAC5BL,EAAQM,MAAsB,WAC9BN,EAAQO,YAAkC,cAC1CP,EAAQQ,SAA4B,SACpCR,EAAQS,SAAW,UAGK,MAAxBhQ,EAAQiQ,gBACFC,EAAOlQ,EAAQiQ,cACZL,OAAQL,EAAQK,KAAqBM,EAAKN,MAC/CM,EAAKL,QAASN,EAAQM,MAAuBK,EAAKL,OAClDK,EAAKJ,cAAeP,EAAQO,YAAmCI,EAAKJ,aACpEI,EAAKH,WAAYR,EAAQQ,SAA6BG,EAAKH,UAC3DG,EAAKF,WAAYT,EAAQS,SAAWE,EAAKF,WAChDG,EAAApH,KAAA,EAEsBqH,MAAMd,EAAMC,GAAQ,OAC9B,OADPc,EAAQF,EAAAG,KAAAH,EAAApH,KAAG,GACEsH,EAASE,cAAa,QAWxC,OAXKb,EAAIS,EAAAG,KAEJb,EAAwC,CAAC,EAC3CY,EAASZ,QAAQrJ,QACjBiK,EAASZ,QAAQrJ,SAAQ,SAAC5C,EAAOW,GAC7BsL,EAAQtL,EAAIqM,eAAiBhN,CACjC,IAE8B6M,EAASZ,QAAUxE,OAAS7E,SAAQ,SAACjC,GAC/DsL,EAAQtL,EAAIqM,eAAiBH,EAASZ,QAAQgB,IAAItM,EACtD,IACHgM,EAAAO,OAAA,SAEM,CACHjB,QAASA,EACTkB,WAAYN,EAASO,OACrBC,cAAeR,EAASS,WACxBpB,MAAMrL,EAAAA,EAAAA,IAAS,IAAIW,WAAW0K,MACjC,yBAAAS,EAAAY,OAAA,GAAAC,EAAA,I,4SC5CCtR,GAAS,IAAIC,EAAAA,GFTI,aEavB,SAASsR,GAAQC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAChBC,WAAWD,EAASF,EACxB,GACJ,CAEA,SAASI,GAAQ9N,EAAY+N,GACzB,GAAa,MAAT/N,EAAiB,OAAO,KAE5B,GAAsB,kBAAXA,EAAuB,OAAOA,EAEzC,IAAIgO,EAAAA,EAAAA,IAAYhO,GAAQ,CACpB,GAAI+N,IAAgC,SAAvBA,EAAKhF,MAAM,KAAK,IAA+C,qBAA9BgF,EAAKhF,MAAM,KAAK,GAAGkF,QAC7D,IACI,OAAOC,EAAAA,EAAAA,IAAalO,E,CACtB,MAAOnD,GAAQ,CAErB,OAAO2O,EAAAA,EAAAA,IAAQxL,E,CAGnB,OAAOA,CACX,CA6UM,SAAUmO,GAAUC,EAAqCC,EAAeC,GAC1E,IAuBIpC,EAAmB,KACvB,GAAY,MAARmC,EAAc,CACdnC,GAAOf,EAAAA,EAAAA,IAAYkD,GAGnB,IAAME,EAAkD,kBAAhBH,EAA6B,CAAEpQ,IAAKoQ,IAAeI,EAAAA,EAAAA,IAAYJ,GACvG,GAAIG,EAAQtC,QAC6G,IAA7FwC,OAAOhH,KAAK8G,EAAQtC,SAASxD,QAAO,SAACtH,GAAC,MAA0B,iBAApBA,EAAE6L,aAAgC,IAAGrP,SAErG4Q,EAAQtC,SAAUuC,EAAAA,EAAAA,IAAYD,EAAQtC,SACtCsC,EAAQtC,QAAQ,gBAAkB,yBAGtCsC,EAAQtC,QAAU,CAAE,eAAgB,oBAExCmC,EAAaG,C,CAGjB,OAzTE,SAAqCH,EAAqClC,EAAmBoC,GAG/F,IAAMI,EAAuC,kBAAhBN,GAAwD,MAA5BA,EAAWO,cAAyBP,EAAWO,cAAe,GACvHzS,GAAO0S,eAAgBF,EAAe,GAAMA,EAAe,IAAO,EAC9D,oCAAqC,2BAA4BA,GAErE,IAAMG,EAA4C,kBAAhBT,EAA4BA,EAAWS,iBAAkB,KACrFC,EAAgD,kBAAhBV,GAAwE,kBAArCA,EAAWU,qBAAsCV,EAAWU,qBAAsB,IAC3J5S,GAAO0S,eAAgBE,EAAuB,GAAMA,EAAuB,IAAO,EAC9E,4CAA6C,kCAAmCA,GAEpF,IAAMC,EAA4C,kBAAhBX,KAA+BA,EAAWW,iBAEtE9C,EAAqC,CAAC,EAExCjO,EAAc,KAGZxB,EAAmB,CACrBwP,OAAQ,OAGRgD,GAAW,EAEXC,EAAU,KAEd,GAA2B,kBAAhBb,EACPpQ,EAAMoQ,OAEH,GAA2B,kBAAhBA,EAA0B,CAWxC,GAVkB,MAAdA,GAAwC,MAAlBA,EAAWpQ,KACjC9B,GAAO6D,mBAAmB,cAAe,iBAAkBqO,GAG/DpQ,EAAMoQ,EAAWpQ,IAEkB,kBAAxBoQ,EAAWa,SAAyBb,EAAWa,QAAU,IAChEA,EAAUb,EAAWa,SAGrBb,EAAWnC,QACX,IAAK,IAAMtL,KAAOyN,EAAWnC,QACzBA,EAAQtL,EAAIqM,eAAiB,CAAErM,IAAKA,EAAKX,MAAOqC,OAAO+L,EAAWnC,QAAQtL,KACtE,CAAC,gBAAiB,qBAAqBtD,QAAQsD,EAAIqM,gBAAkB,IACrEgC,GAAW,GAOvB,GAFAxS,EAAQ0S,YAAcd,EAAWc,UAEV,MAAnBd,EAAWe,MAAuC,MAAvBf,EAAWgB,SAAkB,CAC5B,WAAxBpR,EAAIqR,UAAU,EAAG,KAA8D,IAA3CjB,EAAWkB,6BAC/CpT,GAAOqT,WACH,mDACApT,EAAAA,GAAAA,OAAAA,iBACA,CAAEqT,SAAU,MAAOxR,IAAKA,EAAKmR,KAAMf,EAAWe,KAAMC,SAAU,eAItE,IAAMK,EAAgBrB,EAAWe,KAAO,IAAMf,EAAWgB,SACzDnD,EAAuB,cAAI,CACvBtL,IAAK,gBACLX,MAAO,SAAW0P,GAAavE,EAAAA,EAAAA,IAAYsE,I,CAIlB,MAA7BrB,EAAWjC,iBACX3P,EAAQ2P,iBAAmBiC,EAAWjC,gBAGX,MAA3BiC,EAAW3B,eACXjQ,EAAQiQ,cAAe+B,EAAAA,EAAAA,IAAYJ,EAAW3B,c,CAItD,IAzFezM,EAyFT2P,EAAS,IAAIC,OAAO,kCAAmC,KACvDC,EAAc7R,EAAOA,EAAI8R,MAAMH,GAAS,KAC9C,GAAIE,EACA,IACI,IAAMhD,EAAW,CACbM,WAAY,IACZE,cAAe,KACfpB,QAAS,CAAE,eAAiB4D,EAAU,IAAM,cAC5C3D,KAAO2D,EAAU,GAAKE,EAAaF,EAAU,KAjG1C7P,EAiGyD6P,EAAU,IAhG3E1E,EAAAA,EAAAA,IAAYnL,EAAMgQ,QAAQ,yBAAyB,SAACC,EAAKC,GAC5D,OAAO7N,OAAOC,aAAa6N,SAASD,EAAM,IAC9C,OAiGYvN,EAAwBkK,EAASX,KAIrC,OAHIoC,IACA3L,EAAS2L,EAAYzB,EAASX,KAAMW,IAEjCc,QAAQC,QAAoBjL,E,CAErC,MAAO9F,GACLX,GAAOqT,WAAW,4BAA6BpT,EAAAA,GAAAA,OAAAA,aAA4B,CACvE+P,KAAM4B,GAAQ+B,EAAU,GAAIA,EAAU,IACtChT,MAAOA,EACPuT,YAAa,KACbC,cAAe,MACfrS,IAAKA,G,CAKbkO,IACA1P,EAAQwP,OAAS,OACjBxP,EAAQ0P,KAAOA,EACgB,MAA3BD,EAAQ,kBACRA,EAAQ,gBAAkB,CAAEtL,IAAK,eAAgBX,MAAO,6BAE3B,MAA7BiM,EAAQ,oBACRA,EAAQ,kBAAoB,CAAEtL,IAAK,iBAAkBX,MAAOqC,OAAO6J,EAAKvO,WAIhF,IAAM2S,EAA2C,CAAC,EAClD7B,OAAOhH,KAAKwE,GAASrJ,SAAQ,SAACjC,GAC1B,IAAM4P,EAAStE,EAAQtL,GACvB2P,EAAYC,EAAO5P,KAAO4P,EAAOvQ,KACrC,IACAxD,EAAQyP,QAAUqE,EAElB,IAAME,EAAkB,WACpB,IAAIC,EAAsB,KAuB1B,MAAO,CAAEC,QAtBuB,IAAI/C,SAAQ,SAASC,EAAS+C,GACtD1B,IACAwB,EAAQ5C,YAAW,WACF,MAAT4C,IACJA,EAAQ,KAERE,EAAOzU,GAAO0U,UAAU,UAAWzU,EAAAA,GAAAA,OAAAA,QAAuB,CACtDiU,YAAatC,GAAQtR,EAAQ0P,KAAMoE,EAAY,iBAC/CD,cAAe7T,EAAQwP,OACvBiD,QAASA,EACTjR,IAAKA,KAEb,GAAGiR,GAEX,IAQkB4B,OANH,WACE,MAATJ,IACJK,aAAaL,GACbA,EAAQ,KACZ,EAGJ,CAzBwB,GA2BlBM,EAAgB,W,wJAETC,EAAU,EAAC,YAAEA,EAAUtC,GAAY,CAAA/B,EAAApH,KAAA,SAIzB,OAHXsH,EAA2B,KAAIF,EAAAsE,KAAA,EAAAtE,EAAApH,KAAA,EAGdsG,GAAO7N,EAAKxB,GAAQ,OAA7B,GAARqQ,EAAQF,EAAAG,OAEJkE,EAAUtC,GAAY,CAAA/B,EAAApH,KAAA,YACM,MAAxBsH,EAASM,YAA8C,MAAxBN,EAASM,WAAkB,CAAAR,EAAApH,KAAA,SAEV,GAA1C2L,EAAWrE,EAASZ,QAAQiF,UAAY,GACvB,QAAnB1U,EAAQwP,SAAoBkF,EAASpB,MAAM,WAAU,CAAAnD,EAAApH,KAAA,SACrB,OAAhCvH,EAAM6O,EAASZ,QAAQiF,SAASvE,EAAAO,OAAA,uBAAAP,EAAApH,KAAA,oBAIL,MAAxBsH,EAASM,WAAkB,CAAAR,EAAApH,KAAA,SAEf,GAAf4L,GAAW,GACXtC,EAAkB,CAAFlC,EAAApH,KAAA,SACL,OADKoH,EAAApH,KAAA,GACCsJ,EAAiBmC,EAAShT,GAAI,QAA/CmT,EAAQxE,EAAAG,KAAA,YAGRqE,EAAU,CAAFxE,EAAApH,KAAA,SAWR,OAVI6L,EAAQ,EAENC,EAAaxE,EAASZ,QAAQ,eAEhCmF,EADuB,kBAAhBC,GAA4BA,EAAWvB,MAAM,iBACrB,IAAvBK,SAASkB,GAETvC,EAAuBqB,SAAS9N,OAAO4B,KAAKqN,SAAWrN,KAAKC,IAAI,EAAG8M,KAG/ErE,EAAApH,KAAA,GACMkI,GAAQ2D,GAAM,eAAAzE,EAAAO,OAAA,uBAAAP,EAAApH,KAAA,iBAAAoH,EAAAsE,KAAA,GAAAtE,EAAA4E,GAAA5E,EAAA,SAQhB,OADhBE,EAAiBF,EAAA4E,GAAO1E,YAEpB2D,EAAeK,SACf3U,GAAOqT,WAAW,mBAAoBpT,EAAAA,GAAAA,OAAAA,aAA4B,CAC9DiU,YAAatC,GAAQtR,EAAQ0P,KAAMoE,EAAY,iBAC/CD,cAAe7T,EAAQwP,OACvBwF,YAAW7E,EAAA4E,GACXvT,IAAKA,KAEZ,QAkBJ,GAdGkO,EAAOW,EAASX,KAEhB8C,GAAoC,MAAxBnC,EAASM,WACrBjB,EAAO,MACC6C,IAAqBlC,EAASM,WAAa,KAAON,EAASM,YAAc,OACjFqD,EAAeK,SACf3U,GAAOqT,WAAW,eAAgBpT,EAAAA,GAAAA,OAAAA,aAA4B,CAC1DiR,OAAQP,EAASM,WACjBlB,QAASY,EAASZ,QAClBC,KAAM4B,GAAQ5B,EAAQW,EAASZ,QAAWY,EAASZ,QAAQ,gBAAiB,MAC5EmE,YAAatC,GAAQtR,EAAQ0P,KAAMoE,EAAY,iBAC/CD,cAAe7T,EAAQwP,OACvBhO,IAAKA,MAITsQ,EAAa,CAAF3B,EAAApH,KAAA,SAEQ,OAFRoH,EAAAsE,KAAA,GAAAtE,EAAApH,KAAA,GAEc+I,EAAYpC,EAAMW,GAAS,QACxB,OADlBlK,EAAMgK,EAAAG,KACZ0D,EAAeK,SAASlE,EAAAO,OAAA,SACjBvK,GAAM,WAAAgK,EAAAsE,KAAA,GAAAtE,EAAA8E,GAAA9E,EAAA,YAITA,EAAA8E,GAAMC,eAAiBV,EAAUtC,GAAY,CAAA/B,EAAApH,KAAA,SAC1B,GAAf4L,GAAW,GACXtC,EAAkB,CAAFlC,EAAApH,KAAA,SACL,OADKoH,EAAApH,KAAA,GACCsJ,EAAiBmC,EAAShT,GAAI,QAA/CmT,EAAQxE,EAAAG,KAAA,YAGRqE,EAAU,CAAFxE,EAAApH,KAAA,SAGR,OAFM0J,EAAUH,EAAuBqB,SAAS9N,OAAO4B,KAAKqN,SAAWrN,KAAKC,IAAI,EAAG8M,KACnFrE,EAAApH,KAAA,GACMkI,GAAQwB,GAAQ,eAAAtC,EAAAO,OAAA,uBAK9BsD,EAAeK,SACf3U,GAAOqT,WAAW,4BAA6BpT,EAAAA,GAAAA,OAAAA,aAA4B,CACvE+P,KAAM4B,GAAQ5B,EAAQW,EAASZ,QAAWY,EAASZ,QAAQ,gBAAiB,MAC5EpP,MAAK8P,EAAA8E,GACLrB,YAAatC,GAAQtR,EAAQ0P,KAAMoE,EAAY,iBAC/CD,cAAe7T,EAAQwP,OACvBhO,IAAKA,IACN,QAOX,OAHAwS,EAAeK,SAGflE,EAAAO,OAAA,SACoBhB,GAAK,QA1GiB8E,IAASrE,EAAApH,KAAA,uBAAAoH,EAAAO,OAAA,SA6GhDhR,GAAOqT,WAAW,kBAAmBpT,EAAAA,GAAAA,OAAAA,aAA4B,CACpEiU,YAAatC,GAAQtR,EAAQ0P,KAAMoE,EAAY,iBAC/CD,cAAe7T,EAAQwP,OACvBhO,IAAKA,KACP,yBAAA2O,EAAAY,OAAA,GAAAC,EAAA,0B,CAnHgB,GAsHtB,OAAOG,QAAQgE,KAAK,CAAEnB,EAAeE,QAASK,GAClD,CA4CWa,CAAgBxD,EAAYlC,GAzCb,SAAClM,EAAmB6M,GACtC,IAAIlK,EAAc,KAClB,GAAa,MAAT3C,EACA,IACI2C,EAASkP,KAAKC,OAAM5D,EAAAA,EAAAA,IAAalO,G,CACnC,MAAOnD,GACLX,GAAOqT,WAAW,eAAgBpT,EAAAA,GAAAA,OAAAA,aAA4B,CAC1D+P,KAAMlM,EACNnD,MAAOA,G,CASnB,OAJIyR,IACA3L,EAAS2L,EAAY3L,EAAQkK,IAG1BlK,CACX,GAwBJ,CAEM,SAAUoP,GAAQzV,EAAwBE,GAO5C,OANKA,IAAWA,EAAU,CAAC,GAEN,OADrBA,GAAUgS,EAAAA,EAAAA,IAAYhS,IACVkI,QAAiBlI,EAAQkI,MAAQ,GACtB,MAAnBlI,EAAQwV,UAAmBxV,EAAQwV,QAAU,KACzB,MAApBxV,EAAQyV,WAAoBzV,EAAQyV,SAAW,KAE5C,IAAItE,SAAQ,SAASC,EAAS+C,GAEjC,IAAIF,EAAsB,KACtBxH,GAAgB,EAGd4H,EAAS,WACX,OAAI5H,IACJA,GAAO,EACHwH,GAASK,aAAaL,IACnB,EACX,EAEIjU,EAAQyS,UACRwB,EAAQ5C,YAAW,WACXgD,KAAYF,EAAO,IAAIhP,MAAM,WACrC,GAAGnF,EAAQyS,UAGf,IAAMiD,EAAa1V,EAAQ0V,WAEvBlB,EAAU,GACd,SAAS/I,IACL,OAAO3L,IAAO6V,MAAK,SAASxP,GAGxB,QAAejB,IAAXiB,EACIkO,KAAYjD,EAAQjL,QAErB,GAAInG,EAAQ4V,SACf5V,EAAQ4V,SAASC,KAAK,OAAQpK,QAE3B,GAAIzL,EAAQ8V,UACf9V,EAAQ8V,UAAUD,KAAK,QAASpK,QAG7B,IAAKgB,EAAM,CAEd,KADA+H,EACckB,EAEV,YADIrB,KAAYF,EAAO,IAAIhP,MAAM,yBAIrC,IAAIsN,EAAUzS,EAAQyV,SAAW9B,SAAS9N,OAAO4B,KAAKqN,SAAWrN,KAAKC,IAAI,EAAG8M,KACzE/B,EAAUzS,EAAQkI,QAASuK,EAAUzS,EAAQkI,OAC7CuK,EAAUzS,EAAQwV,UAAW/C,EAAUzS,EAAQwV,SAEnDnE,WAAW5F,EAAOgH,E,CAGtB,OAAO,IACX,IAAG,SAASpS,GACJgU,KAAYF,EAAO9T,EAC3B,GACJ,CACAoL,EACJ,GACJ,C,2BC5danG,GAAU,kB,sBCYjB5F,GAAS,IAAIC,EAAAA,GAAO2F,IAiBbyQ,GAAS,WAGlB,SAAAA,KAAAnS,EAAAA,EAAAA,GAAA,KAAAmS,GACIrW,GAAOsW,SAAS,gBAADD,EAAA,KAAAE,iBAAA,EAAaF,GAC5BjS,KAAKoS,QAAUpS,KAAKqS,mBACxB,CAqcC,OArcAjS,EAAAA,EAAAA,GAAA6R,EAAA,EAAA5R,IAAA,oBAAAX,MAED,WAAiB,IAAA4S,EAAA,KACPF,EAA6B,CAAC,EAE9BG,EAAUvS,KAAKuS,QAAQC,KAAKxS,MAC5ByS,EAAYzS,KAAKyS,UAAUD,KAAKxS,MAChC0S,EAAW1S,KAAK0S,SAASF,KAAKxS,MAC9B4B,EAAO5B,KAAK4B,KAAK4Q,KAAKxS,MACtBoL,EAAOpL,KAAKoL,KAAKoH,KAAKxS,MACtB2S,EAAM3S,KAAK2S,IAAIH,KAAKxS,MACpB4S,EAAS5S,KAAK4S,OAAOJ,KAAKxS,MAC1ByN,EAAOzN,KAAKyN,KAAK+E,KAAKxS,MAmI5B,OA/HAoS,EAAQS,YAAc,CAClBzH,KAAMA,EAENqC,KAAMA,EACNqF,WAAYb,EAAUc,UAAU/S,KAAK8S,WAAWN,KAAKxS,MAAO,MAE5DgT,UAAWf,EAAUc,UAAU3H,EAAM,MACrC6H,YAAahB,EAAUc,UAAUH,EAAQ,MACzCM,iBAAkBjB,EAAUc,UAAUH,EAAQ,MAE9CO,cAAelB,EAAUc,UAAUH,EAAQ,MAE3CQ,KAAMb,EAINc,SAAUpB,EAAUc,UAAUN,GAC9Ba,qBAAsBrB,EAAUc,UAAUN,GAC1Cc,aAActB,EAAUc,UAAUN,GAElCe,SAAUf,EACVgB,GAAIxB,EAAUc,UAAUR,EAAS,MACjC7S,MAAO+S,EACPiB,MAAOd,EACPhR,KAAMA,EAEN0E,EAAG2L,EAAUc,UAAU/S,KAAK2T,SAC5BjL,EAAGuJ,EAAUc,UAAU/S,KAAK2T,SAC5B7Q,EAAGmP,EAAUc,UAAUH,GAEvBgB,QAAS3B,EAAUc,UAAUR,EAAS,MAEtCsB,IAAK5B,EAAUc,UAAUnR,IAG7BwQ,EAAQ0B,mBAAqB,CACzBV,KAAMnB,EAAUc,UAAUR,GAC1BmB,MAAOzB,EAAUc,UAAUH,GAC3BY,SAAUvB,EAAUc,UAAUN,GAC9BY,SAAUpB,EAAUc,UAAUN,GAC9Ba,qBAAsBrB,EAAUc,UAAUN,GAC1Cc,aAActB,EAAUc,UAAUN,GAClCgB,GAAIxB,EAAUc,UAAUR,GACxB7S,MAAOuS,EAAUc,UAAUN,GAC3B7Q,KAAMqQ,EAAUc,WA9CD,SAACjQ,GAAa,OAAOwP,EAAK1Q,KAAKkB,GAAG,EAAO,IA+CxD2K,KAAMwE,EAAUc,UAAUH,GAC1BE,WAAYb,EAAUc,UAAU/S,KAAK8S,WAAWN,KAAKxS,MAAO,OAGhEoS,EAAQ2B,WAAa,CACjBb,iBAAkBN,EAClBK,YAAaL,EACboB,gBAAiB5I,EACjBmH,QAASA,EACT0B,OAAQhC,EAAUiC,QAAQ9I,GAC1BxJ,KAAMA,EACNuS,SAAUvB,EACVI,UAAW5H,GAGfgH,EAAQgC,QAAU,CACdX,GAAIxB,EAAUc,UAAU/S,KAAKuS,QAAS,MACtCa,KAAMnB,EAAUc,UAAU/S,KAAKuS,QAAS,MACxC8B,gBAAiBpC,EAAUc,UAAUR,EAAS,MAC9CW,iBAAkBN,EAElB0B,KAAMrC,EAAUc,UAAUJ,GAC1B4B,QAAS9B,EACT+B,UAAWvC,EAAUc,UAAUnR,GAC/BoR,UAAW5H,EACX4I,gBAAiB5I,EACjBqJ,KAAMxC,EAAUiC,QAAQlU,KAAK+T,WAAWvB,KAAKxS,OAC7CiT,YAAaL,EACbO,cAAelB,EAAUc,UAAUH,EAAQ,MAC3C8B,kBAAmBjC,EACnBkC,kBAAmB1C,EAAUc,UAAUN,GACvC3F,OAAQmF,EAAUc,UAAUH,GAC5BnF,KAAMA,GAGV2E,EAAQwC,MAAQ,CACZxJ,KAAMA,EACNyJ,WAAYzJ,EACZwH,OAAQA,EAERkC,UAAWlC,EACXc,MAAOzB,EAAUc,UAAUJ,GAC3BoC,WAAY/U,KAAK+U,WAAWvC,KAAKxS,MAEjCwT,SAAUf,EACV8B,QAAS9B,EAETuC,MAAOzC,EACP0C,UAAWrT,EAEXsT,aAAcjD,EAAUc,UAAUd,EAAUiC,QAAQ9I,IAEpD+J,cAAelD,EAAUc,UAAUN,IAGvCL,EAAQgD,uBAAwBlH,EAAAA,EAAAA,IAAYkE,EAAQwC,OACpDxC,EAAQgD,sBAAsBF,aAAejD,EAAUc,UAAUd,EAAUiC,QAAQlU,KAAKqV,oBAAoB7C,KAAKxS,QAEjHoS,EAAQjK,OAAS,CACbmN,UAAWrD,EAAUc,UAAUL,OAAUtR,GACzCmU,QAAStD,EAAUc,UAAUL,OAAUtR,GACvC4R,UAAWf,EAAUc,UAAU3H,OAAMhK,GACrCmR,QAASN,EAAUc,UAAUR,OAASnR,GACtC6S,OAAQhC,EAAUc,UAAU/S,KAAKiU,OAAOzB,KAAKxS,WAAOoB,IAGxDgR,EAAQoD,UAAY,CAChBvC,YAAahB,EAAUc,UAAUH,GACjCI,UAAWf,EAAUc,UAAU3H,GAC/B8H,iBAAkBN,EAElB6C,QAASxD,EAAUc,UAAU/S,KAAK0V,QAAQlD,KAAKxS,OAE/CuS,QAASA,EACT3Q,KAAMqQ,EAAU0D,aAAa/T,EAAM,MAEnCqS,OAAQhC,EAAUiC,QAAQ9I,GAE1B4I,gBAAiB5I,EACjB+I,SAAUvB,GAGPR,CACX,GAAC,CAAA/R,IAAA,aAAAX,MAED,SAAWoT,GACP,OAAO8C,EAAAA,GAAAA,IAAc9C,GAAc,GACvC,GAGA,CAAAzS,IAAA,SAAAX,MACA,SAAOkT,GACH,MAAe,OAAXA,EAA0B,EACvBiD,EAAAA,GAAAA,KAAejD,GAAQkD,UAClC,GAAC,CAAAzV,IAAA,OAAAX,MAED,SAAKkT,GACD,MAAe,OAAXA,GAA6B,MAAVA,EAAyB,EACzCiD,EAAAA,GAAAA,KAAejD,GAAQkD,UAClC,GAEA,CAAAzV,IAAA,YAAAX,MACA,SAAUA,GACN,OAAOmW,EAAAA,GAAAA,KAAenW,EAC1B,GAEA,CAAAW,IAAA,UAAAX,MACA,SAAQA,GACJ,GAAsB,mBAAXA,EAAwB,OAAOA,EAC1C,GAAsB,kBAAXA,EAAqB,CAE5B,GAAc,UADdA,EAAQA,EAAMgN,eACU,OAAO,EAC/B,GAAc,UAAVhN,EAAqB,OAAO,C,CAEpC,MAAM,IAAI2B,MAAM,qBAAuB3B,EAC3C,GAAC,CAAAW,IAAA,MAAAX,MAED,SAAIA,EAAYqW,GACZ,MAAsB,kBAAXrW,IACFqW,GAAoC,OAA1BrW,EAAMqP,UAAU,EAAG,KAAerP,EAAQ,KAAOA,IAC5DsW,EAAAA,EAAAA,IAAYtW,IACNA,EAAMgN,cAGb9Q,GAAO6D,mBAAmB,eAAgB,QAASC,EAC9D,GAAC,CAAAW,IAAA,OAAAX,MAED,SAAKA,EAAYqW,GACb,IAAM1T,EAASrC,KAAK2S,IAAIjT,EAAOqW,GAC/B,GAAK1T,EAAOhF,OAAS,IAAO,EACxB,MAAM,IAAIgE,MAAM,8BAAgC3B,GAEpD,OAAO2C,CACX,GAGA,CAAAhC,IAAA,UAAAX,MACA,SAAQA,GACJ,OAAOuW,EAAAA,GAAAA,IAAWvW,EACtB,GAAC,CAAAW,IAAA,cAAAX,MAED,SAAYA,GACR,KAAKsW,EAAAA,EAAAA,IAAYtW,EAAO,IAAO,OAAO,KACtC,IAAM6S,GAAU0D,EAAAA,GAAAA,KAAWC,EAAAA,EAAAA,IAAaxW,EAAO,KAC/C,MChPmB,+CDgPX6S,EAA2B,KAAMA,CAC7C,GAAC,CAAAlS,IAAA,kBAAAX,MAED,SAAgBA,GACZ,OAAOyW,EAAAA,GAAAA,IAAmBzW,EAC9B,GAEA,CAAAW,IAAA,WAAAX,MACA,SAASgT,GACL,GAAgB,MAAZA,EAAoB,MAAO,SAE/B,GAAiB,aAAbA,EAA2B,MAAO,MAEtC,GAAiB,WAAbA,GAAsC,YAAbA,EACzB,OAAOA,EAGX,GAAyB,kBAAdA,IAA0BsD,EAAAA,EAAAA,IAAYtD,GAC7C,OAAO0D,EAAAA,EAAAA,IAA0B1D,GAGrC,MAAM,IAAIrR,MAAM,mBACpB,GAEA,CAAAhB,IAAA,OAAAX,MACA,SAAKA,EAAYqW,GACb,IAAM1T,EAASrC,KAAK2S,IAAIjT,EAAOqW,GAC/B,OAA8B,MAA1BM,EAAAA,EAAAA,IAAchU,GACPzG,GAAO6D,mBAAmB,eAAgB,QAASC,GAEvD2C,CACX,GAEA,CAAAhC,IAAA,aAAAX,MACA,SAAWA,GACP,GAAa,MAATA,EAAiB,OAAO,KAE5B,IAAMoD,EAAI+S,EAAAA,GAAAA,KAAenW,GAEzB,IACI,OAAOoD,EAAEgT,U,CACX,MAAOvZ,GAAQ,CAElB,OAAO,IACV,GAAC,CAAA8D,IAAA,UAAAX,MAED,SAAQA,GACJ,KAAKsW,EAAAA,EAAAA,IAAYtW,GACb,MAAM,IAAI2B,MAAM,mBAEpB,OAAOiV,EAAAA,EAAAA,IAAW5W,EAAO,GAC7B,GAAC,CAAAW,IAAA,SAAAX,MAED,SAAOA,EAAY6W,GACK,MAAhB7W,EAAM8W,QAAiC,MAAf9W,EAAMsV,QAC9BtV,EAAMsV,MAAQtV,EAAM8W,QAGxB,IAAMzB,EAAmC,MAArBrV,EAAM+W,YAAuB/W,EAAM+W,YAAa/W,EAAMqV,WACpE1S,EAAS4P,EAAUtK,MAAM4O,EAAQ7W,GAEvC,OADA2C,EAAOoU,YAA8B,MAAd1B,EAAsB,KAAMc,EAAAA,GAAAA,KAAed,GAC3D1S,CACX,GAAC,CAAAhC,IAAA,QAAAX,MAED,SAAMA,GACF,OAAOM,KAAK0W,OAAOhX,EAAOM,KAAKoS,QAAQwC,MAC3C,GAAC,CAAAvU,IAAA,wBAAAX,MAED,SAAsBA,GAClB,OAAOM,KAAK0W,OAAOhX,EAAOM,KAAKoS,QAAQgD,sBAC3C,GAEA,CAAA/U,IAAA,qBAAAX,MACA,SAAmBA,GACf,OAAOuS,EAAUtK,MAAM3H,KAAKoS,QAAQ0B,mBAAoBpU,EAC5D,GAAC,CAAAW,IAAA,sBAAAX,MAED,SAAoBmT,GAGO,MAAnBA,EAAY8D,KAAuC,MAAxB9D,EAAYW,WACvCX,EAAYW,SAAWX,EAAY8D,KAKnC9D,EAAYY,IAAMoC,EAAAA,GAAAA,KAAehD,EAAYY,IAAImD,WACjD/D,EAAYY,GAAK,8CAII,MAArBZ,EAAYvJ,OAAqC,MAApBuJ,EAAYjR,OACzCiR,EAAYjR,KAAOiR,EAAYvJ,OAIb,MAAlBuJ,EAAYY,IAAqC,MAAvBZ,EAAYe,UACtCf,EAAYe,QAAU5T,KAAKqU,gBAAgBxB,IAGrB,IAArBA,EAAYpF,MAAmC,IAArBoF,EAAYpF,MAAwC,MAA1BoF,EAAYC,aACjED,EAAYC,WAAa,IAG7B,IAAMzQ,EAA8B4P,EAAUtK,MAAM3H,KAAKoS,QAAQS,YAAaA,GAE9E,GAA2B,MAAvBA,EAAYhV,QAAiB,CAC7B,IAAIA,EAAUgV,EAAYhV,SAEtBmY,EAAAA,EAAAA,IAAYnY,KACZA,EAAUgY,EAAAA,GAAAA,KAAehY,GAASiY,YAGtCzT,EAAOxE,QAAUA,C,KAEd,CACH,IAAIA,EAAUgV,EAAYgE,UAGX,MAAXhZ,GAA+B,MAAZwE,EAAOS,IAC1BjF,EAAUgV,EAAYhV,UAGtBmY,EAAAA,EAAAA,IAAYnY,KACZA,EAAUgY,EAAAA,GAAAA,KAAehY,GAASiY,YAGd,kBAAbjY,GAAqC,MAAZwE,EAAOS,KACvCjF,GAAWwE,EAAOS,EAAI,IAAM,GACd,IAAKjF,EAAU,GAC7BA,EAAUgS,SAAShS,IAGC,kBAAbA,IAAyBA,EAAU,GAE9CwE,EAAOxE,QAAUA,C,CAQrB,OAJIwE,EAAO2Q,WAAoD,MAAvC3Q,EAAO2Q,UAAUtD,QAAQ,KAAM,MACnDrN,EAAO2Q,UAAY,MAGhB3Q,CACX,GAAC,CAAAhC,IAAA,cAAAX,MAED,SAAYA,GACR,OAAOoX,EAAAA,GAAAA,IAAiBpX,EAC5B,GAAC,CAAAW,IAAA,aAAAX,MAED,SAAWA,GACP,OAAOuS,EAAUtK,MAAM3H,KAAKoS,QAAQ2B,WAAYrU,EACpD,GAAC,CAAAW,IAAA,UAAAX,MAED,SAAQA,GACJ,IAAM2C,EAA6B4P,EAAUtK,MAAM3H,KAAKoS,QAAQgC,QAAS1U,GAGzE,GAAmB,MAAf2C,EAAOiS,KACP,GAAIjS,EAAOiS,KAAKjX,QAAU,EAAG,CAEzB,IAAMqC,EAAQmW,EAAAA,GAAAA,KAAexT,EAAOiS,MAAMwB,WAC5B,IAAVpW,GAAyB,IAAVA,GAEM,MAAjB2C,EAAOyK,QAAmBzK,EAAOyK,SAAWpN,GAC5C9D,GAAO6D,mBAAmB,kCAAmC,QAAS,CAAE6U,KAAMjS,EAAOiS,KAAMxH,OAAQzK,EAAOyK,SAE9GzK,EAAOyK,OAASpN,SACT2C,EAAOiS,MAEd1Y,GAAO6D,mBAAmB,0BAA2B,aAAc4C,EAAOiS,K,MAEhD,KAAvBjS,EAAOiS,KAAKjX,QAEnBzB,GAAO6D,mBAAmB,oBAAqB,aAAc4C,EAAOiS,MAQ5E,OAJqB,MAAjBjS,EAAOyK,SACPzK,EAAO0U,WAAY,GAGhB1U,CACX,GAAC,CAAAhC,IAAA,SAAAX,MAED,SAAOA,GAAU,IAAAsX,EAAA,KACb,OAAIrU,MAAMC,QAAQlD,GACPA,EAAMiF,KAAI,SAAC7B,GAAC,OAAKkU,EAAK/C,OAAOnR,EAAE,IAEtB,MAATpD,EACAM,KAAKoL,KAAK1L,GAAO,GAGrB,IACX,GAAC,CAAAW,IAAA,SAAAX,MAED,SAAOA,GACH,OAAOuS,EAAUtK,MAAM3H,KAAKoS,QAAQjK,OAAQzI,EAChD,GAAC,CAAAW,IAAA,YAAAX,MAED,SAAUA,GACN,OAAOuS,EAAUtK,MAAM3H,KAAKoS,QAAQoD,UAAW9V,EACnD,IAAC,EAAAW,IAAA,QAAAX,MAED,SAAa6W,EAA0CU,GACnD,IAAM5U,EAAc,CAAC,EACrB,IAAK,IAAMhC,KAAOkW,EACd,IACI,IAAM7W,EAAQ6W,EAAOlW,GAAK4W,EAAO5W,SACnBe,IAAV1B,IAAuB2C,EAAOhC,GAAOX,E,CAC3C,MAAOnD,GAGL,MAFAA,EAAM2a,SAAW7W,EACjB9D,EAAM4a,WAAaF,EAAO5W,GACpB9D,C,CAGd,OAAO8F,CACX,GAEA,CAAAhC,IAAA,YAAAX,MACA,SAAiB6W,EAAoBa,GACjC,OAAQ,SAAS1X,GACb,OAAa,MAATA,EAAwB0X,EACrBb,EAAO7W,EAClB,CACJ,GAEA,CAAAW,IAAA,eAAAX,MACA,SAAoB6W,EAAoBc,GACpC,OAAQ,SAAS3X,GACb,OAAKA,EACE6W,EAAO7W,GADO2X,CAEzB,CACJ,GAEA,CAAAhX,IAAA,UAAAX,MACA,SAAe6W,GACX,OAAQ,SAASpU,GACb,IAAKQ,MAAMC,QAAQT,GAAU,MAAM,IAAId,MAAM,gBAE7C,IAAMgB,EAAc,GAMpB,OAJAF,EAAMG,SAAQ,SAAS5C,GACnB2C,EAAO/F,KAAKia,EAAO7W,GACvB,IAEO2C,CACX,CACJ,KAAC4P,CAAA,CA3ciB,GAkdhB,SAAUqF,GAAuB5X,GACnC,OAAQA,GAA+C,oBAA/BA,EAAM6X,mBAClC,CAEM,SAAUA,GAAoB7X,GAChC,OAAQ4X,GAAuB5X,IAAUA,EAAM6X,qBACnD,CAGA,IAAIC,IAAkB,EAChB,SAAUC,KACRD,KACJA,IAAkB,EAElBE,QAAQC,IAAI,8BACZD,QAAQC,IAAI,8DACZD,QAAQC,IAAI,IACZD,QAAQC,IAAI,6EACZD,QAAQC,IAAI,sEACZD,QAAQC,IAAI,IACZD,QAAQC,IAAI,2EACZD,QAAQC,IAAI,0EACZD,QAAQC,IAAI,iFACZD,QAAQC,IAAI,IACZD,QAAQC,IAAI,sDACZD,QAAQC,IAAI,8BAChB,C,2SEnfM/b,GAAS,IAAIC,EAAAA,GAAO2F,IAO1B,SAASoW,GAAWC,GACf,OAAa,MAATA,EAAwB,QACC,MAAzBxB,EAAAA,EAAAA,IAAcwB,IACdjc,GAAO6D,mBAAmB,gBAAiB,QAASoY,GAEjDA,EAAMnL,cAClB,CAEA,SAASoL,GAAgB7D,GAGrB,IADAA,EAASA,EAAOhO,QACTgO,EAAO5W,OAAS,GAAkC,MAA7B4W,EAAOA,EAAO5W,OAAS,IAAc4W,EAAOrK,MAExE,OAAOqK,EAAOtP,KAAI,SAACkT,GACf,GAAIlV,MAAMC,QAAQiV,GAAQ,CAGtB,IAAME,EAAyC,CAAC,EAChDF,EAAMvV,SAAQ,SAACuV,GACXE,EAAOH,GAAWC,KAAU,CAChC,IAGA,IAAM9Q,EAASoH,OAAOhH,KAAK4Q,GAG3B,OAFAhR,EAAOC,OAEAD,EAAOiR,KAAK,I,CAGnB,OAAOJ,GAAWC,EAE1B,IAAGG,KAAK,IACZ,CAgBA,SAASC,GAAYC,GACjB,GAA0B,kBAAfA,EAAyB,CAGhC,GAFAA,EAAYA,EAAUxL,cAEW,MAA7B2J,EAAAA,EAAAA,IAAc6B,GACd,MAAO,MAAQA,EAGnB,IAAgC,IAA5BA,EAAUnb,QAAQ,KAClB,OAAOmb,C,KAGR,IAAIvV,MAAMC,QAAQsV,GACrB,MAAO,YAAcJ,GAAgBI,GAElC,GAAIC,EAAAA,GAAAA,YAAsBD,GAE7B,MADAtc,GAAOwc,KAAK,mBACN,IAAI/W,MAAM,mBAEb,GAAI6W,GAAmC,kBAAfA,EAC3B,MAAO,WAAaA,EAAU3F,SAAW,KAAO,IAAMuF,GAAgBI,EAAUjE,QAAU,G,CAG9F,MAAM,IAAI5S,MAAM,mBAAqB6W,EACzC,CAKA,SAASG,KACL,OAAQ,IAAIC,MAAQD,SACxB,CAEA,SAASvH,GAAM1D,GACX,OAAO,IAAIC,SAAQ,SAACC,GAChBC,WAAWD,EAASF,EACxB,GACJ,CAmBA,IAAMmL,GAAiB,CAAE,QAAS,UAAW,UAAW,QAE3CC,GAAK,WAKd,SAAAA,EAAYC,EAAaC,EAAoB3G,IAAajS,EAAAA,EAAAA,GAAA,KAAA0Y,IACtDzY,EAAAA,EAAAA,IAAeC,KAAM,MAAOyY,IAC5B1Y,EAAAA,EAAAA,IAAeC,KAAM,WAAY0Y,IACjC3Y,EAAAA,EAAAA,IAAeC,KAAM,OAAQ+R,EACjC,CAsCC,OAtCA3R,EAAAA,EAAAA,GAAAoY,EAAA,EAAAnY,IAAA,QAAAsM,IAED,WACI,OAAQ3M,KAAKyN,MACT,IAAK,KACF,OAAOzN,KAAKoL,KACf,IAAK,SACF,OAAOpL,KAAKmI,OAEnB,OAAOnI,KAAKyY,GAChB,GAAC,CAAApY,IAAA,OAAAsM,IAED,WACI,OAAO3M,KAAKyY,IAAIhQ,MAAM,KAAK,EAC/B,GAAC,CAAApI,IAAA,OAAAsM,IAED,WACI,IAAM7B,EAAQ9K,KAAKyY,IAAIhQ,MAAM,KAC7B,MAAiB,OAAbqC,EAAM,GAAsB,KACzBA,EAAM,EACjB,GAAC,CAAAzK,IAAA,SAAAsM,IAED,WACI,IAAM7B,EAAQ9K,KAAKyY,IAAIhQ,MAAM,KAC7B,GAAiB,WAAbqC,EAAM,GAAmB,OAAO,KACpC,IA1GmBlJ,EA0Gb2Q,EAAUzH,EAAM,GAEhBmJ,EA3GG,MADUrS,EA4GckJ,EAAM,IA3GjB,GAEnBlJ,EAAK6G,MAAM,MAAM9D,KAAI,SAACkT,GACzB,GAAc,KAAVA,EAAgB,MAAO,GAE3B,IAAM/M,EAAQ+M,EAAMpP,MAAM,KAAK9D,KAAI,SAACkT,GAChC,MAAmB,SAAVA,EAAoB,KAAMA,CACvC,IAEA,OAA0B,IAAjB/M,EAAMzN,OAAgByN,EAAM,GAAIA,CAC7C,IAkGU3C,EAAiB,CAAC,EAKxB,OAHI8L,EAAO5W,OAAS,IAAK8K,EAAO8L,OAASA,GACrC1B,GAAuB,MAAZA,IAAmBpK,EAAOoK,QAAUA,GAE5CpK,CACX,GAAC,CAAA9H,IAAA,WAAAX,MAED,WACI,OAAQM,KAAKyY,IAAI1b,QAAQ,MAAQ,GAAKwb,GAAexb,QAAQiD,KAAKyY,MAAQ,CAC9E,KAACD,CAAA,CA/Ca,GAsFZG,GAAgD,CAClD,EAAO,CAAEC,OAAQ,MAAQC,MAAO,EAAMC,KAAM,EAAMC,OAAQ,MAC1D,EAAO,CAAEH,OAAQ,MAAQC,MAAO,GAAMC,KAAM,GAAMC,OAAQ,OAC1D,EAAO,CAAEH,OAAQ,OAAQC,MAAO,GAAMC,KAAM,IAC5C,GAAO,CAAEF,OAAQ,MAAQI,IAAK,OAC9B,GAAO,CAAEJ,OAAQ,MAAQI,IAAK,OAC9B,IAAO,CAAEJ,OAAQ,OAAQI,IAAK,QAGlC,SAASC,GAAWvZ,GAChB,OAAO4W,EAAAA,EAAAA,IAAWT,EAAAA,GAAAA,KAAenW,GAAOwZ,cAAe,GAC3D,CAGA,SAASC,GAAavX,GAClB,OAAOL,EAAOO,QAAOkH,EAAAA,EAAAA,IAAO,CAAEpH,GAAMsU,EAAAA,EAAAA,IAAa/K,GAAOA,GAAOvJ,IAAQ,EAAG,KAC9E,CAOA,IAAMwX,GAAW,CACb,IAAI9J,OAAO,mBAAqB,KAChC,IAAIA,OAAO,gBAAiB,KAC5B,IAAIA,OAAO,kBAAoB,KAC/B,IAAIA,OAAO,mCAAoC,MAGnD,SAAS+J,GAAahX,GAClB,IACI,OAAOuL,EAAAA,EAAAA,IAAa0L,GAAYjX,G,CAClC,MAAM9F,GAAQ,CAChB,OAAO,IACX,CAEA,SAAS+c,GAAYjX,GACjB,GAAe,OAAXA,EAAmB,OAAO,KAE9B,IAAMqC,EAASmR,EAAAA,GAAAA,MAAeK,EAAAA,EAAAA,IAAa7T,EAAQ,EAAG,KAAKyT,WACrDzY,EAASwY,EAAAA,GAAAA,MAAeK,EAAAA,EAAAA,IAAa7T,EAAQqC,EAAQA,EAAS,KAAKoR,WACzE,OAAOI,EAAAA,EAAAA,IAAa7T,EAAQqC,EAAS,GAAIA,EAAS,GAAKrH,EAC3D,CAGO,IAAMkc,GAAQ,WASjB,SAAAA,EAAYzc,EAAwByV,EAAiBvV,EAAcwc,IAAwB1Z,EAAAA,EAAAA,GAAA,KAAAyZ,IACvFxZ,EAAAA,EAAAA,IAAeC,KAAM,WAAYlD,IACjCiD,EAAAA,EAAAA,IAAeC,KAAM,OAAQhD,IAC7B+C,EAAAA,EAAAA,IAAeC,KAAM,UAAWlD,EAAS2c,UAAUlH,QAAQA,KAC3DxS,EAAAA,EAAAA,IAAeC,KAAM,mBAAoBwZ,EAC7C,CAoQC,OApQApZ,EAAAA,EAAAA,GAAAmZ,EAAA,EAAAlZ,IAAA,cAAAX,MAEK,SAAYga,EAAkBC,G,sIAQT,OANjBC,EAAK,CACPnG,GAAIzT,KAAKuS,QACT3Q,MAAMiY,EAAAA,EAAAA,IAAU,CAAEH,EAAU1O,GAAShL,KAAKhD,MAAQ2c,GAAc,QACnEtN,EAAAsE,KAAA,EAAAtE,EAAA4E,GAGUqI,GAAWjN,EAAApH,KAAA,EAAOjF,KAAKlD,SAAS2F,KAAKmX,GAAG,cAAAvN,EAAA8E,GAAA9E,EAAAG,KAAAH,EAAAO,OAAA,YAAAP,EAAA4E,IAAA5E,EAAA8E,KAAA,UAAA9E,EAAAsE,KAAA,EAAAtE,EAAAyN,GAAAzN,EAAA,SAE3CA,EAAAyN,GAAMlK,OAAS/T,EAAAA,GAAAA,OAAAA,eAA4B,CAAAwQ,EAAApH,KAAA,gBAAAoH,EAAAO,OAAA,SAAW,MAAI,eAAAP,EAAAO,OAAA,SACvD,MAAI,yBAAAP,EAAAY,OAAA,GAAAC,EAAA,iB,GAElB,CAAA7M,IAAA,cAAAX,MAED,SAAYqa,EAAkBC,GAC1B,IAAMC,EAAWtB,GAAU5W,OAAOgY,IAQlC,GANgB,MAAZE,GACAre,GAAOqT,WAAW,0BAADjG,OAA4B+Q,GAAale,EAAAA,GAAAA,OAAAA,sBAAqC,CAC3Fqe,UAAW,cAAFlR,OAAiB+Q,EAAS,OAItB,QAAjBE,EAASjB,IACT,OAAOhZ,KAAKlD,SAAS2c,UAAUlH,QAAQyH,GAG3C,IAAM/Y,GAAQV,EAAAA,EAAAA,IAASyZ,GAGvB,GAAsB,MAAlBC,EAASpB,MAAe,CACxB,IAAMA,EAAQmB,EAASxK,MAAM,6CAC7B,GAAIqJ,EAAO,CACP,IAAMxb,EAASwS,SAASgJ,EAAM,GAAI,IAClC,GAAIA,EAAM,GAAGxb,SAAoB,EAATA,GAAcA,GAAU,GAAKA,GAAU,GAC3D,OAAO8b,IAAanQ,EAAAA,EAAAA,IAAO,CAAE,CAAEiR,EAASpB,OAAU,KAAOA,EAAM,K,EAM3E,GAAqB,MAAjBoB,EAASnB,KAAc,CACvB,IAAMA,EAAOkB,EAASxK,MAAM,yCAC5B,GAAIsJ,EAAM,CACN,IAAMzb,EAASwS,SAASiJ,EAAK,GAAI,IACjC,GAAIA,EAAK,GAAGzb,SAAoB,EAATA,GAAcA,GAAU,GAAKA,GAAU,GAC1D,OAAO8b,IAAanQ,EAAAA,EAAAA,IAAO,CAAE,CAAEiR,EAASnB,MAAS,KAAOA,EAAK,K,EAMzE,GAAuB,MAAnBmB,EAASlB,OAAgB,CACzB,IAAM1b,EAAS4D,EAAM,GAGjBO,EAAUP,EAAM,GASpB,GARgB,IAAZO,EACe,KAAXnE,GAA4B,KAAXA,IACjBmE,GAAW,GAGfA,GAAW,EAGXA,GAAW,GAAKP,EAAM5D,SAAW,EAAIA,GAAUA,GAAU,GAAKA,GAAU,GAAI,CAC5E,IAAM8c,EAAQC,KAAAA,QAAenZ,EAAMgF,MAAM,IAEzC,OADAkU,EAAME,QAAQ7Y,GACP4Y,KAAAA,OAAcH,EAASlB,OAAQoB,E,EAI9C,OAAO,IACX,GAAC,CAAA9Z,IAAA,aAAAX,MAGK,SAAWqa,G,4IAGb,GAFgB,MAAZA,IAAoBA,EAAW,IAGlB,KAAbA,EAAe,CAAAO,EAAArV,KAAA,SAOM,OAPNqV,EAAA3J,KAAA,EAGLkC,EAAc,CAChBY,GAAIzT,KAAKuS,QACT3Q,KAAO,aAAeoJ,GAAShL,KAAKhD,MAAM+R,UAAU,IACvDuL,EAAArV,KAAA,EACsBjF,KAAKlD,SAAS2F,KAAKoQ,GAAY,OAAxC,GAGG,QAHXmH,EAAQM,EAAA9N,OCnXN,uEDsXiBwN,EAAqB,CAAAM,EAAArV,KAAA,eAAAqV,EAAA1N,OAAA,SAAW,MAAI,cAAA0N,EAAA1N,OAAA,SAEtD5M,KAAKlD,SAAS2c,UAAUc,YAAYP,IAAS,WAAAM,EAAA3J,KAAA,GAAA2J,EAAArJ,GAAAqJ,EAAA,SAEhDA,EAAArJ,GAAMrB,OAAS/T,EAAAA,GAAAA,OAAAA,eAA4B,CAAAye,EAAArV,KAAA,gBAAAqV,EAAA1N,OAAA,SAAW,MAAI,cAAA0N,EAAArJ,GAAA,QAMrD,OANqDqJ,EAAArV,KAAA,GAM/CjF,KAAKwa,YAAY,aAAcvB,GAAWc,IAAU,QAA7D,GAGE,OAHVC,EAAQM,EAAA9N,OAGuB,OAAbwN,EAAiB,CAAAM,EAAArV,KAAA,gBAAAqV,EAAA1N,OAAA,SAAW,MAAI,QAWvD,OANc,OAFT2F,EAAUvS,KAAKya,YAAYV,EAAUC,KAGvCpe,GAAOqT,WAAW,mCAAoCpT,EAAAA,GAAAA,OAAAA,sBAAqC,CACvFqe,UAAW,cAAFlR,OAAiB+Q,EAAS,KACnCA,SAAUA,EACVnY,KAAMoY,IAEbM,EAAA1N,OAAA,SAEM2F,GAAO,yBAAA+H,EAAArN,OAAA,GAAAyN,EAAA,kB,GACjB,CAAAra,IAAA,YAAAX,MAEK,W,gKAGiB,OAFbib,EAAoD,GAAGC,EAAAjK,KAAA,EAAAiK,EAAA3V,KAAA,EAEpCjF,KAAK6a,QAAQ,UAAS,OAA/B,GACE,OADRC,EAAMF,EAAApO,MACM,CAAAoO,EAAA3V,KAAA,eAAA2V,EAAAhO,OAAA,SAAW,MAAI,OAExB1M,EAAI,EAAC,YAAEA,EAAIkZ,GAAS/b,QAAM,CAAAud,EAAA3V,KAAA,SACQ,GAE1B,OAFPuK,EAAQsL,EAAOtL,MAAM4J,GAASlZ,KAEnB,CAAA0a,EAAA3V,KAAA,gBAAA2V,EAAAhO,OAAA,uBAAAgO,EAAA3J,GACTzB,EAAM,GAAEoL,EAAA3V,KACP,UADO2V,EAAA3J,GACA,GAIP,SAJO2J,EAAA3J,GAID,GAIN,SAJM2J,EAAA3J,GAIA,GAIN,WAJM2J,EAAA3J,IAKN,YADQ2J,EAAA3J,GAAA,GACC,iBAZqC,OAA/C0J,EAAQre,KAAK,CAAEmR,KAAM,MAAOsN,QAASD,IAAUF,EAAAhO,OAAA,SACxC,CAAE+N,QAAAA,EAASjd,IAAKod,IAAQ,QAGiB,OAAhDH,EAAQre,KAAK,CAAEmR,KAAM,OAAQsN,QAASD,IAAUF,EAAAhO,OAAA,SACzC,CAAE+N,QAAAA,EAASjd,IAAKod,IAAQ,QAGiB,OAAhDH,EAAQre,KAAK,CAAEmR,KAAM,OAAQsN,QAASD,IAAUF,EAAAhO,OAAA,SACzC,CAAE+N,QAAAA,EAASjd,IAAK,gCAAFsL,OAAoC8R,EAAO/L,UAAU,MAAO,QAS7C,GAJ9B2K,EAAyB,WAAblK,EAAM,GAAmB,aAAc,aACzDmL,EAAQre,KAAK,CAAEmR,KAAM+B,EAAM,GAAIuL,QAASD,IAExCF,EAAAzJ,GACenR,KAAKgb,iBAAgBJ,EAAAzJ,GAAA,CAAAyJ,EAAA3V,KAAA,SAAI,OAAJ2V,EAAA3V,KAAA,GAAUjF,KAAKiW,aAAY,QAAA2E,EAAAzJ,GAAAyJ,EAAApO,KAAA,QAEtB,GAFnCyO,EAAKL,EAAAzJ,GAGU,KADfrG,GAAS0E,EAAM,IAAM,IAAI/G,MAAM,MAC3BpL,OAAY,CAAAud,EAAA3V,KAAA,gBAAA2V,EAAAhO,OAAA,SAAW,MAAI,QAExB,OAFwBgO,EAAA3V,KAAA,GAElBjF,KAAKlD,SAAS2c,UAAUlH,QAAQzH,EAAM,IAAG,QAG5D,GAHMoQ,EAAIN,EAAApO,KACJ2O,GAAU7E,EAAAA,EAAAA,IAAWT,EAAAA,GAAAA,KAAe/K,EAAM,IAAIoO,cAAe,IAGlD,WAAb1J,EAAM,GAAe,CAAAoL,EAAA3V,KAAA,SAEkC,OAFlC2V,EAAAd,GAEF9Z,KAAKlD,SAAS2c,UAASmB,EAAA3V,KAAA,GAAmBjF,KAAKlD,SAAS2F,KAAK,CAC5EgR,GAAIyH,EAAMtZ,MAAMiY,EAAAA,EAAAA,IAAU,CAAE,aAAcsB,MAC5C,QAFoD,GAEpDP,EAAAQ,GAAAR,EAAApO,KAFI6O,EAAUT,EAAAd,GAA2BS,YAAW9X,KAAAmY,EAAAd,GAAAc,EAAAQ,IAGlDH,IAAUI,EAAU,CAAAT,EAAA3V,KAAA,gBAAA2V,EAAAhO,OAAA,SAAW,MAAI,QACvC+N,EAAQre,KAAK,CAAEmR,KAAM,QAASsN,QAASM,IAAcT,EAAA3V,KAAA,oBAEjC,YAAbuK,EAAM,GAAgB,CAAAoL,EAAA3V,KAAA,SAEE,OAFF2V,EAAAU,GAEbzF,EAAAA,GAAS+E,EAAA3V,KAAA,GAAYjF,KAAKlD,SAAS2F,KAAK,CACpDgR,GAAIyH,EAAMtZ,MAAMiY,EAAAA,EAAAA,IAAU,CAAE,cAAcvD,EAAAA,EAAAA,IAAW2E,EAAO,IAAKE,MACnE,QAF4B,GAE5BP,EAAAW,GAAAX,EAAApO,OAFIgP,EAAOZ,EAAAU,GAAalI,KAAI3Q,KAAAmY,EAAAU,GAAAV,EAAAW,KAGlB3E,SAAU,CAAFgE,EAAA3V,KAAA,gBAAA2V,EAAAhO,OAAA,SAAW,MAAI,QACnC+N,EAAQre,KAAK,CAAEmR,KAAM,UAAWsN,QAASS,EAAQ1R,aAAc,QAQpC,OAJzB8P,EAAK,CACPnG,GAAIzT,KAAKlD,SAAS2c,UAAUlH,QAAQzH,EAAM,IAC1ClJ,MAAMiY,EAAAA,EAAAA,IAAU,CAAEH,EAAUyB,KAC/BP,EAAAa,GACiBpC,GAAYuB,EAAA3V,KAAA,GAAOjF,KAAKlD,SAAS2F,KAAKmX,GAAG,QAA5C,GAA4CgB,EAAAc,GAAAd,EAAApO,KACxC,OADfmP,GAAc,EAAHf,EAAAa,IAAAb,EAAAc,KACQ,CAAAd,EAAA3V,KAAA,gBAAA2V,EAAAhO,OAAA,SAAW,MAAI,QASrB,OARjB+N,EAAQre,KAAK,CAAEmR,KAAM,eAAgBsN,QAASY,IAG7B,YAAbnM,EAAM,KACNmM,EAAcA,EAAYjM,QAAQ,OAAQyL,EAAQpM,UAAU,KAGhE6L,EAAA3V,KAAA,GACuB4I,GAAU8N,GAAY,QAA/B,IAARC,EAAQhB,EAAApO,OAG8B,kBAApBoP,EAASC,OAAwBD,EAASC,MAAMrM,MAAM,gBAAe,CAAAoL,EAAA3V,KAAA,gBAAA2V,EAAAhO,OAAA,SAClF,MAAI,QAGwC,OADvD+N,EAAQre,KAAK,CAAEmR,KAAM,WAAYsN,QAASxJ,KAAKuK,UAAUF,KACzDjB,EAAQre,KAAK,CAAEmR,KAAM,MAAOsN,QAASa,EAASC,QAASjB,EAAAhO,OAAA,SAEhD,CAAE+N,QAAAA,EAASjd,IAAKke,EAASC,QAAO,QA1Ed3b,IAAG0a,EAAA3V,KAAA,gBAAA2V,EAAA3V,KAAA,iBAAA2V,EAAAjK,KAAA,GAAAiK,EAAAmB,GAAAnB,EAAA,wBAAAA,EAAAhO,OAAA,SAgFrC,MAAI,yBAAAgO,EAAA3N,OAAA,GAAA+O,EAAA,kB,GACd,CAAA3b,IAAA,iBAAAX,MAEK,W,4IAGe,O,SAAMM,KAAKwa,YAAY,cAAa,OAAvC,GAGE,OAHVR,EAAQiC,EAAAzP,OAGuB,OAAbwN,EAAiB,CAAAiC,EAAAhX,KAAA,eAAAgX,EAAArP,OAAA,SAAW,MAAI,OAGoC,KAAtFsP,EAAOlC,EAASxK,MAAM,kEAClB,CAAFyM,EAAAhX,KAAA,SACgC,GAA9B5H,EAASwS,SAASqM,EAAK,GAAI,IAC7BA,EAAK,GAAG7e,SAAoB,EAATA,EAAU,CAAA4e,EAAAhX,KAAA,gBAAAgX,EAAArP,OAAA,SACtB,UAAarL,EAAOO,OAAO,KAAOoa,EAAK,KAAG,QAKI,KAAvDC,EAAQnC,EAASxK,MAAM,kCAClB,CAAFyM,EAAAhX,KAAA,YACoB,KAArBkX,EAAM,GAAG9e,OAAmB,CAAA4e,EAAAhX,KAAA,gBAAAgX,EAAArP,OAAA,SACrB,SAAYuP,EAAM,IAAE,eAAAF,EAAArP,OAAA,SAI5BhR,GAAOqT,WAAW,2CAA4CpT,EAAAA,GAAAA,OAAAA,sBAAqC,CACtGqe,UAAW,mBACXtY,KAAMoY,KACR,yBAAAiC,EAAAhP,OAAA,GAAAmP,EAAA,S,GACL,CAAA/b,IAAA,UAAAX,MAEK,SAAQW,G,wIAcO,OAXbgc,GAAWxR,EAAAA,EAAAA,IAAYxK,IAI3Bgc,GAAWrT,EAAAA,EAAAA,IAAO,CAAEiQ,GAAW,IAAKA,GAAWoD,EAAShf,QAASgf,KAGnDhf,OAAS,KAAQ,IAC3Bgf,GAAWrT,EAAAA,EAAAA,IAAO,CAAEqT,GAAU/F,EAAAA,EAAAA,IAAW,KAAM,GAAMjW,EAAIhD,OAAS,OACrEif,EAAArX,KAAA,EAEsBjF,KAAKwa,YAAY,cAActP,EAAAA,EAAAA,IAAQmR,IAAU,OAA1D,GACE,OADVrC,EAAQsC,EAAA9P,OACuB,OAAbwN,EAAiB,CAAAsC,EAAArX,KAAA,eAAAqX,EAAA1P,OAAA,SAAW,MAAI,cAAA0P,EAAA1P,OAAA,UAEjDgB,EAAAA,EAAAA,IAAaoM,IAAS,wBAAAsC,EAAArP,OAAA,GAAAsP,EAAA,S,KAChChD,CAAA,CAlRgB,GAqRjBiD,GAA8B,KAE9BC,GAAa,EAEJC,GAAa,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GA8CtB,SAAAA,EAAY3gB,GAAsC,IAAAuW,EAkB9C,IAlB8CxS,EAAAA,EAAAA,GAAA,KAAA4c,GAC9C9gB,GAAOsW,SAAS,gBAADwK,EAAA,KAAAvK,iBAAA,EAAa4K,EAAAA,KAE5BzK,EAAAuK,EAAApa,KAAA,OAGKua,QAAU,GAEf1K,EAAK2K,SAAW,CAAErI,OAAQ,GAE1BtC,EAAKmH,WAAY,gBAAAiD,EAAA,KAAAvK,iBAAA,GAAW+K,gBAK5Bnd,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,aAA2B,QAAZvW,GAChCuW,EAAK8K,aAAcrhB,EAAUuW,EAAK+K,iBAElCthB,aAAmBsR,QACnBiF,EAAKgL,gBAAkBvhB,EAGvBA,EAAQwhB,OAAM,SAAChhB,GAAY,IAG3B+V,EAAKkL,SAASD,OAAM,SAAChhB,GAAY,QAE9B,CACH,IAAMkhB,GAAeC,EAAAA,EAAAA,IAAS,gBAAAhB,EAAA,KAAAvK,iBAAA,EAA+C,aAAxDuL,CAAsE3hB,GACvF0hB,IACA1d,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,WAAYmL,GACjCnL,EAAKqL,KAAK,UAAWF,EAAc,OAGnC7hB,GAAO6D,mBAAmB,kBAAmB,UAAW1D,E,CAUxC,OANxBuW,EAAKsL,yBAA2B,KAEhCtL,EAAKuL,kBAAoB,EAEzBvL,EAAKwL,iBAAmB,IAExBxL,EAAKyL,eAAiB,EAAEzL,CAC5B,CAgEC,OAhEAlS,EAAAA,EAAAA,GAAAsc,EAAA,EAAArc,IAAA,SAAAX,MAEK,W,yIACmB,MAAjBM,KAAKge,SAAgB,CAAAC,EAAAhZ,KAAA,SACM,GAAvBlJ,EAAmB,MACnBiE,KAAKsd,gBAAiB,CAAFW,EAAAhZ,KAAA,SAEN,OAFMgZ,EAAAtN,KAAA,EAAAsN,EAAAhZ,KAAA,EAEAjF,KAAKsd,gBAAe,OAApCvhB,EAAOkiB,EAAAzR,KAAAyR,EAAAhZ,KAAG,GAAH,aAAAgZ,EAAAtN,KAAG,EAAHsN,EAAAhN,GAAAgN,EAAA,oBAKA,MAAXliB,EAAe,CAAAkiB,EAAAhZ,KAAA,SACL,OADKgZ,EAAAhZ,KAAA,GACCjF,KAAKqd,gBAAe,QAApCthB,EAAOkiB,EAAAzR,KAAA,QAKNzQ,GACDH,GAAOqT,WAAW,sBAAuBpT,EAAAA,GAAAA,OAAAA,cAA6B,CAAC,GAItD,MAAjBmE,KAAKge,WACDhe,KAAKod,WACLpd,KAAKge,SAAWjiB,GAEhBgE,EAAAA,EAAAA,IAAeC,KAAM,WAAYjE,GAErCiE,KAAK2d,KAAK,UAAW5hB,EAAS,OACjC,eAAAkiB,EAAArR,OAAA,SAGE5M,KAAKge,UAAQ,yBAAAC,EAAAhR,OAAA,GAAAiR,EAAA,iB,GAKxB,CAAA7d,IAAA,QAAAsM,IACA,WAAS,IAAAqK,EAAA,KACL,OAAOvF,IAAK,WACR,OAAOuF,EAAKwG,SAAS3L,MAAK,SAAC9V,GACvB,OAAOA,CACX,IAAG,SAACQ,GAEA,GAAIA,EAAMqT,OAAS/T,EAAAA,GAAAA,OAAAA,eAA+C,cAAhBU,EAAM4hB,MAGxD,MAAM5hB,CACV,GACJ,GACJ,GAEA,CAAA8D,IAAA,0BAAAX,MAeM,SAAwB0e,G,mJAC1B,O,SAAMpe,KAAKwd,SAAQ,YAGfY,EAAS,GAAC,CAAAC,EAAApZ,KAAA,oBAGHjF,KAAKse,qBAAsB,CAAFD,EAAApZ,KAAA,SAOT,OAJbsZ,EAAsBve,KAAKse,qBAAoBD,EAAA1N,KAAA,EAAA0N,EAAApZ,KAAA,EAI5BsZ,EAAmB,OAA5B,GAANlc,EAAMgc,EAAA7R,OACP6L,KAAYhW,EAAOmc,UAAaJ,GAAM,CAAAC,EAAApZ,KAAA,gBAAAoZ,EAAAzR,OAAA,SAChCvK,EAAO4Q,aAAW,eAAAoL,EAAAzR,OAAA,uBAAAyR,EAAA1N,KAAA,GAAA0N,EAAApN,GAAAoN,EAAA,SAYzBre,KAAKse,uBAAyBC,EAAmB,CAAAF,EAAApZ,KAAA,gBAAAoZ,EAAAzR,OAAA,oBAAAyR,EAAApZ,KAAA,gBAyCzD,OAlCFwZ,EAAUpG,KAEVqG,GAA2BC,EAAAA,EAAAA,IAAkB,CAC/C1L,YAAajT,KAAK4e,QAAQ,iBAAkB,CAAC,GAC7CC,aAAc7e,KAAKT,aAAasS,MAAK,SAAC9V,GAAO,OAAM,IAAI,IAAG,SAACQ,GAAK,OAAMA,CAAK,MAC5EsV,MAAK,SAAAiN,GAAkC,IAA/B7L,EAAW6L,EAAX7L,YAAa4L,EAAYC,EAAZD,aACpB,GAAIA,EAKA,MAHIE,EAAKT,uBAAyBI,IAC9BK,EAAKT,qBAAuB,MAE1BO,EAGV,IAAML,EAAWnG,KAOjB,OALApF,EAAc4C,EAAAA,GAAAA,KAAe5C,GAAa6C,YACxBiJ,EAAKnB,0BAA2B3K,EAAc8L,EAAKnB,yBAErEmB,EAAKnB,wBAA0B3K,EAC/B8L,EAAKC,oBAAoB/L,GAClB,CAAEA,YAAAA,EAAawL,QAAAA,EAASD,SAAAA,EACnC,IAEAxe,KAAKse,qBAAuBI,EAG5BA,EAAyBnB,OAAM,SAAChhB,GAExBwiB,EAAKT,uBAAyBI,IAC9BK,EAAKT,qBAAuB,KAEpC,IAAGD,EAAApZ,KAAA,GAEWyZ,EAAwB,eAAAL,EAAAzR,OAAA,SAAAyR,EAAA7R,KAAEyG,aAAW,yBAAAoL,EAAApR,OAAA,GAAAgS,EAAA,kB,GACtD,CAAA5e,IAAA,OAAAX,MAEK,W,mJAQgB,OAPZwf,EAASzC,KAGT0C,EAAgC,GAElClM,EAAsB,KAAImM,EAAAzO,KAAA,EAAAyO,EAAAna,KAAA,EAENjF,KAAKqf,wBAAwB,IAAMrf,KAAKsf,gBAAkB,GAAE,OAAhFrM,EAAWmM,EAAA5S,KAAA4S,EAAAna,KAAG,GAAH,aAEe,OAFfma,EAAAzO,KAAG,EAAHyO,EAAAnO,GAAAmO,EAAA,SAEXpf,KAAK2d,KAAK,QAAOyB,EAAAnO,IAASmO,EAAAxS,OAAA,kBAQ9B,GALA5M,KAAKgf,oBAAoB/L,GAGzBjT,KAAK2d,KAAK,OAAQuB,EAAQjM,GAGtBA,IAAgBjT,KAAK6d,iBAAgB,CAAAuB,EAAAna,KAAA,SACR,OAA7BjF,KAAK2d,KAAK,UAAWuB,GAAQE,EAAAxS,OAAA,kBASjC,IAJ6B,IAAzB5M,KAAKid,SAASrI,QACd5U,KAAKid,SAASrI,MAAQ3B,EAAc,GAGpCtP,KAAK4b,IAAcvf,KAAKid,SAASrI,MAAU3B,GAAe,IAC1DrX,GAAOwc,KAAK,+DAADpP,OAAiEhJ,KAAKid,SAASrI,MAAM,gBAAA5L,OAAgBiK,EAAY,MAC5HjT,KAAK2d,KAAK,QAAS/hB,GAAO0U,UAAU,8BAA+BzU,EAAAA,GAAAA,OAAAA,cAA6B,CAC5FoX,YAAaA,EACbkL,MAAO,YACPqB,oBAAqBxf,KAAKid,SAASrI,SAEvC5U,KAAK2d,KAAK,QAAS1K,QAInB,IAAS/S,EAAaF,KAAKid,SAASrI,MAAS,EAAG1U,GAAK+S,EAAa/S,IAC9DF,KAAK2d,KAAK,QAASzd,GA2EyB,OAtEvCF,KAAKid,SAASrI,QAAW3B,IAClCjT,KAAKid,SAASrI,MAAQ3B,EAEtB9E,OAAOhH,KAAKnH,KAAKid,UAAU3a,SAAQ,SAACjC,GAEhC,GAAY,UAARA,EAAJ,CAGA,IAAMof,EAAmBC,EAAKzC,SAAS5c,GAKd,YAArBof,GAIAxM,EAAcwM,EAAmB,WAC1BC,EAAKzC,SAAS5c,E,CAE7B,MAI2B,IAA3BL,KAAK6d,mBACL7d,KAAK6d,iBAAmB5K,EAAc,GAI1CjT,KAAKgd,QAAQ1a,SAAQ,SAAC6b,GAClB,OAAQA,EAAM1Q,MACV,IAAK,KACD,IAAMrC,EAAO+S,EAAM/S,KACfuU,EAASD,EAAKE,sBAAsBxU,GAAMyG,MAAK,SAACuC,GAChD,OAAKA,GAAkC,MAAvBA,EAAQnB,aACxByM,EAAKzC,SAAS,KAAO7R,GAAQgJ,EAAQnB,YACrCyM,EAAK/B,KAAKvS,EAAMgJ,GACT,MAH+C,IAI1D,IAAGmJ,OAAM,SAAChhB,GAAmBmjB,EAAK/B,KAAK,QAASphB,EAAQ,IAExD4iB,EAAQ7iB,KAAKqjB,GAEb,MAGJ,IAAK,SACD,IAAMxX,EAASgW,EAAMhW,OACrBA,EAAOmN,UAAYoK,EAAK7B,iBAAmB,EAC3C1V,EAAOoN,QAAUtC,EAEjB,IAAM0M,EAASD,EAAKG,QAAQ1X,GAAQ0J,MAAK,SAAC4C,GAClB,IAAhBA,EAAKpX,QACToX,EAAKnS,SAAQ,SAACqV,GACV+H,EAAKzC,SAAS,KAAOtF,EAAI3E,WAAa2E,EAAI1E,YAC1CyM,EAAKzC,SAAS,KAAOtF,EAAI3D,iBAAmB2D,EAAI1E,YAChDyM,EAAK/B,KAAKxV,EAAQwP,EACtB,GACJ,IAAG4F,OAAM,SAAChhB,GAAmBmjB,EAAK/B,KAAK,QAASphB,EAAQ,IACxD4iB,EAAQ7iB,KAAKqjB,GAKzB,IAEA3f,KAAK6d,iBAAmB5K,EAGxB5F,QAAQsC,IAAIwP,GAAStN,MAAK,WACtB6N,EAAK/B,KAAK,UAAWuB,EACzB,IAAG3B,OAAM,SAAChhB,GAAYmjB,EAAK/B,KAAK,QAASphB,EAAQ,IAAG6iB,EAAAxS,OAAA,mCAAAwS,EAAAnS,OAAA,GAAA6S,EAAA,iB,GAKxD,CAAAzf,IAAA,mBAAAX,MACA,SAAiBuT,GACbjT,KAAK6d,iBAAmB5K,EAAc,EAClCjT,KAAK+f,SAAW/f,KAAKyR,MAC7B,GAAC,CAAApR,IAAA,UAAAsM,IAED,WACI,OAAO3M,KAAKge,QAChB,GAGA,CAAA3d,IAAA,gBAAAX,MACM,W,yJACK9D,GAAOqT,WAAW,8CAA+CpT,EAAAA,GAAAA,OAAAA,sBAAqC,CACzGqe,UAAW,4BACb,wBAAA8F,EAAA/S,OAAA,GAAAgT,EAAA,I,GACL,CAAA5f,IAAA,aAAAX,MAEK,W,0IACc,O,SAAMM,KAAKwd,SAAQ,OAKZ,OALjBzhB,EAAOmkB,EAAA1T,KAAA0T,EAAAjb,KAAG,EAKajF,KAAKqd,gBAAe,OAA7B,GAAd8C,EAAcD,EAAA1T,KAChBzQ,EAAQ8B,UAAYsiB,EAAetiB,QAAO,CAAAqiB,EAAAjb,KAAA,aAItCjF,KAAKod,WAAY,CAAF8C,EAAAjb,KAAA,SAgBf,OAfAjF,KAAKge,SAAWmC,EAGhBngB,KAAK6d,kBAAoB,EACzB7d,KAAKogB,iBAAmB,KACxBpgB,KAAKqgB,wBAA0B,KAC/BrgB,KAAK+d,eAAiB,EACtB/d,KAAKid,SAASrI,OAAS,EACvB5U,KAAK4d,yBAA2B,KAChC5d,KAAKse,qBAAuB,KAK5Bte,KAAK2d,KAAK,UAAWwC,EAAgBpkB,GAASmkB,EAAAjb,KAAA,GACxC6L,GAAM,GAAE,eAAAoP,EAAAtT,OAAA,SAEP5M,KAAKge,UAAQ,QASE,MANpBzhB,EAAQX,GAAO0U,UAAU,6BAA8BzU,EAAAA,GAAAA,OAAAA,cAA6B,CACtFsiB,MAAO,UACPpiB,QAASA,EACTukB,gBAAiBH,IAGrBngB,KAAK2d,KAAK,QAASphB,GACbA,EAAK,eAAA2jB,EAAAtT,OAAA,SAGR7Q,GAAO,yBAAAmkB,EAAAjT,OAAA,GAAAsT,EAAA,S,GACjB,CAAAlgB,IAAA,cAAAsM,IAED,WAAe,IAAA6T,EAAA,KAKX,OAJAxgB,KAAKqf,wBAAwB,IAAMrf,KAAKsf,gBAAkB,GAAGzN,MAAK,SAACoB,GAC/DuN,EAAKxB,oBAAoB/L,EAC7B,IAAG,SAAC1W,GAAY,IAEiB,MAAzByD,KAAKogB,iBAA4BpgB,KAAKogB,kBAAmB,CACrE,GAAC,CAAA/f,IAAA,UAAAsM,IAED,WACI,OAAwB,MAAhB3M,KAAKygB,OACjB,EAACrZ,IAED,SAAY1H,GAAc,IAAAghB,EAAA,KAClBhhB,IAAUM,KAAKygB,SACfzgB,KAAKygB,QAAUE,aAAY,WAAQD,EAAKjP,MAAQ,GAAGzR,KAAKsf,iBAEnDtf,KAAK4gB,iBACN5gB,KAAK4gB,eAAiBrT,YAAW,WAC7BmT,EAAKjP,OAILiP,EAAKE,eAAiBrT,YAAW,WAGxBmT,EAAKD,SAAWC,EAAKjP,OAG1BiP,EAAKE,eAAiB,IAC1B,GAAGF,EAAKpB,gBACZ,GAAG,MAGC5f,GAASM,KAAKygB,UACtBI,cAAc7gB,KAAKygB,SACnBzgB,KAAKygB,QAAU,KAEvB,GAAC,CAAApgB,IAAA,kBAAAsM,IAED,WACI,OAAO3M,KAAK8d,gBAChB,EAAC1W,IAED,SAAoB1H,GAAa,IAAAohB,EAAA,KAC7B,GAAsB,kBAAXphB,GAAuBA,GAAS,GAAKmQ,SAAS9N,OAAOrC,KAAWA,EACvE,MAAM,IAAI2B,MAAM,4BAGpBrB,KAAK8d,iBAAmBpe,EAEpBM,KAAKygB,UACLI,cAAc7gB,KAAKygB,SACnBzgB,KAAKygB,QAAUE,aAAY,WAAQG,EAAKrP,MAAQ,GAAGzR,KAAK8d,kBAEhE,GAAC,CAAAzd,IAAA,sBAAAX,MAED,WAAmB,IAAAqhB,EAAA,KACTC,EAAM3I,KAaZ,OAVK2I,EAAMhhB,KAAK+d,eAAkB,EAAI/d,KAAK8d,mBACvC9d,KAAK+d,eAAiBiD,EACtBhhB,KAAKqgB,wBAA0BrgB,KAAKihB,iBAAiBpP,MAAK,SAACoB,GAIvD,OAH6B,MAAzB8N,EAAKX,kBAA4BnN,EAAc8N,EAAKX,oBACpDW,EAAKX,iBAAmBnN,GAErB8N,EAAKX,gBAChB,KAGGpgB,KAAKqgB,uBAChB,GAAC,CAAAhgB,IAAA,sBAAAX,MAED,SAAoBuT,GAEa,MAAzBjT,KAAKogB,kBAA4BnN,EAAcjT,KAAKogB,mBAGxDpgB,KAAK+d,eAAiB1F,MAGO,MAAzBrY,KAAKogB,kBAA4BnN,EAAcjT,KAAKogB,oBACpDpgB,KAAKogB,iBAAmBnN,EACxBjT,KAAKqgB,wBAA0BhT,QAAQC,QAAQ2F,IAEvD,GAAC,CAAA5S,IAAA,qBAAAX,MAEK,SAAmBsU,EAAyBb,EAAwBxE,G,yJAC/D3O,KAAKkhB,oBAAoBlN,EAAmC,MAAjBb,EAAyB,EAAGA,EAAexE,GAAW,EAAG,OAAK,wBAAAwS,EAAAlU,OAAA,GAAAmU,EAAA,S,GACnH,CAAA/gB,IAAA,sBAAAX,MAEK,SAAoBsU,EAAyBb,EAAuBxE,EAAiB0S,G,6IACvE,O,SAAMrhB,KAAK4f,sBAAsB5L,GAAgB,OAApD,OAAPI,EAAOkN,EAAA9U,MAGE4H,EAAQjB,cAAe,IAAMA,GAAa,CAAAmO,EAAArc,KAAA,eAAAqc,EAAA1U,OAAA,SAAWwH,GAAO,cAAAkN,EAAA1U,OAAA,SAGpE,IAAIS,SAAQ,SAACC,EAAS+C,GACzB,IAAMkR,EAAiC,GAEnC5Y,GAAO,EACL6Y,EAAc,WAChB,QAAI7Y,IACJA,GAAO,EACP4Y,EAAYjf,SAAQ,SAACtG,GAAWA,GAAQ,KACjC,EACX,EAEMylB,EAAe,SAACrN,GACdA,EAAQjB,cAAgBA,GACxBqO,KACJlU,EAAQ8G,EACZ,EAIA,GAHAsN,EAAKC,GAAG3N,EAAiByN,GACzBF,EAAYjlB,MAAK,WAAQolB,EAAKE,eAAe5N,EAAiByN,EAAe,IAEzEJ,EAAa,CACb,IAAIQ,EAAkBR,EAAYS,WAC9BC,EAAuB,KACrBC,EAAiB,SAAjBA,EAAwB/O,GAAmB,OAAIgP,GAAAP,OAAA,UAAAQ,EAAAA,EAAAA,KAAAC,MAAA,SAAAC,IAAA,IAAAC,EAAA,YAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAA5R,KAAA4R,EAAAtd,MAAA,WAC7C0D,EAAM,CAAF4Z,EAAAtd,KAAA,eAAAsd,EAAA3V,OAAA,iBAKR,OALQ2V,EAAAtd,KAAA,EAKF6L,GAAM,KAAK,OAEjB9Q,KAAKwiB,oBAAoBnB,EAAYjO,MAAMvB,MAAK,SAAO6B,GAAK,OAAIuO,GAAAI,OAAA,UAAAH,EAAAA,EAAAA,KAAAC,MAAA,SAAAM,IAAA,IAAAC,EAAA9N,EAAA+N,EAAA/I,EAAAgJ,EAAAC,EAAA,OAAAX,EAAAA,EAAAA,KAAAI,MAAA,SAAAQ,GAAA,cAAAA,EAAAnS,KAAAmS,EAAA7d,MAAA,WACxD0D,EAAM,CAAFma,EAAA7d,KAAA,eAAA6d,EAAAlW,OAAA,sBAEJ8G,GAAS2N,EAAY3N,OAAK,CAAAoP,EAAA7d,KAAA,QAC1B4c,EAAkB5O,EAAY6P,EAAA7d,KAAA,gBAKZ,OALY6d,EAAA7d,KAAA,EAKNjF,KAAK+iB,eAAe/O,GAAgB,OAA7C,KAAL0O,EAAKI,EAAAtW,OACuB,MAArBkW,EAAMzP,YAAmB,CAAA6P,EAAA7d,KAAA,gBAAA6d,EAAAlW,OAAA,kBAOtB,MAAhBmV,IACAA,EAAeF,EAAkB,GACdR,EAAYS,aAC3BC,EAAeV,EAAYS,YAElC,aAEMC,GAAgB9O,GAAW,CAAA6P,EAAA7d,KAAA,aAC1B0D,EAAM,CAAFma,EAAA7d,KAAA,gBAAA6d,EAAAlW,OAAA,kBAEM,OAFNkW,EAAA7d,KAAA,GAEYjF,KAAKgjB,yBAAyBjB,GAAa,QAAzDnN,EAAKkO,EAAAtW,KACFmW,EAAK,EAAC,aAAEA,EAAK/N,EAAMM,aAAa7X,QAAM,CAAAylB,EAAA7d,KAAA,SAG3C,IAFM2U,EAAKhF,EAAMM,aAAayN,IAGvBvX,OAAS4I,EAAe,CAAA8O,EAAA7d,KAAA,gBAAA6d,EAAAlW,OAAA,qBAG3BgN,EAAGxG,OAASiO,EAAYjO,MAAQwG,EAAGlG,QAAU2N,EAAY3N,MAAK,CAAAoP,EAAA7d,KAAA,aAC1D0D,EAAM,CAAFma,EAAA7d,KAAA,gBAAA6d,EAAAlW,OAAA,kBAGQ,OAHRkW,EAAA7d,KAAA,GAGcjF,KAAKijB,mBAAmBrJ,EAAGxO,KAAM+H,GAAc,QAAxD,GAAPiB,EAAO0O,EAAAtW,MAGTgV,IAAe,CAAFsB,EAAA7d,KAAA,gBAAA6d,EAAAlW,OAAA,kBAiBb,OAdAiW,EAAS,WACTjJ,EAAGhY,OAASyf,EAAYzf,MAAQgY,EAAGnG,KAAO4N,EAAY5N,IAAMmG,EAAGla,MAAMwjB,GAAG7B,EAAY3hB,OACpFmjB,EAAS,WACW,OAAZjJ,EAAGhY,MAAiBgY,EAAGxG,OAASwG,EAAGnG,IAAMmG,EAAGla,MAAMkX,WAC1DiM,EAAS,aAIbxS,EAAOzU,GAAO0U,UAAU,2BAA4BzU,EAAAA,GAAAA,OAAAA,qBAAoC,CACpFsnB,UAAuB,aAAXN,GAAoC,cAAXA,EACrCA,OAAAA,EACAO,YAAapjB,KAAKqjB,iBAAiBzJ,GACnCxO,KAAM4I,EACNI,QAAAA,KACA0O,EAAAlW,OAAA,kBA/BqC+V,IAAIG,EAAA7d,KAAA,iBAoCrD8c,IAAee,EAAA7d,KAAA,qBAInB0D,EAAM,CAAFma,EAAA7d,KAAA,gBAAA6d,EAAAlW,OAAA,kBACR5M,KAAK+R,KAAK,QAASiQ,GAAgB,yBAAAc,EAAA7V,OAAA,GAAAwV,EAAA,SAEtC,IAAE,SAAClmB,GACIoM,GACJ0Z,EAAKtQ,KAAK,QAASiQ,EACvB,IAAG,wBAAAO,EAAAtV,OAAA,GAAAmV,EAAA,SACN,EAED,GAAIzZ,EAAQ,OACZ+Y,EAAK3P,KAAK,QAASiQ,GAEnBT,EAAYjlB,MAAK,WACbolB,EAAKE,eAAe,QAASI,EACjC,G,CAGJ,GAAwB,kBAAbrT,GAAyBA,EAAU,EAAG,CAC7C,IAAMwB,EAAQ5C,YAAW,WACjBiU,KACJnR,EAAOzU,GAAO0U,UAAU,mBAAoBzU,EAAAA,GAAAA,OAAAA,QAAuB,CAAE8S,QAASA,IAClF,GAAGA,GACCwB,EAAMmT,OAASnT,EAAMmT,QAEzB/B,EAAYjlB,MAAK,WAAQkU,aAAaL,EAAQ,G,CAEtD,KAAE,wBAAAmR,EAAArU,OAAA,GAAAsW,EAAA,S,GACL,CAAAljB,IAAA,iBAAAX,MAEK,W,yJACKM,KAAKqf,wBAAwB,IAAE,wBAAAmE,EAAAvW,OAAA,GAAAwW,EAAA,S,GACzC,CAAApjB,IAAA,cAAAX,MAEK,W,sIACF,O,SAAMM,KAAKT,aAAY,OAER,OAFQmkB,EAAAze,KAAA,EAEFjF,KAAK4e,QAAQ,cAAe,CAAC,GAAG,OAAzC,OAANvc,EAAMqhB,EAAAlX,KAAAkX,EAAA/S,KAAG,EAAH+S,EAAA9W,OAAA,SAEDiJ,EAAAA,GAAAA,KAAexT,IAAO,cAAAqhB,EAAA/S,KAAA,EAAA+S,EAAAzS,GAAAyS,EAAA,SAAAA,EAAA9W,OAAA,SAEtBhR,GAAOqT,WAAW,0BAA2BpT,EAAAA,GAAAA,OAAAA,aAA4B,CAC5E6P,OAAQ,cACRrJ,OAAAA,EAAQ9F,MAAKmnB,EAAAzS,MACf,yBAAAyS,EAAAzW,OAAA,GAAA0W,EAAA,iB,GAET,CAAAtjB,IAAA,aAAAX,MAEK,SAAWkkB,EAAyClR,G,wIACtD,O,SAAM1S,KAAKT,aAAY,OACR,OADQskB,EAAA5e,KAAA,GACF0Z,EAAAA,EAAAA,IAAkB,CACnCpM,QAASvS,KAAKya,YAAYmJ,GAC1BlR,SAAU1S,KAAK8jB,aAAapR,KAC9B,OAEa,OALTqR,EAAMF,EAAArX,KAAAqX,EAAA5e,KAAG,EAKMjF,KAAK4e,QAAQ,aAAcmF,GAAO,OAA3C,OAAN1hB,EAAMwhB,EAAArX,KAAAqX,EAAAlT,KAAG,EAAHkT,EAAAjX,OAAA,SAEDiJ,EAAAA,GAAAA,KAAexT,IAAO,eAAAwhB,EAAAlT,KAAA,GAAAkT,EAAA5S,GAAA4S,EAAA,SAAAA,EAAAjX,OAAA,SAEtBhR,GAAOqT,WAAW,0BAA2BpT,EAAAA,GAAAA,OAAAA,aAA4B,CAC5E6P,OAAQ,aACRqY,OAAAA,EAAQ1hB,OAAAA,EAAQ9F,MAAKsnB,EAAA5S,MACvB,yBAAA4S,EAAA5W,OAAA,GAAA+W,EAAA,kB,GAET,CAAA3jB,IAAA,sBAAAX,MAEK,SAAoBkkB,EAAyClR,G,wIAC/D,O,SAAM1S,KAAKT,aAAY,OACR,OADQ0kB,EAAAhf,KAAA,GACF0Z,EAAAA,EAAAA,IAAkB,CACnCpM,QAASvS,KAAKya,YAAYmJ,GAC1BlR,SAAU1S,KAAK8jB,aAAapR,KAC9B,OAEa,OALTqR,EAAME,EAAAzX,KAAAyX,EAAAhf,KAAG,EAKMjF,KAAK4e,QAAQ,sBAAuBmF,GAAO,OAApD,OAAN1hB,EAAM4hB,EAAAzX,KAAAyX,EAAAtT,KAAG,EAAHsT,EAAArX,OAAA,SAEDiJ,EAAAA,GAAAA,KAAexT,GAAQyT,YAAU,eAAAmO,EAAAtT,KAAA,GAAAsT,EAAAhT,GAAAgT,EAAA,SAAAA,EAAArX,OAAA,SAEjChR,GAAOqT,WAAW,0BAA2BpT,EAAAA,GAAAA,OAAAA,aAA4B,CAC5E6P,OAAQ,sBACRqY,OAAAA,EAAQ1hB,OAAAA,EAAQ9F,MAAK0nB,EAAAhT,MACvB,yBAAAgT,EAAAhX,OAAA,GAAAiX,EAAA,kB,GAET,CAAA7jB,IAAA,UAAAX,MAEK,SAAQkkB,EAAyClR,G,wIACnD,O,SAAM1S,KAAKT,aAAY,OACR,OADQ4kB,EAAAlf,KAAA,GACF0Z,EAAAA,EAAAA,IAAkB,CACnCpM,QAASvS,KAAKya,YAAYmJ,GAC1BlR,SAAU1S,KAAK8jB,aAAapR,KAC9B,OAEa,OALTqR,EAAMI,EAAA3X,KAAA2X,EAAAlf,KAAG,EAKMjF,KAAK4e,QAAQ,UAAWmF,GAAO,OAAxC,OAAN1hB,EAAM8hB,EAAA3X,KAAA2X,EAAAxT,KAAG,EAAHwT,EAAAvX,OAAA,UAED1B,EAAAA,EAAAA,IAAQ7I,IAAO,eAAA8hB,EAAAxT,KAAA,GAAAwT,EAAAlT,GAAAkT,EAAA,SAAAA,EAAAvX,OAAA,SAEfhR,GAAOqT,WAAW,0BAA2BpT,EAAAA,GAAAA,OAAAA,aAA4B,CAC5E6P,OAAQ,UACRqY,OAAAA,EAAQ1hB,OAAAA,EAAQ9F,MAAK4nB,EAAAlT,MACvB,yBAAAkT,EAAAlX,OAAA,GAAAmX,EAAA,kB,GAET,CAAA/jB,IAAA,eAAAX,MAEK,SAAakkB,EAAyCS,EAAgD3R,G,wIACxG,O,SAAM1S,KAAKT,aAAY,OACR,OADQ+kB,EAAArf,KAAA,GACF0Z,EAAAA,EAAAA,IAAkB,CACnCpM,QAASvS,KAAKya,YAAYmJ,GAC1BlR,SAAU1S,KAAK8jB,aAAapR,GAC5B2R,SAAUhX,QAAQC,QAAQ+W,GAAUxS,MAAK,SAAC0S,GAAC,OAAKnO,EAAAA,EAAAA,IAASmO,EAAE,MAC7D,OACa,OALTR,EAAMO,EAAA9X,KAAA8X,EAAArf,KAAG,EAKMjF,KAAK4e,QAAQ,eAAgBmF,GAAO,OAA7C,OAAN1hB,EAAMiiB,EAAA9X,KAAA8X,EAAA3T,KAAG,EAAH2T,EAAA1X,OAAA,UAED1B,EAAAA,EAAAA,IAAQ7I,IAAO,eAAAiiB,EAAA3T,KAAA,GAAA2T,EAAArT,GAAAqT,EAAA,SAAAA,EAAA1X,OAAA,SAEfhR,GAAOqT,WAAW,0BAA2BpT,EAAAA,GAAAA,OAAAA,aAA4B,CAC5E6P,OAAQ,eACRqY,OAAAA,EAAQ1hB,OAAAA,EAAQ9F,MAAK+nB,EAAArT,MACvB,yBAAAqT,EAAArX,OAAA,GAAAuX,EAAA,kB,GAIV,CAAAnkB,IAAA,mBAAAX,MACA,SAAiBka,EAAiBxO,EAAe0W,GAAmB,IAAA2C,EAAA,KAChE,GAAY,MAARrZ,GAAwC,MAAxBiL,EAAAA,EAAAA,IAAcjL,GAAgB,MAAM,IAAI/J,MAAM,sCAElE,IAAMgB,EAA8BuX,EAwCpC,OArCY,MAARxO,GAAgBwO,EAAGxO,OAASA,GAC5BxP,GAAOqT,WAAW,2DAA4DpT,EAAAA,GAAAA,OAAAA,cAA6B,CAAE6oB,aAAc9K,EAAGxO,KAAMuZ,aAAcvZ,IAGtJ/I,EAAOuiB,KAAO,SAAOC,EAAmBlW,GAAgB,OAAIsT,GAAAwC,OAAA,UAAAvC,EAAAA,EAAAA,KAAAC,MAAA,SAAA2C,IAAA,IAAA1B,EAAAhP,EAAA,OAAA8N,EAAAA,EAAAA,KAAAI,MAAA,SAAAyC,GAAA,cAAAA,EAAApU,KAAAoU,EAAA9f,MAAA,OAiBxC,OAhBA,MAAZ4f,IAAoBA,EAAW,GACpB,MAAXlW,IAAmBA,EAAU,GAG7ByU,OAAchiB,EACD,IAAbyjB,GAAgC,MAAd/C,IAClBsB,EAAc,CACVxhB,KAAMgY,EAAGhY,KACTwR,KAAMwG,EAAGxG,KACTM,MAAOkG,EAAGlG,MACVD,GAAImG,EAAGnG,GACP/T,MAAOka,EAAGla,MACVoiB,WAAAA,IAEPiD,EAAA9f,KAAA,EAEqBjF,KAAKkhB,oBAAoBtH,EAAGxO,KAAMyZ,EAAUlW,EAASyU,GAAY,OAA1E,GACE,OADThP,EAAO2Q,EAAAvY,OACuB,IAAbqY,EAAc,CAAAE,EAAA9f,KAAA,eAAA8f,EAAAnY,OAAA,SAAW,MAAI,OAWnD,OARD5M,KAAKid,SAAS,KAAOrD,EAAGxO,MAAQgJ,EAAQnB,YAEjB,IAAnBmB,EAAQtH,QACRlR,GAAOqT,WAAW,qBAAsBpT,EAAAA,GAAAA,OAAAA,eAA8B,CAClEmY,gBAAiB4F,EAAGxO,KACpByH,YAAa+G,EACbxF,QAASA,IAEhB2Q,EAAAnY,OAAA,SACMwH,GAAO,yBAAA2Q,EAAA9X,OAAA,GAAA6X,EAAA,SACjB,EAEMziB,CACX,GAAC,CAAAhC,IAAA,kBAAAX,MAEK,SAAgBslB,G,4IAClB,O,SAAMhlB,KAAKT,aAAY,OACT,OADS0lB,EAAAhgB,KAAA,EACHoI,QAAQC,QAAQ0X,GAAmBnT,MAAK,SAAAqT,GAAC,OAAIha,EAAAA,EAAAA,IAAQga,EAAE,IAAC,OAGxD,OAHdC,EAAKF,EAAAzY,KAEa,OADlBoN,EAAK5Z,KAAKyZ,UAAU5G,YAAYmS,IAC/B7R,gBAAyByG,EAAGzG,cAAgB,GAAI8R,EAAAhgB,KAAA,EAC7BjF,KAAKqf,wBAAwB,IAAM,EAAIrf,KAAKsf,iBAAgB,OAErE,OAFXrM,EAAWgS,EAAAzY,KAAAyY,EAAAtU,KAAG,GAAHsU,EAAAhgB,KAAG,GAEGjF,KAAK4e,QAAQ,kBAAmB,CAAEoG,kBAAmBG,IAAQ,QAAtE,OAAJ/Z,EAAI6Z,EAAAzY,KAAAyY,EAAArY,OAAA,SACH5M,KAAKqjB,iBAAiBzJ,EAAIxO,EAAM6H,IAAY,QAGZ,MAHYgS,EAAAtU,KAAA,GAAAsU,EAAAhU,GAAAgU,EAAA,UAE7CA,EAAAhU,GAAO4B,YAAc+G,EACrBqL,EAAAhU,GAAO+C,gBAAkB4F,EAAGxO,KAAK6Z,EAAAhU,GAAA,yBAAAgU,EAAAhY,OAAA,GAAAmY,EAAA,mB,GAG9C,CAAA/kB,IAAA,yBAAAX,MAEK,SAAuBmT,G,+IACL,O,SAAMA,EAAW,OA4BI,OA5BnCwS,EAAMC,EAAA9Y,KAENoN,EAAU,CAAC,EAEjB,CAAC,OAAQ,MAAMtX,SAAQ,SAACjC,GACD,MAAfglB,EAAOhlB,KACXuZ,EAAGvZ,GAAOgN,QAAQC,QAAQ+X,EAAOhlB,IAAMwR,MAAK,SAAC/O,GAAC,OAAMA,EAAIyiB,EAAK9K,YAAY3X,GAAI,IAAI,IACrF,IAEA,CAAC,WAAY,WAAY,eAAgB,uBAAwB,SAASR,SAAQ,SAACjC,GAC5D,MAAfglB,EAAOhlB,KACXuZ,EAAGvZ,GAAOgN,QAAQC,QAAQ+X,EAAOhlB,IAAMwR,MAAK,SAAC/O,GAAC,OAAMA,EAAI+S,EAAAA,GAAAA,KAAe/S,GAAI,IAAI,IACnF,IAEA,CAAC,QAAQR,SAAQ,SAACjC,GACK,MAAfglB,EAAOhlB,KACXuZ,EAAGvZ,GAAOgN,QAAQC,QAAQ+X,EAAOhlB,IAAMwR,MAAK,SAAC/O,GAAC,OAAY,MAALA,EAAaA,EAAG,IAAI,IAC7E,IAEIuiB,EAAOvS,aACP8G,EAAG9G,WAAa9S,KAAKyZ,UAAU3G,WAAWuS,EAAOvS,aAGrD,CAAC,QAAQxQ,SAAQ,SAACjC,GACK,MAAfglB,EAAOhlB,KACXuZ,EAAGvZ,GAAOgN,QAAQC,QAAQ+X,EAAOhlB,IAAMwR,MAAK,SAAC/O,GAAC,OAAMA,GAAIoI,EAAAA,EAAAA,IAAQpI,GAAI,IAAI,IAC5E,IAAGwiB,EAAArU,GAEIjR,KAAKyZ,UAAS6L,EAAArgB,KAAA,IAA0B0Z,EAAAA,EAAAA,IAAkB/E,GAAG,eAAA0L,EAAAnU,GAAAmU,EAAA9Y,KAAA8Y,EAAA1Y,OAAA,SAAA0Y,EAAArU,GAA9C6C,mBAAkBrR,KAAA6iB,EAAArU,GAAAqU,EAAAnU,KAAA,yBAAAmU,EAAArY,OAAA,GAAAuY,EAAA,S,GAC3C,CAAAnlB,IAAA,aAAAX,MAEK,SAAWyI,G,6IACJ,O,SAAMA,EAAM,OAkBQ,OAlB7BA,EAAMsd,EAAAjZ,KAEAnK,EAAc,CAAC,EAEC,MAAlB8F,EAAOoK,UACPlQ,EAAOkQ,QAAUvS,KAAKya,YAAYtS,EAAOoK,UAG7C,CAAC,YAAa,UAAUjQ,SAAQ,SAACjC,GACH,MAAhB8H,EAAQ9H,KAClBgC,EAAOhC,GAAa8H,EAAQ9H,GAChC,IAEA,CAAC,YAAa,WAAWiC,SAAQ,SAACjC,GACJ,MAAhB8H,EAAQ9H,KAClBgC,EAAOhC,GAAOqlB,EAAK5B,aAAmB3b,EAAQ9H,IAClD,IAAGolB,EAAAxU,GAEIjR,KAAKyZ,UAASgM,EAAAxgB,KAAA,IAAc0Z,EAAAA,EAAAA,IAAkBtc,GAAO,eAAAojB,EAAAtU,GAAAsU,EAAAjZ,KAAAiZ,EAAA7Y,OAAA,SAAA6Y,EAAAxU,GAAtC9I,OAAM1F,KAAAgjB,EAAAxU,GAAAwU,EAAAtU,KAAA,yBAAAsU,EAAAxY,OAAA,GAAA0Y,EAAA,S,GAC/B,CAAAtlB,IAAA,OAAAX,MAEK,SAAKmT,EAA6CH,G,wIACpD,O,SAAM1S,KAAKT,aAAY,OACR,OADQqmB,EAAA3gB,KAAA,GACF0Z,EAAAA,EAAAA,IAAkB,CACnC9L,YAAa7S,KAAK6lB,uBAAuBhT,GACzCH,SAAU1S,KAAK8jB,aAAapR,KAC9B,OAEa,OALTqR,EAAM6B,EAAApZ,KAAAoZ,EAAA3gB,KAAG,EAKMjF,KAAK4e,QAAQ,OAAQmF,GAAO,OAArC,OAAN1hB,EAAMujB,EAAApZ,KAAAoZ,EAAAjV,KAAG,EAAHiV,EAAAhZ,OAAA,UAED1B,EAAAA,EAAAA,IAAQ7I,IAAO,eAAAujB,EAAAjV,KAAA,GAAAiV,EAAA3U,GAAA2U,EAAA,SAAAA,EAAAhZ,OAAA,SAEfhR,GAAOqT,WAAW,0BAA2BpT,EAAAA,GAAAA,OAAAA,aAA4B,CAC5E6P,OAAQ,OACRqY,OAAAA,EAAQ1hB,OAAAA,EAAQ9F,MAAKqpB,EAAA3U,MACvB,yBAAA2U,EAAA3Y,OAAA,GAAA6Y,EAAA,kB,GAET,CAAAzlB,IAAA,cAAAX,MAEK,SAAYmT,G,wIACd,O,SAAM7S,KAAKT,aAAY,OACR,OADQwmB,EAAA9gB,KAAA,GACF0Z,EAAAA,EAAAA,IAAkB,CACnC9L,YAAa7S,KAAK6lB,uBAAuBhT,KAC3C,OAEa,OAJTkR,EAAMgC,EAAAvZ,KAAAuZ,EAAA9gB,KAAG,EAIMjF,KAAK4e,QAAQ,cAAemF,GAAO,OAA5C,OAAN1hB,EAAM0jB,EAAAvZ,KAAAuZ,EAAApV,KAAG,EAAHoV,EAAAnZ,OAAA,SAEDiJ,EAAAA,GAAAA,KAAexT,IAAO,eAAA0jB,EAAApV,KAAA,GAAAoV,EAAA9U,GAAA8U,EAAA,SAAAA,EAAAnZ,OAAA,SAEtBhR,GAAOqT,WAAW,0BAA2BpT,EAAAA,GAAAA,OAAAA,aAA4B,CAC5E6P,OAAQ,cACRqY,OAAAA,EAAQ1hB,OAAAA,EAAQ9F,MAAKwpB,EAAA9U,MACvB,yBAAA8U,EAAA9Y,OAAA,GAAA+Y,EAAA,kB,GAET,CAAA3lB,IAAA,cAAAX,MAEK,SAAYkkB,G,sIACE,O,SAAMA,EAAa,OAKnB,MAJc,kBAD9BA,EAAaqC,EAAAzZ,OAET5Q,GAAO6D,mBAAmB,8BAA+B,OAAQmkB,GACpEqC,EAAAhhB,KAAA,EAEqBjF,KAAKkmB,YAAYtC,GAAc,OAKpD,OAJc,OADTrR,EAAO0T,EAAAzZ,OAET5Q,GAAOqT,WAAW,0BAA2BpT,EAAAA,GAAAA,OAAAA,sBAAqC,CAC9Eqe,UAAW,eAAFlR,OAAkBuI,KAAKuK,UAAU8H,GAAe,OAEhEqC,EAAArZ,OAAA,SACM2F,GAAO,wBAAA0T,EAAAhZ,OAAA,GAAAkZ,EAAA,S,GACjB,CAAA9lB,IAAA,YAAAX,MAEK,SAAU0mB,EAAqEC,G,+IACjF,O,SAAMrmB,KAAKT,aAAY,OAED,OAFC+mB,EAAArhB,KAAA,EAEKmhB,EAAmB,OAO9C,GAPDA,EAAmBE,EAAA9Z,KAGfyG,GAAe,IAEb8Q,EAAiC,CACnCsC,sBAAuBA,KAGvBrQ,EAAAA,EAAAA,IAAYoQ,EAAqB,IAAK,CAAFE,EAAArhB,KAAA,SACpC8e,EAAO/Q,UAAYoT,EAAoBE,EAAArhB,KAAA,iBAGjB,OAHiBqhB,EAAA3V,KAAA,GAAA2V,EAAArhB,KAAA,GAGXjF,KAAK8jB,aAAasC,GAAoB,QAA9DrC,EAAOrR,SAAQ4T,EAAA9Z,MACXwJ,EAAAA,EAAAA,IAAY+N,EAAOrR,YACnBO,EAAcpD,SAASkU,EAAOrR,SAAS3D,UAAU,GAAI,KACxDuX,EAAArhB,KAAA,iBAAAqhB,EAAA3V,KAAA,GAAA2V,EAAArV,GAAAqV,EAAA,UAED1qB,GAAO6D,mBAAmB,kCAAmC,sBAAuB2mB,GAAqB,eAAAE,EAAA1Z,OAAA,SAI1G6E,IAAK,kBAAWwQ,GAAAsE,OAAA,UAAArE,EAAAA,EAAAA,KAAAC,MAAA,SAAAqE,IAAA,IAAA5R,EAAA6R,EAAAvmB,EAAA0Z,EAAAzG,EAAAuT,EAAAC,EAAA,YAAAzE,EAAAA,EAAAA,KAAAI,MAAA,SAAAsE,GAAA,cAAAA,EAAAjW,KAAAiW,EAAA3hB,MAAA,OACL,OADK2hB,EAAA3hB,KAAA,EACCjF,KAAK4e,QAAQ,WAAYmF,GAAO,OAAzC,GAGE,OAHPnP,EAAKgS,EAAApa,MAGM,CAAAoa,EAAA3hB,KAAA,YAKW,MAApB8e,EAAO/Q,UAAiB,CAAA4T,EAAA3hB,KAAA,WACsB,MAA1CjF,KAAKid,SAAS,KAAO8G,EAAO/Q,WAAkB,CAAA4T,EAAA3hB,KAAA,eAAA2hB,EAAAha,OAAA,SAAW,MAAI,UAI9C,MAAnBmX,EAAOrR,SAAgB,CAAAkU,EAAA3hB,KAAA,cACnBgO,EAAcjT,KAAKid,SAASrI,OAAK,CAAAgS,EAAA3hB,KAAA,gBAAA2hB,EAAAha,OAAA,SAAW,MAAI,eAAAga,EAAAha,OAAA,cAIjDxL,GAAS,YAIhBilB,EAAqB,CAAFO,EAAA3hB,KAAA,SACfgO,EAAsB,KACjB/S,EAAI,EAAC,aAAEA,EAAI0U,EAAMM,aAAa7X,QAAM,CAAAupB,EAAA3hB,KAAA,SACT,GACV,OADhB2U,EAAKhF,EAAMM,aAAahV,IACvB+S,YAAmB,CAAA2T,EAAA3hB,KAAA,SACtB2U,EAAGzG,cAAgB,EAAEyT,EAAA3hB,KAAA,oBAEM,MAApB2U,EAAGzG,cAAqB,CAAAyT,EAAA3hB,KAAA,YACZ,MAAfgO,EAAmB,CAAA2T,EAAA3hB,KAAA,SACL,OADK2hB,EAAA3hB,KAAA,GACCjF,KAAKqf,wBAAwB,IAAM,EAAIrf,KAAKsf,iBAAgB,QAAhFrM,EAAW2T,EAAApa,KAAA,SAIX2G,EAAiBF,EAAc2G,EAAG3G,YAAe,IAChC,IAAKE,EAAgB,GAC1CyG,EAAGzG,cAAgBA,EAAc,QAbMjT,IAAG0mB,EAAA3hB,KAAA,iBAkBgE,OAD5GyhB,EAAoB1mB,KAAKyZ,UAAUrE,sBAAsBR,IAClDM,aAAewR,EAAaxR,aAAavQ,KAAI,SAACiV,GAAuB,OAAK+M,EAAKtD,iBAAiBzJ,EAAG,IAAEgN,EAAAha,OAAA,SAC3G8Z,GAAY,eAAAE,EAAAha,OAAA,SAGhB5M,KAAKyZ,UAAU7E,MAAMA,IAAM,yBAAAgS,EAAA3Z,OAAA,GAAAuZ,EAAA,SAErC,GAAE,CAAE1U,SAAU9R,QAAO,yBAAAsmB,EAAArZ,OAAA,GAAA4Z,EAAA,mB,GACzB,CAAAxmB,IAAA,WAAAX,MAED,SAAS0mB,GACL,OAAwBpmB,KAAK8mB,UAAUV,GAAqB,EAChE,GAAC,CAAA/lB,IAAA,2BAAAX,MAED,SAAyB0mB,GACrB,OAAwCpmB,KAAK8mB,UAAUV,GAAqB,EAChF,GAAC,CAAA/lB,IAAA,iBAAAX,MAEK,SAAesU,G,6IACjB,O,SAAMhU,KAAKT,aAAY,OACL,OADKwnB,EAAA9hB,KAAA,EACC+O,EAAe,OAEuC,OAF9EA,EAAe+S,EAAAva,KAETuX,EAAS,CAAE/P,gBAAiBhU,KAAKyZ,UAAUrO,KAAK4I,GAAiB,IAAO+S,EAAAna,OAAA,SAEvE6E,IAAK,kBAAWwQ,GAAA+E,OAAA,UAAA9E,EAAAA,EAAAA,KAAAC,MAAA,SAAA8E,IAAA,IAAA5kB,EAAAuX,EAAA3G,EAAAE,EAAA,OAAA+O,EAAAA,EAAAA,KAAAI,MAAA,SAAA4E,GAAA,cAAAA,EAAAvW,KAAAuW,EAAAjiB,MAAA,OACJ,OADIiiB,EAAAjiB,KAAA,EACEjF,KAAK4e,QAAQ,iBAAkBmF,GAAO,OAA/C,GAEE,OAFR1hB,EAAM6kB,EAAA1a,MAEM,CAAA0a,EAAAjiB,KAAA,WAC+B,MAAzCjF,KAAKid,SAAS,KAAOjJ,GAAwB,CAAAkT,EAAAjiB,KAAA,eAAAiiB,EAAAta,OAAA,SACtC,MAAI,cAAAsa,EAAAta,OAAA,cAERxL,GAAS,OAGiC,GAE/B,OAFhBwY,EAAK5Z,KAAKyZ,UAAUpE,oBAAoBhT,IAEvC4Q,YAAmB,CAAAiU,EAAAjiB,KAAA,SACtB2U,EAAGzG,cAAgB,EAAE+T,EAAAjiB,KAAA,oBAEM,MAApB2U,EAAGzG,cAAqB,CAAA+T,EAAAjiB,KAAA,SACX,OADWiiB,EAAAjiB,KAAA,GACLjF,KAAKqf,wBAAwB,IAAM,EAAIrf,KAAKsf,iBAAgB,QAAhFrM,EAAWiU,EAAA1a,MAGb2G,EAAiBF,EAAc2G,EAAG3G,YAAe,IAChC,IAAKE,EAAgB,GAC1CyG,EAAGzG,cAAgBA,EAAc,eAAA+T,EAAAta,OAAA,SAG9B5M,KAAKqjB,iBAAiBzJ,IAAG,yBAAAsN,EAAAja,OAAA,GAAAga,EAAA,SACnC,GAAE,CAAEnV,SAAU9R,QAAO,wBAAA+mB,EAAA9Z,OAAA,GAAAka,EAAA,S,GACzB,CAAA9mB,IAAA,wBAAAX,MAEK,SAAsBsU,G,6IACxB,O,SAAMhU,KAAKT,aAAY,OAEL,OAFK6nB,EAAAniB,KAAA,EAEC+O,EAAe,OAEuC,OAF9EA,EAAeoT,EAAA5a,KAETuX,EAAS,CAAE/P,gBAAiBhU,KAAKyZ,UAAUrO,KAAK4I,GAAiB,IAAOoT,EAAAxa,OAAA,SAEvE6E,IAAK,kBAAWwQ,GAAAoF,OAAA,UAAAnF,EAAAA,EAAAA,KAAAC,MAAA,SAAAmF,IAAA,IAAAjlB,EAAA+R,EAAAnB,EAAAE,EAAA,OAAA+O,EAAAA,EAAAA,KAAAI,MAAA,SAAAiF,GAAA,cAAAA,EAAA5W,KAAA4W,EAAAtiB,MAAA,OACJ,OADIsiB,EAAAtiB,KAAA,EACEjF,KAAK4e,QAAQ,wBAAyBmF,GAAO,OAAtD,GAEE,OAFR1hB,EAAMklB,EAAA/a,MAEM,CAAA+a,EAAAtiB,KAAA,WAC+B,MAAzCjF,KAAKid,SAAS,KAAOjJ,GAAwB,CAAAuT,EAAAtiB,KAAA,eAAAsiB,EAAA3a,OAAA,SACtC,MAAI,cAAA2a,EAAA3a,OAAA,cAERxL,GAAS,UAII,MAApBiB,EAAO2Q,UAAiB,CAAAuU,EAAAtiB,KAAA,eAAAsiB,EAAA3a,OAAA,cAAWxL,GAAS,OAEF,GAEnB,OAFrBgT,EAAUpU,KAAKyZ,UAAUrF,QAAQ/R,IAE3B4Q,YAAmB,CAAAsU,EAAAtiB,KAAA,SAC3BmP,EAAQjB,cAAgB,EAAEoU,EAAAtiB,KAAA,oBAEM,MAAzBmP,EAAQjB,cAAqB,CAAAoU,EAAAtiB,KAAA,SAChB,OADgBsiB,EAAAtiB,KAAA,GACVjF,KAAKqf,wBAAwB,IAAM,EAAIrf,KAAKsf,iBAAgB,QAAhFrM,EAAWsU,EAAA/a,MAGb2G,EAAiBF,EAAcmB,EAAQnB,YAAe,IACrC,IAAKE,EAAgB,GAC1CiB,EAAQjB,cAAgBA,EAAc,eAAAoU,EAAA3a,OAAA,SAGnCwH,GAAO,yBAAAmT,EAAAta,OAAA,GAAAqa,EAAA,SACjB,GAAE,CAAExV,SAAU9R,QAAO,wBAAAonB,EAAAna,OAAA,GAAAua,EAAA,S,GACzB,CAAAnnB,IAAA,UAAAX,MAEK,SAAQyI,G,wIACV,O,SAAMnI,KAAKT,aAAY,OACR,OADQkoB,EAAAxiB,KAAA,GACF0Z,EAAAA,EAAAA,IAAkB,CAAExW,OAAQnI,KAAK0nB,WAAWvf,KAAU,OAClD,OADnB4b,EAAM0D,EAAAjb,KAAAib,EAAAxiB,KAAG,EACgBjF,KAAK4e,QAAQ,UAAWmF,GAAO,OAG3D,OAHGtP,EAAIgT,EAAAjb,MACLlK,SAAQ,SAACqV,GACS,MAAfA,EAAIlC,UAAmBkC,EAAIlC,SAAU,EAC7C,IAAGgS,EAAA7a,OAAA,SACIqF,GAAUiC,QAAQlU,KAAKyZ,UAAUjE,UAAUhD,KAAKxS,KAAKyZ,WAArDxH,CAAiEwC,IAAK,yBAAAgT,EAAAxa,OAAA,GAAA0a,EAAA,S,GAChF,CAAAtnB,IAAA,gBAAAX,MAEK,W,gIACF,O,SAAMM,KAAKT,aAAY,cAAAqoB,EAAAhb,OAAA,SAChB5M,KAAK4e,QAAQ,gBAAiB,CAAC,IAAG,wBAAAgJ,EAAA3a,OAAA,GAAA4a,EAAA,S,GAC5C,CAAAxnB,IAAA,eAAAX,MAEK,SAAagT,G,sIACJ,O,SAAMA,EAAQ,OAAjB,KAEiB,kBAFzBA,EAAQoV,EAAAtb,OAE6BkG,EAAW,GAAC,CAAAoV,EAAA7iB,KAAA,SAK3B,OAJdyN,EAAW,GACX9W,GAAO6D,mBAAmB,mBAAoB,WAAYiT,GAC7DoV,EAAA7iB,KAAA,EAEuBjF,KAAKqf,wBAAwB,IAAM,EAAIrf,KAAKsf,iBAAgB,OAE3C,OAFrCrM,EAAW6U,EAAAtb,MACfyG,GAAeP,GACG,IAAKO,EAAc,GAAI6U,EAAAlb,OAAA,SAClC5M,KAAKyZ,UAAU/G,SAASO,IAAY,eAAA6U,EAAAlb,OAAA,SAGxC5M,KAAKyZ,UAAU/G,SAASA,IAAS,yBAAAoV,EAAA7a,OAAA,GAAA8a,EAAA,S,GAC3C,CAAA1nB,IAAA,cAAAX,MAGK,SAAY1C,G,sIAEM,O,kBAAMgD,KAAKgoB,aAAahrB,GAAK,OAAhC,GACE,OADTuV,EAAO0V,EAAAzb,MACM,CAAAyb,EAAAhjB,KAAA,eAAAgjB,EAAArb,OAAA,SAAW,MAAI,cAAAqb,EAAArb,OAAA,SAC3B,IAAI2M,GAASvZ,KAAMuS,EAASvV,IAAK,UAAAirB,EAAAtX,KAAA,EAAAsX,EAAAhX,GAAAgX,EAAA,SAEpCA,EAAAhX,GAAMrB,OAAS/T,EAAAA,GAAAA,OAAAA,eAA4B,CAAAosB,EAAAhjB,KAAA,gBAAAgjB,EAAArb,OAAA,SAAW,MAAI,eAAAqb,EAAArb,OAAA,SACvD,MAAI,yBAAAqb,EAAAhb,OAAA,GAAAib,EAAA,iB,GAElB,CAAA7nB,IAAA,eAAAX,MAEK,SAAa1C,G,wIAEC,O,SAAMgD,KAAKT,aAAY,OAkBD,OAlBhCxD,EAAOosB,EAAA3b,MAGA1O,YACTlC,GAAOqT,WACH,+BACApT,EAAAA,GAAAA,OAAAA,sBACA,CAAEqe,UAAW,MAAOne,QAASA,EAAQiB,OAKvC6V,EAAc,CAChBY,GAAI1X,EAAQ+B,WACZ8D,KAAO,aAAeoJ,GAAShO,GAAM+R,UAAU,IAClDoZ,EAAAxX,KAAA,EAAAwX,EAAAlX,GAGUjR,KAAKyZ,UAAS0O,EAAAljB,KAAA,EAAmBjF,KAAKyC,KAAKoQ,GAAY,cAAAsV,EAAAhX,GAAAgX,EAAA3b,KAAA2b,EAAAvb,OAAA,SAAAub,EAAAlX,GAAxCsJ,YAAW9X,KAAA0lB,EAAAlX,GAAAkX,EAAAhX,KAAA,WAAAgX,EAAAxX,KAAA,GAAAwX,EAAArO,GAAAqO,EAAA,SAE7BA,EAAArO,GAAMlK,OAAS/T,EAAAA,GAAAA,OAAAA,eAA4B,CAAAssB,EAAAljB,KAAA,gBAAAkjB,EAAAvb,OAAA,SAAW,MAAI,cAAAub,EAAArO,GAAA,yBAAAqO,EAAAlb,OAAA,GAAAmb,EAAA,kB,GAGrE,CAAA/nB,IAAA,cAAAX,MAEK,SAAY1C,G,sIACP,O,SAAMA,EAAI,OAAb,OAAJA,EAAIqrB,EAAA7b,KAAA6b,EAAA1X,KAAG,EAAH0X,EAAAzb,OAAA,SAIOS,QAAQC,QAAQtN,KAAKyZ,UAAUlH,QAAQvV,KAAM,UAAAqrB,EAAA1X,KAAA,EAAA0X,EAAApX,GAAAoX,EAAA,WAGhDrS,EAAAA,EAAAA,IAAYhZ,GAAO,CAAFqrB,EAAApjB,KAAA,eAAAojB,EAAApX,GAAA,QAQR,MALI,kBAAVjU,GACPpB,GAAO6D,mBAAmB,mBAAoB,OAAQzC,GAG1DqrB,EAAApjB,KAAA,GACuBjF,KAAKsoB,YAAYtrB,GAAK,QAA/B,GAARurB,EAAQF,EAAA7b,KACC,CAAF6b,EAAApjB,KAAA,gBAAAojB,EAAAzb,OAAA,SAAW,MAAI,QAErB,OAFqByb,EAAApjB,KAAA,GAEfsjB,EAAStS,aAAY,eAAAoS,EAAAzb,OAAA,SAAAyb,EAAA7b,MAAA,yBAAA6b,EAAApb,OAAA,GAAAub,EAAA,iB,GACrC,CAAAnoB,IAAA,gBAAAX,MAEK,SAAc6S,G,8IACN,O,SAAMA,EAAO,OAKC,OALxBA,EAAOkW,EAAAjc,KACP+F,EAAUvS,KAAKyZ,UAAUlH,QAAQA,GAE3BmW,EAAcnW,EAAQxD,UAAU,GAAGrC,cAAgB,gBAAe+b,EAAAxjB,KAAA,EAE1CjF,KAAKgoB,aAAaU,GAAY,OAAvC,GAAfC,EAAeF,EAAAjc,KACC,CAAFic,EAAAxjB,KAAA,gBAAAwjB,EAAA7b,OAAA,SAAW,MAAI,QAGd,OAHc6b,EAAAxX,GAGvB1Q,EAAAA,GAAQkoB,EAAAxjB,KAAA,GAAOjF,KAAKyC,KAAK,CACjCgR,GAAIkV,EACJ/mB,KAAO,aAAeoJ,GAAS0d,GAAa3Z,UAAU,KACxD,QAHO,GAGP0Z,EAAAtX,GAAAsX,EAAAjc,QAHEvL,GAAQ,EAAHwnB,EAAAxX,IAAAwX,EAAAtX,KAMC9T,OAAS,KAAOwY,EAAAA,GAAAA,KAAe5U,EAAMgF,MAAM,EAAG,KAAKid,GAAG,IAAG,CAAAuF,EAAAxjB,KAAA,gBAAAwjB,EAAA7b,OAAA,SAAW,MAAI,QAGlF,MAFA3L,EAAQA,EAAMgF,MAAM,KAGV5I,OAAS,IAAE,CAAAorB,EAAAxjB,KAAA,gBAAAwjB,EAAA7b,OAAA,SAAW,MAAI,QAMpC,GAHMvP,EAASwY,EAAAA,GAAAA,KAAe5U,EAAMgF,MAAM,EAAG,KAAK6P,WAClD7U,EAAQA,EAAMgF,MAAM,MAGhB5I,EAAS4D,EAAM5D,QAAM,CAAAorB,EAAAxjB,KAAA,gBAAAwjB,EAAA7b,OAAA,SAAW,MAAI,QAK3B,OAHP5P,GAAO4Q,EAAAA,EAAAA,IAAa3M,EAAMgF,MAAM,EAAG5I,IAEzCorB,EAAAxjB,KAAA,GACmBjF,KAAKkmB,YAAYlpB,GAAK,QAA/B,GAAAyrB,EAAAjc,MACE+F,EAAO,CAAAkW,EAAAxjB,KAAA,gBAAAwjB,EAAA7b,OAAA,SAAW,MAAI,eAAA6b,EAAA7b,OAAA,SAE3B5P,GAAI,yBAAAyrB,EAAAxb,OAAA,GAAA2b,EAAA,S,GACd,CAAAvoB,IAAA,YAAAX,MAEK,SAAUmpB,G,8IACiB,GAAzBN,EAAqB,OACrBvS,EAAAA,EAAAA,IAAY6S,GAAgB,CAAFC,EAAA7jB,KAAA,SAMF,OAJlBsN,EAAUvS,KAAKyZ,UAAUlH,QAAQsW,GAEjCH,EAAcnW,EAAQxD,UAAU,GAAGrC,cAAgB,gBAAeoc,EAAA7jB,KAAA,EAE1CjF,KAAKgoB,aAAaU,GAAY,OAAvC,GAAfC,EAAeG,EAAAtc,KACC,CAAFsc,EAAA7jB,KAAA,eAAA6jB,EAAAlc,OAAA,SAAW,MAAI,OAEnC2b,EAAW,IAAIhP,GAASvZ,KAAM2oB,EAAiB,IAAKpW,GAASuW,EAAA7jB,KAAA,iBAIlD,OAJkD6jB,EAAA7jB,KAAA,GAI5CjF,KAAKsoB,YAAYO,GAAc,QAAhDN,EAAQO,EAAAtc,KAAA,QAGG,OAHHsc,EAAA7jB,KAAG,GAGMsjB,EAASQ,YAAW,QAA7B,GACE,OADRjO,EAAMgO,EAAAtc,MACM,CAAAsc,EAAA7jB,KAAA,gBAAA6jB,EAAAlc,OAAA,SAAW,MAAI,eAAAkc,EAAAlc,OAAA,SAE1BkO,EAAOpd,KAAG,yBAAAorB,EAAA7b,OAAA,GAAA+b,EAAA,S,GACpB,CAAA3oB,IAAA,UAAAX,MAED,SAAQgM,EAAgBqY,GACpB,OAAOnoB,GAAOqT,WAAWvD,EAAS,mBAAoB7P,EAAAA,GAAAA,OAAAA,gBAA+B,CAAEqe,UAAWxO,GACtG,GAAC,CAAArL,IAAA,cAAAX,MAED,SAAYye,GACRne,KAAK+f,QAAW/f,KAAKgd,QAAQ7U,QAAO,SAACe,GAAC,OAAKA,EAAE+f,UAAU,IAAE5rB,OAAS,CACtE,GAAC,CAAAgD,IAAA,aAAAX,MAED,SAAWye,GACPne,KAAK+f,QAAW/f,KAAKgd,QAAQ7U,QAAO,SAACe,GAAC,OAAKA,EAAE+f,UAAU,IAAE5rB,OAAS,CACtE,GAAC,CAAAgD,IAAA,oBAAAX,MAED,SAAkBwY,EAAsBQ,EAAoB3G,GACxD,IAAMoM,EAAQ,IAAI3F,GAAMP,GAAYC,GAAYQ,EAAU3G,GAI1D,OAHA/R,KAAKgd,QAAQ1gB,KAAK6hB,GAClBne,KAAKkpB,YAAY/K,GAEVne,IACX,GAAC,CAAAK,IAAA,KAAAX,MAED,SAAGwY,EAAsBQ,GACrB,OAAO1Y,KAAKmpB,kBAAkBjR,EAAWQ,GAAU,EACvD,GAAC,CAAArY,IAAA,OAAAX,MAED,SAAKwY,EAAsBQ,GACvB,OAAO1Y,KAAKmpB,kBAAkBjR,EAAWQ,GAAU,EACvD,GAAC,CAAArY,IAAA,OAAAX,MAGD,SAAKwY,GAAyC,QAAAkR,EAAA,KAAAC,EAAAC,UAAAjsB,OAAhBksB,EAAgB,IAAA5mB,MAAA0mB,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAhBD,EAAgBC,EAAA,GAAAF,UAAAE,GAC1C,IAAInnB,GAAS,EAETonB,EAAwB,GAExBC,EAAWzR,GAAYC,GAoB3B,OAnBAlY,KAAKgd,QAAUhd,KAAKgd,QAAQ7U,QAAO,SAACgW,GAChC,OAAIA,EAAM1F,MAAQiR,IAElBnc,YAAW,WACP4Q,EAAMzF,SAAShP,MAAM0f,EAAMG,EAC/B,GAAG,GAEHlnB,GAAS,GAEL8b,EAAMpM,OACN0X,EAAQntB,KAAK6hB,IACN,GAIf,IAEAsL,EAAQnnB,SAAQ,SAAC6b,GAAYiL,EAAKO,WAAWxL,EAAQ,IAE9C9b,CACX,GAAC,CAAAhC,IAAA,gBAAAX,MAED,SAAcwY,GACV,IAAKA,EAAa,OAAOlY,KAAKgd,QAAQ3f,OAEtC,IAAIqsB,EAAWzR,GAAYC,GAC3B,OAAOlY,KAAKgd,QAAQ7U,QAAO,SAACgW,GACxB,OAAQA,EAAM1F,MAAQiR,CAC1B,IAAGrsB,MACP,GAAC,CAAAgD,IAAA,YAAAX,MAED,SAAUwY,GACN,GAAiB,MAAbA,EACA,OAAOlY,KAAKgd,QAAQrY,KAAI,SAACwZ,GAAK,OAAKA,EAAMzF,QAAQ,IAGrD,IAAIgR,EAAWzR,GAAYC,GAC3B,OAAOlY,KAAKgd,QACP7U,QAAO,SAACgW,GAAK,OAAMA,EAAM1F,MAAQiR,CAAQ,IACzC/kB,KAAI,SAACwZ,GAAK,OAAKA,EAAMzF,QAAQ,GACtC,GAAC,CAAArY,IAAA,MAAAX,MAED,SAAIwY,EAAsBQ,GAAmB,IAAAkR,EAAA,KACzC,GAAgB,MAAZlR,EACA,OAAO1Y,KAAK6pB,mBAAmB3R,GAGnC,IAAMuR,EAAwB,GAE1BK,GAAQ,EAERJ,EAAWzR,GAAYC,GAW3B,OAVAlY,KAAKgd,QAAUhd,KAAKgd,QAAQ7U,QAAO,SAACgW,GAChC,OAAIA,EAAM1F,MAAQiR,GAAYvL,EAAMzF,UAAYA,MAC5CoR,IACJA,GAAQ,EACRL,EAAQntB,KAAK6hB,IACN,GACX,IAEAsL,EAAQnnB,SAAQ,SAAC6b,GAAYyL,EAAKD,WAAWxL,EAAQ,IAE9Cne,IACX,GAAC,CAAAK,IAAA,qBAAAX,MAED,SAAmBwY,GAAqB,IAAA6R,EAAA,KAChCN,EAAwB,GAC5B,GAAiB,MAAbvR,EACAuR,EAAUzpB,KAAKgd,QAEfhd,KAAKgd,QAAU,OACZ,CACH,IAAM0M,EAAWzR,GAAYC,GAC7BlY,KAAKgd,QAAUhd,KAAKgd,QAAQ7U,QAAO,SAACgW,GAChC,OAAIA,EAAM1F,MAAQiR,IAClBD,EAAQntB,KAAK6hB,IACN,EACX,G,CAKJ,OAFAsL,EAAQnnB,SAAQ,SAAC6b,GAAY4L,EAAKJ,WAAWxL,EAAQ,IAE9Cne,IACX,IAAC,EAAAK,IAAA,eAAAX,MA9pCD,WAII,OAHwB,MAApB8c,KACAA,GAAmB,IAAIvK,IAEpBuK,EACX,GAEA,CAAAnc,IAAA,aAAAX,MACA,SAAkB3D,GACd,OAAOwD,EAAuB,MAAXxD,EAAmB,YAAaA,EACvD,KAAC2gB,CAAA,CA3JqB,CAAQK,EAAAA,I,uVE3hB5BnhB,GAAS,IAAIC,EAAAA,GAAO2F,GAIpBwoB,GAAU,IAAI9oB,WAAW,IAC/B8oB,GAAQrkB,KAAK,GAEb,IAAMskB,GAAyBpU,EAAAA,GAAAA,MAAgB,GACzCqU,GAAkBrU,EAAAA,GAAAA,KAAe,GACjCsU,GAAiBtU,EAAAA,GAAAA,KAAe,GAChCuU,GAAwBvU,EAAAA,GAAAA,KAAe,sEAW7C,IAAMwU,IAAU/T,EAAAA,EAAAA,IAAW6T,GAAIjR,cAAe,IACxCoR,IAAWhU,EAAAA,EAAAA,IAAW4T,GAAKhR,cAAe,IAE1CqR,GAA2C,CAC7CvtB,KAAM,SACNwE,QAAS,SACT3D,QAAS,UACT2sB,kBAAmB,UACnBC,KAAM,WAGJC,GAAkC,CACpC,OAAQ,UAAW,UAAW,oBAAqB,QAGvD,SAASC,GAAYtqB,GACjB,OAAO,SAAUX,GAIb,MAHsB,kBAAXA,GACP9D,GAAO6D,mBAAmB,4BAADuJ,OAA8BuI,KAAKuK,UAAUzb,IAAK,UAAA2I,OAAe3I,GAAQX,GAE/FA,CACX,CACJ,CAEA,IAAMkrB,GAAoD,CACtD5tB,KAAM2tB,GAAY,QAClBnpB,QAASmpB,GAAY,WACrB9sB,QAAS,SAAS6B,GACd,IACI,OAAOmW,EAAAA,GAAAA,KAAenW,GAAOoK,U,CAC/B,MAAOvN,GAAQ,CACjB,OAAOX,GAAO6D,mBAAmB,qCAAsC,iBAAkBC,EAC7F,EACA8qB,kBAAmB,SAAS9qB,GACxB,IACI,OAAOuW,EAAAA,GAAAA,IAAWvW,GAAOgN,a,CAC3B,MAAOnQ,GAAQ,CACjB,OAAOX,GAAO6D,mBAAmB,2CAA4C,2BAA4BC,EAC7G,EACA+qB,KAAM,SAAS/qB,GACX,IACI,IAAMuB,GAAQV,EAAAA,EAAAA,IAASb,GACvB,GAAqB,KAAjBuB,EAAM5D,OAAiB,MAAM,IAAIgE,MAAM,cAC3C,OAAO6J,EAAAA,EAAAA,IAAQjK,E,CACjB,MAAO1E,GAAQ,CACjB,OAAOX,GAAO6D,mBAAmB,8BAA+B,cAAeC,EACnF,GAGJ,SAASmrB,GAAepd,GAGhB,IAAM+B,EAAQ/B,EAAK+B,MAAM,kBACzB,GAAIA,EAAO,CACP,IAAM1K,EAAuB,KAAb0K,EAAM,GAEhBsb,EAAQjb,SAASL,EAAM,IAAM,QAC/Bsb,EAAQ,IAAM,GAAKA,EAAQ,KAAQtb,EAAM,IAAMA,EAAM,KAAOzN,OAAO+oB,KACnElvB,GAAO6D,mBAAmB,wBAAyB,OAAQgO,GAG/D,IAAMsd,EAAcX,GAAWY,KAAKlmB,EAAUgmB,EAAQ,EAAIA,GACpDG,EAAcnmB,EAASimB,EAAYG,IAAIf,IAAKgB,IAAIlB,IAAcC,GAEpE,OAAO,SAASxqB,GACZ,IAAMoD,EAAI+S,EAAAA,GAAAA,KAAenW,GAMzB,OAJIoD,EAAEsoB,GAAGH,IAAgBnoB,EAAEuoB,GAAGN,KAC1BnvB,GAAO6D,mBAAmB,2BAADuJ,OAA6ByE,GAAS,QAAS/N,IAGrE4W,EAAAA,EAAAA,IAAWxT,EAAEwoB,OAAO,KAAKpS,cAAe,GACnD,C,CAMJ,IAAM1J,EAAQ/B,EAAK+B,MAAM,gBACzB,GAAIA,EAAO,CACP,IAAMsb,EAAQjb,SAASL,EAAM,IAK7B,OAJc,IAAVsb,GAAeA,EAAQ,IAAMtb,EAAM,KAAOzN,OAAO+oB,KACjDlvB,GAAO6D,mBAAmB,sBAAuB,OAAQgO,GAGtD,SAAS/N,GAKZ,OAJca,EAAAA,EAAAA,IAASb,GACbrC,SAAWytB,GACjBlvB,GAAO6D,mBAAmB,sBAADuJ,OAAwByE,GAAS,QAAS/N,GAjGvF,SAAqBA,GACjB,IAAMuB,GAAQV,EAAAA,EAAAA,IAASb,GACjB6rB,EAAYtqB,EAAM5D,OAAS,GACjC,OAAIkuB,GACO1R,EAAAA,EAAAA,IAAU,CAAE5Y,EAAO+oB,GAAQ/jB,MAAMslB,MAErCrgB,EAAAA,EAAAA,IAAQjK,EACnB,CA4FuBuqB,CAAY9rB,EACvB,C,CAIR,OAAQ+N,GACJ,IAAK,UAAW,OAAO,SAAS/N,GAC5B,OAAO4W,EAAAA,EAAAA,KAAWL,EAAAA,GAAAA,IAAWvW,GAAQ,GACzC,EACA,IAAK,OAAQ,OAAO,SAASA,GACzB,OAAUA,EAAmB2qB,GAAVC,EACvB,EACA,IAAK,QAAS,OAAO,SAAS5qB,GAC1B,OAAOuL,EAAAA,EAAAA,GAAUvL,EACrB,EACA,IAAK,SAAU,OAAO,SAASA,GAC3B,OAAO+rB,EAAAA,GAAAA,IAAG/rB,EACd,EAGJ,OAAO,IACX,CAEA,SAASgsB,GAAW1uB,EAAc2uB,GAC9B,MAAO,GAAP3iB,OAAWhM,EAAK,KAAAgM,OAAK2iB,EAAOhnB,KAAI,SAAAma,GAAA,IAAG9hB,EAAI8hB,EAAJ9hB,KAAU,OAAA8hB,EAAJrR,KAAmB,IAAMzQ,CAAI,IAAGgb,KAAK,KAAK,IACvF,CAEO,IAAM4T,GAAgB,WAOzB,SAAAA,EAAYC,IAA4C/rB,EAAAA,EAAAA,GAAA,KAAA8rB,IACpD7rB,EAAAA,EAAAA,IAAeC,KAAM,QAASmO,OAAO2d,QAAOC,EAAAA,EAAAA,IAASF,MAErD9rB,EAAAA,EAAAA,IAAeC,KAAM,gBAAiB,CAAC,IACvCD,EAAAA,EAAAA,IAAeC,KAAM,SAAU,CAAC,GAGhC,IAAMgsB,EAAiD,CAAC,EAGlDC,EAAyC,CAAC,EAG1CC,EAAoD,CAAC,EAE3D/d,OAAOhH,KAAK0kB,GAAOvpB,SAAQ,SAACmL,GACxBue,EAAMve,GAAQ,CAAC,EACfwe,EAAQxe,GAAQ,GAChBye,EAASze,GAAQ,CAAC,CACtB,IAAG,IAAApD,EAAA,SAAArN,GAIC,IAAMmvB,EAAuC,CAAC,EAE9CN,EAAM7uB,GAAMsF,SAAQ,SAAC8pB,GAGbD,EAAYC,EAAMpvB,OAClBpB,GAAO6D,mBAAmB,2BAADuJ,OAA6BuI,KAAKuK,UAAUsQ,EAAMpvB,MAAM,QAAAgM,OAAQuI,KAAKuK,UAAU9e,IAAU,QAAS6uB,GAE/HM,EAAYC,EAAMpvB,OAAQ,EAG1B,IAAMqvB,EAAWD,EAAM3e,KAAK+B,MAAM,uBAAuB,GACrD6c,IAAarvB,GACbpB,GAAO6D,mBAAmB,8BAADuJ,OAAgCuI,KAAKuK,UAAUuQ,IAAc,QAASR,GAInFhB,GAAewB,KAG1BJ,EAAQI,IACTzwB,GAAO6D,mBAAmB,gBAADuJ,OAAkBuI,KAAKuK,UAAUuQ,IAAc,QAASR,GAIrFI,EAAQI,GAAU/vB,KAAKU,GACvBgvB,EAAMhvB,GAAMqvB,IAAY,EAC5B,G,EA7BJ,IAAK,IAAMrvB,KAAQ6uB,EAAKxhB,EAAArN,GAiCxB,IAAMsvB,EAAene,OAAOhH,KAAK8kB,GAAS9jB,QAAO,SAACnD,GAAC,OAA4B,IAAtBinB,EAAQjnB,GAAG3H,MAAY,IAmChF,IAAK,IAAML,KAjCiB,IAAxBsvB,EAAajvB,OACbzB,GAAO6D,mBAAmB,uBAAwB,QAASosB,GACpDS,EAAajvB,OAAS,GAC7BzB,GAAO6D,mBAAmB,4CAADuJ,OAA8CsjB,EAAa3nB,KAAI,SAACugB,GAAC,OAAM3T,KAAKuK,UAAUoJ,EAAE,IAAGlN,KAAK,OAAU,QAAS6T,IAGhJ9rB,EAAAA,EAAAA,IAAeC,KAAM,cAAessB,EAAa,IAGjD,SAASC,EAAc9e,EAAcqc,GAC7BA,EAAMrc,IACN7R,GAAO6D,mBAAmB,8BAADuJ,OAAgCuI,KAAKuK,UAAUrO,IAAU,QAASoe,GAG/F/B,EAAMrc,IAAQ,EAEdU,OAAOhH,KAAK6kB,EAAMve,IAAOnL,SAAQ,SAACkqB,GACzBP,EAAQO,KAGbD,EAAcC,EAAO1C,GAGrB3b,OAAOhH,KAAK2iB,GAAOxnB,SAAQ,SAACmqB,GACxBP,EAASO,GAASD,IAAS,CAC/B,IACJ,WAEO1C,EAAMrc,EACjB,CACA8e,CAAcvsB,KAAK0sB,YAAa,CAAC,GAGdR,EAAU,CACzB,IAAMS,EAAKxe,OAAOhH,KAAK+kB,EAASlvB,IAChC2vB,EAAG3lB,OACHhH,KAAK4sB,OAAO5vB,GAAQ0uB,GAAW1uB,EAAM6uB,EAAM7uB,IAAS2vB,EAAGhoB,KAAI,SAACugB,GAAC,OAAKwG,GAAWxG,EAAG2G,EAAM3G,GAAG,IAAElN,KAAK,G,CAExG,CAgQC,OAhQA5X,EAAAA,EAAAA,GAAAwrB,EAAA,EAAAvrB,IAAA,aAAAX,MAED,SAAW+N,GACP,IAAIof,EAAU7sB,KAAK8sB,cAAcrf,GAIjC,OAHKof,IACDA,EAAU7sB,KAAK8sB,cAAcrf,GAAQzN,KAAK+sB,YAAYtf,IAEnDof,CACX,GAAC,CAAAxsB,IAAA,cAAAX,MAED,SAAY+N,GAAY,IAAA6E,EAAA,KAIVua,EAAUhC,GAAepd,GAC/B,GAAIof,EAAW,OAAOA,EAI1B,IAAMrd,EAAQ/B,EAAK+B,MAAM,yBACzB,GAAIA,EAAO,CACP,IAAMid,EAAUjd,EAAM,GAChBwd,EAAahtB,KAAKitB,WAAWR,GAC7BpvB,EAASwS,SAASL,EAAM,IAC9B,OAAO,SAAC9P,GACArC,GAAU,GAAKqC,EAAMrC,SAAWA,GAChCzB,GAAO6D,mBAAmB,0DAA2D,QAASC,GAGlG,IAAI2C,EAAS3C,EAAMiF,IAAIqoB,GAKvB,OAJI1a,EAAKsa,OAAOH,KACZpqB,EAASA,EAAOsC,IAAIsG,EAAAA,KAGjBA,EAAAA,EAAAA,IAAU4O,EAAAA,EAAAA,IAAUxX,GAC/B,C,CAIJ,IAAMspB,EAAS3rB,KAAK6rB,MAAMpe,GAC1B,GAAIke,EAAQ,CACR,IAAMuB,GAAczB,EAAAA,GAAAA,IAAGzrB,KAAK4sB,OAAOnf,IACnC,OAAO,SAAC/N,GACJ,IAAM2lB,EAASsG,EAAOhnB,KAAI,SAAAwoB,GAAmB,IAAhBnwB,EAAImwB,EAAJnwB,KAAMyQ,EAAI0f,EAAJ1f,KACzBpL,EAASiQ,EAAK2a,WAAWxf,EAAhB6E,CAAsB5S,EAAM1C,IAC3C,OAAIsV,EAAKsa,OAAOnf,IAAgBxC,EAAAA,EAAAA,GAAU5I,GACnCA,CACX,IAEA,OADAgjB,EAAOhL,QAAQ6S,IACRrT,EAAAA,EAAAA,IAAUwL,EACrB,C,CAGJ,OAAOzpB,GAAO6D,mBAAmB,iBAADuJ,OAAmByE,GAAS,OAAQA,EACxE,GAAC,CAAApN,IAAA,aAAAX,MAED,SAAW1C,GACP,IAAMqF,EAASrC,KAAK4sB,OAAO5vB,GAI3B,OAHKqF,GACDzG,GAAO6D,mBAAmB,iBAADuJ,OAAmBuI,KAAKuK,UAAU9e,IAAU,OAAQA,GAE1EqF,CACX,GAAC,CAAAhC,IAAA,aAAAX,MAED,SAAW+N,EAAc/N,GACrB,OAAOM,KAAKitB,WAAWxf,EAAhBzN,CAAsBN,EACjC,GAAC,CAAAW,IAAA,aAAAX,MAED,SAAW1C,EAAc0C,GACrB,OAAOuL,EAAAA,EAAAA,GAAUjL,KAAKotB,WAAWpwB,EAAM0C,GAC3C,GAAC,CAAAW,IAAA,SAAAX,MAED,SAAOA,GACH,OAAOM,KAAKotB,WAAWptB,KAAK0sB,YAAahtB,EAC7C,GAAC,CAAAW,IAAA,OAAAX,MAED,SAAKA,GACD,OAAOM,KAAKqtB,WAAWrtB,KAAK0sB,YAAahtB,EAC7C,GAAC,CAAAW,IAAA,SAAAX,MAED,SAAO+N,EAAc/N,EAAY4tB,GAA0C,IAAAtW,EAAA,KAInE,GADgB6T,GAAepd,GAChB,OAAO6f,EAAS7f,EAAM/N,GAIzC,IAAM8P,EAAQ/B,EAAK+B,MAAM,yBACzB,GAAIA,EAAO,CACP,IAAMid,EAAUjd,EAAM,GAChBnS,EAASwS,SAASL,EAAM,IAI9B,OAHInS,GAAU,GAAKqC,EAAMrC,SAAWA,GAChCzB,GAAO6D,mBAAmB,0DAA2D,QAASC,GAE3FA,EAAMiF,KAAI,SAAC7B,GAAM,OAAKkU,EAAKuW,OAAOd,EAAS3pB,EAAGwqB,EAAS,G,CAIlE,IAAM3B,EAAS3rB,KAAK6rB,MAAMpe,GAC1B,OAAIke,EACOA,EAAO6B,QAAO,SAACC,EAAKC,GAAoB,IAAhB1wB,EAAI0wB,EAAJ1wB,KAAMyQ,EAAIigB,EAAJjgB,KAEjC,OADAggB,EAAMzwB,GAAQga,EAAKuW,OAAO9f,EAAM/N,EAAM1C,GAAOswB,GACtCG,CACX,GAAwB,CAAC,GAGtB7xB,GAAO6D,mBAAmB,iBAADuJ,OAAmByE,GAAS,OAAQA,EACxE,GAAC,CAAApN,IAAA,QAAAX,MAED,SAAMA,EAA4B4tB,GAC9B,OAAOttB,KAAKutB,OAAOvtB,KAAK0sB,YAAahtB,EAAO4tB,EAChD,IAAC,EAAAjtB,IAAA,OAAAX,MAED,SAAYmsB,GACR,OAAO,IAAID,EAAiBC,EAChC,GAAC,CAAAxrB,IAAA,iBAAAX,MAED,SAAsBmsB,GAClB,OAAOD,EAAiBxY,KAAKyY,GAAOa,WACxC,GAAC,CAAArsB,IAAA,aAAAX,MAED,SAAkB1C,EAAc6uB,EAA8CnsB,GAC1E,OAAOksB,EAAiBxY,KAAKyY,GAAOwB,WAAWrwB,EAAM0C,EACzD,GAAC,CAAAW,IAAA,aAAAX,MAED,SAAkBiuB,GACd,IAAMC,EAAsC,GAC5C,IAAK,IAAM5wB,KAAQ2wB,EAAQ,CACvB,IAAMlgB,EAAO8c,GAAiBvtB,GACzByQ,GACD7R,GAAO6D,mBAAmB,kCAADuJ,OAAoCuI,KAAKuK,UAAU9e,IAAU,SAAU2wB,GAEpGC,EAAatxB,KAAK,CAAEU,KAAAA,EAAMyQ,KAAAA,G,CAO9B,OAJAmgB,EAAa5mB,MAAK,SAACxC,EAAGC,GAClB,OAAOimB,GAAiB3tB,QAAQyH,EAAExH,MAAQ0tB,GAAiB3tB,QAAQ0H,EAAEzH,KACzE,IAEO4uB,EAAiByB,WAAW,eAAgB,CAAEQ,aAAcD,GAAgBD,EACvF,GAAC,CAAAttB,IAAA,SAAAX,MAED,SAAciuB,EAAyB9B,EAA8CnsB,GACjF,OAAOma,EAAAA,EAAAA,IAAU,CACb,SACA+R,EAAiBkC,WAAWH,GAC5B/B,EAAiBxY,KAAKyY,GAAOzgB,KAAK1L,IAE1C,GAAC,CAAAW,IAAA,OAAAX,MAED,SAAYiuB,EAAyB9B,EAA8CnsB,GAC/E,OAAOuL,EAAAA,EAAAA,GAAU2gB,EAAiB9pB,OAAO6rB,EAAQ9B,EAAOnsB,GAC5D,GAEA,CAAAW,IAAA,eAAAX,MACA,SAA0BiuB,EAAyB9B,EAA8CnsB,EAA4BwmB,G,0IAEzHyH,GAASzf,EAAAA,EAAAA,IAAYyf,GAGfI,EAAmC,CAAC,EAGtCJ,EAAOnD,qBAAsBxU,EAAAA,EAAAA,IAAY2X,EAAOnD,kBAAmB,MACnEuD,EAASJ,EAAOnD,mBAAqB,OAInCqC,EAAUjB,EAAiBxY,KAAKyY,IAG9BmC,MAAMtuB,GAAO,SAAC+N,EAAc/N,GAIhC,MAHa,YAAT+N,IAAuBuI,EAAAA,EAAAA,IAAYtW,EAAO,MAC1CquB,EAASruB,GAAS,MAEfA,CACX,IAEA2M,EAAA4E,IAAAiR,EAAAA,EAAAA,KAAA/a,KACmB4mB,GAAQ,WAAA1hB,EAAA8E,GAAA9E,EAAA4E,MAAAtI,KAAE,CAAF0D,EAAApH,KAAA,SACN,OADVjI,EAAIqP,EAAA8E,GAAAzR,MAAA2M,EAAApH,KAAA,GACYihB,EAAYlpB,GAAK,QAAxC+wB,EAAS/wB,GAAKqP,EAAAG,KAAAH,EAAApH,KAAG,EAAH,cAYf,OARC0oB,EAAOnD,mBAAqBuD,EAASJ,EAAOnD,qBAC5CmD,EAAOnD,kBAAoBuD,EAASJ,EAAOnD,oBAI/C9qB,EAAQmtB,EAAQmB,MAAMtuB,GAAO,SAAC+N,EAAc/N,GACxC,MAAa,YAAT+N,GAAsBsgB,EAASruB,GAAiBquB,EAASruB,GACtDA,CACX,IAAG2M,EAAAO,OAAA,SAEI,CAAE+gB,OAAAA,EAAQjuB,MAAAA,IAAO,yBAAA2M,EAAAY,OAAA,GAAAC,EAAA,I,GAC3B,CAAA7M,IAAA,aAAAX,MAED,SAAkBiuB,EAAyB9B,EAA8CnsB,GAErFksB,EAAiBkC,WAAWH,GAG5B,IAAMM,EAAoC,CAAC,EACrCC,EAAoD,GAE1DxD,GAAiBpoB,SAAQ,SAACtF,GACtB,IAAM0C,EAAciuB,EAAQ3wB,GACf,MAAT0C,IACJuuB,EAAajxB,GAAQ4tB,GAAa5tB,GAAM0C,GACxCwuB,EAAY5xB,KAAK,CAAEU,KAAAA,EAAMyQ,KAAM8c,GAAiBvtB,KACpD,IAEA,IAAM6vB,EAAUjB,EAAiBxY,KAAKyY,GAEhCsC,GAAkBjgB,EAAAA,EAAAA,IAAY2d,GAUpC,OATIsC,EAAgBN,aAChBjyB,GAAO6D,mBAAmB,2CAA4C,qBAAsBosB,GAE5FsC,EAAgBN,aAAeK,EAInCrB,EAAQ/qB,OAAOpC,GAER,CACHmsB,MAAOsC,EACPR,OAAQM,EACRvB,YAAaG,EAAQH,YACrBzjB,QAAS4jB,EAAQmB,MAAMtuB,GAAO,SAAC+N,EAAc/N,GAGzC,GAAI+N,EAAK+B,MAAM,eACX,OAAOtE,EAAAA,EAAAA,KAAQ3K,EAAAA,EAAAA,IAASb,IAI5B,GAAI+N,EAAK+B,MAAM,UACX,OAAOqG,EAAAA,GAAAA,KAAenW,GAAOoK,WAGjC,OAAQ2D,GACJ,IAAK,UACD,OAAO/N,EAAMgN,cACjB,IAAK,OACD,QAAShN,EACb,IAAK,SAID,MAHsB,kBAAXA,GACP9D,GAAO6D,mBAAmB,iBAAkB,QAASC,GAElDA,EAGf,OAAO9D,GAAO6D,mBAAmB,mBAAoB,OAAQgO,EACjE,IAER,KAACme,CAAA,CArWwB,G,uSClIvBhwB,GAAS,IAAIC,EAAAA,GAAO2F,IAKpB4sB,GAAW,CAAE,OAAQ,eAE3B,SAASC,GAAW3iB,EAAgBnP,EAAYwnB,GAG5C,GAAe,SAAXrY,GAAqBnP,EAAMqT,OAAS/T,EAAAA,GAAAA,OAAAA,aAA4B,CAChE,IAAMqN,EAAI3M,EAAMA,MAChB,GAAI2M,GAAKA,EAAED,QAAQuG,MAAM,cAAewG,EAAAA,EAAAA,IAAY9M,EAAEtH,MAClD,OAAOsH,EAAEtH,KAGbhG,GAAOqT,WAAW,wCAAyCpT,EAAAA,GAAAA,OAAAA,eAA8B,CACrFU,MAAAA,EAAOqF,KAAM,M,CAIrB,IAAIqH,EAAU1M,EAAM0M,QAChB1M,EAAMqT,OAAS/T,EAAAA,GAAAA,OAAAA,cAA8BU,EAAMA,OAAyC,kBAAzBA,EAAMA,MAAM0M,QAC/EA,EAAU1M,EAAMA,MAAM0M,QACQ,kBAAhB1M,EAAMqP,KACpB3C,EAAU1M,EAAMqP,KACsB,kBAAxBrP,EAAM+xB,eACpBrlB,EAAU1M,EAAM+xB,cAEpBrlB,GAAWA,GAAW,IAAIyD,cAE1B,IAAMmG,EAAckR,EAAOlR,aAAekR,EAAOiB,kBAoCjD,MAjCI/b,EAAQuG,MAAM,kDACd5T,GAAOqT,WAAW,oDAAqDpT,EAAAA,GAAAA,OAAAA,mBAAkC,CACrGU,MAAAA,EAAOmP,OAAAA,EAAQmH,YAAAA,IAKnB5J,EAAQuG,MAAM,kBACd5T,GAAOqT,WAAW,8BAA+BpT,EAAAA,GAAAA,OAAAA,cAA6B,CAC1EU,MAAAA,EAAOmP,OAAAA,EAAQmH,YAAAA,IAKnB5J,EAAQuG,MAAM,wCACd5T,GAAOqT,WAAW,0BAA2BpT,EAAAA,GAAAA,OAAAA,wBAAuC,CAChFU,MAAAA,EAAOmP,OAAAA,EAAQmH,YAAAA,IAKnB5J,EAAQuG,MAAM,0BACd5T,GAAOqT,WAAW,gDAAiDpT,EAAAA,GAAAA,OAAAA,sBAAqC,CACpGU,MAAAA,EAAOmP,OAAAA,EAAQmH,YAAAA,IAInBub,GAASrxB,QAAQ2O,IAAW,GAAKzC,EAAQuG,MAAM,iFAC/C5T,GAAOqT,WAAW,4EAA6EpT,EAAAA,GAAAA,OAAAA,wBAAuC,CAClIU,MAAAA,EAAOmP,OAAAA,EAAQmH,YAAAA,IAIjBtW,CACV,CAEA,SAAS4T,GAAMxB,GACX,OAAO,IAAItB,SAAQ,SAASC,GACxBC,WAAWD,EAASqB,EACxB,GACJ,CAEA,SAAS4f,GAAUC,GACf,GAAIA,EAAQjyB,MAAO,CAEf,IAAMA,EAAa,IAAI8E,MAAMmtB,EAAQjyB,MAAM0M,SAG3C,MAFA1M,EAAMqT,KAAO4e,EAAQjyB,MAAMqT,KAC3BrT,EAAMqF,KAAO4sB,EAAQjyB,MAAMqF,KACrBrF,C,CAGV,OAAOiyB,EAAQnsB,MACnB,CAEA,SAASosB,GAAa/uB,GAClB,OAAIA,EAAgBA,EAAMgN,cACnBhN,CACX,CAEA,IAAMgvB,GAAoB,CAAC,EAEdC,GAAc,SAAAC,IAAAhS,EAAAA,EAAAA,GAAA+R,EAAAC,GAAA,IAAA/R,GAAAC,EAAAA,EAAAA,GAAA6R,GAKvB,SAAAA,EAAYE,EAAuB/xB,EAA2BgyB,GAAgC,IAAAxc,EAK1F,IAL0FxS,EAAAA,EAAAA,GAAA,KAAA6uB,GAC1F/yB,GAAOsW,SAAS,gBAADyc,EAAA,KAAAxc,iBAAA,EAAawc,GAE5Brc,EAAAuK,EAAApa,KAAA,MAEIosB,IAAqBH,GACrB,MAAM,IAAIrtB,MAAM,8EAiBnB,OAdDtB,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,WAAYxV,GAEX,MAAlBgyB,IAA0BA,EAAiB,GAEhB,kBAApBA,IACP/uB,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,WAAYA,EAAKxV,SAAS2c,UAAUlH,QAAQuc,KACjE/uB,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,SAAU,OAEG,kBAApBwc,IACd/uB,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,SAAUwc,IAC/B/uB,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,WAAY,OAGjC1W,GAAO6D,mBAAmB,2BAA4B,iBAAkBqvB,GAC3Exc,CACL,CA6IC,OA7IAlS,EAAAA,EAAAA,GAAAuuB,EAAA,EAAAtuB,IAAA,UAAAX,MAED,SAAQ5C,GACJ,OAAOlB,GAAOqT,WAAW,0CAA2CpT,EAAAA,GAAAA,OAAAA,sBAAqC,CACrGqe,UAAW,WAEnB,GAAC,CAAA7Z,IAAA,mBAAAX,MAED,WACI,OAAO,IAAIqvB,GAAuBL,GAAmB1uB,KAAKlD,SAAUkD,KAAKgvB,UAAYhvB,KAAKivB,OAC9F,GAAC,CAAA5uB,IAAA,aAAAX,MAED,WAAU,IAAAsX,EAAA,KACN,OAAIhX,KAAKgvB,SACE3hB,QAAQC,QAAQtN,KAAKgvB,UAGzBhvB,KAAKlD,SAASoyB,KAAK,eAAgB,IAAIrd,MAAK,SAACsd,GAMhD,OALIA,EAAS9xB,QAAU2Z,EAAKiY,QACxBrzB,GAAOqT,WAAW,oBAAsB+H,EAAKiY,OAAQpzB,EAAAA,GAAAA,OAAAA,sBAAqC,CACtFqe,UAAW,eAGZlD,EAAKla,SAAS2c,UAAUlH,QAAQ4c,EAASnY,EAAKiY,QACzD,GACJ,GAAC,CAAA5uB,IAAA,2BAAAX,MAED,SAAyBmT,GAA2C,IAAAkM,EAAA,KAChElM,GAAc3E,EAAAA,EAAAA,IAAY2E,GAE1B,IAAMuc,EAAcpvB,KAAKiW,aAAapE,MAAK,SAACU,GAExC,OADIA,IAAWA,EAAUA,EAAQ7F,eAC1B6F,CACX,IAKA,GAA4B,MAAxBM,EAAYW,SAAkB,CAC9B,IAAM6b,GAAWnhB,EAAAA,EAAAA,IAAY2E,GAC7Bwc,EAASjc,KAAOgc,EAChBvc,EAAYW,SAAWxT,KAAKlD,SAASwyB,YAAYD,E,CAcrD,OAXsB,MAAlBxc,EAAYY,KACZZ,EAAYY,GAAKpG,QAAQC,QAAQuF,EAAYY,IAAI5B,MAAK,SAAO4B,GAAE,OAAIwO,GAAAlD,OAAA,UAAAmD,EAAAA,EAAAA,KAAAC,MAAA,SAAAjV,IAAA,IAAAqF,EAAA,OAAA2P,EAAAA,EAAAA,KAAAI,MAAA,SAAAjW,GAAA,cAAAA,EAAAsE,KAAAtE,EAAApH,MAAA,UACrD,MAANwO,EAAU,CAAApH,EAAApH,KAAA,eAAAoH,EAAAO,OAAA,SAAW,MAAI,OACb,OADaP,EAAApH,KAAA,EACPjF,KAAKlD,SAASopB,YAAYzS,GAAG,OAGlD,OAFc,OADTlB,EAAOlG,EAAAG,OAET5Q,GAAO6D,mBAAmB,qCAAsC,QAASgU,GAC5EpH,EAAAO,OAAA,SACM2F,GAAO,wBAAAlG,EAAAY,OAAA,GAAAC,EAAA,SACjB,MAGEyR,EAAAA,EAAAA,IAAkB,CACrB/E,IAAI+E,EAAAA,EAAAA,IAAkB9L,GACtB0c,OAAQH,IACTvd,MAAK,SAAAiN,GAAmB,IAAhBlF,EAAEkF,EAAFlF,GAAI2V,EAAMzQ,EAANyQ,OAEI,MAAX3V,EAAGxG,KACCwG,EAAGxG,KAAK1G,gBAAkB6iB,GAC1B3zB,GAAO6D,mBAAmB,wBAAyB,cAAeoT,GAGtE+G,EAAGxG,KAAOmc,EAGd,IAAMpK,EAAcpG,EAAKjiB,SAASqV,YAAaqd,mBAAmB5V,EAAI,CAAExG,MAAM,IAE9E,OAAO2L,EAAKjiB,SAASoyB,KAAK,sBAAuB,CAAE/J,IAAStT,MAAK,SAACzG,GAC9D,OAAOA,CACX,IAAG,SAAC7O,GACA,OAAO8xB,GAAW,kBAAmB9xB,EAAO4oB,EAChD,GACJ,GACJ,GAAC,CAAA9kB,IAAA,kBAAAX,MAED,SAAgBmT,GACZ,OAAOjX,GAAOqT,WAAW,sCAAuCpT,EAAAA,GAAAA,OAAAA,sBAAqC,CACjGqe,UAAW,mBAEnB,GAAC,CAAA7Z,IAAA,kBAAAX,MAEK,SAAgBmT,G,+IAEE,O,SAAM7S,KAAKlD,SAASuiB,wBAAwB,IAAM,EAAIrf,KAAKlD,SAASwiB,iBAAgB,OAG3F,OAHPrM,EAAW2H,EAAApO,KAAAoO,EAAA3V,KAAG,EAGDjF,KAAKyvB,yBAAyB5c,GAAY,OAMlD,OANLzH,EAAIwP,EAAApO,KAAAoO,EAAAjK,KAAG,EAAHiK,EAAA3V,KAAG,EAMIwM,IAAK,kBAAWwQ,GAAAvC,OAAA,UAAAwC,EAAAA,EAAAA,KAAAC,MAAA,SAAAzH,IAAA,IAAAd,EAAA,OAAAsI,EAAAA,EAAAA,KAAAI,MAAA,SAAAhI,GAAA,cAAAA,EAAA3J,KAAA2J,EAAArV,MAAA,OACd,OADcqV,EAAArV,KAAA,EACRjF,KAAKlD,SAASimB,eAAe3X,GAAK,OAA3C,GACG,QADLwO,EAAEU,EAAA9N,MACO,CAAA8N,EAAArV,KAAA,eAAAqV,EAAA1N,OAAA,cAAWxL,GAAS,cAAAkZ,EAAA1N,OAAA,SAC5B5M,KAAKlD,SAASumB,iBAAiBzJ,EAAIxO,EAAM6H,IAAY,wBAAAqH,EAAArN,OAAA,GAAAyN,EAAA,SAC/D,GAAE,CAAE5I,SAAU9R,KAAKlD,WAAW,cAAA8d,EAAAhO,OAAA,SAAAgO,EAAApO,MAAA,QAEK,MAFLoO,EAAAjK,KAAA,GAAAiK,EAAA3J,GAAA2J,EAAA,SAEzBA,EAAA3J,GAAO+C,gBAAkB5I,EAAKwP,EAAA3J,GAAA,yBAAA2J,EAAA3N,OAAA,GAAA+O,EAAA,kB,GAG3C,CAAA3b,IAAA,cAAAX,MAEK,SAAYuJ,G,wIAEE,OADVrH,EAA6B,kBAAbqH,GAAyB4B,EAAAA,EAAAA,IAAY5B,GAAUA,EAAOgT,EAAAhX,KAAA,EACtDjF,KAAKiW,aAAY,OAEhC,OAFD1D,EAAO0J,EAAAzP,KAAAyP,EAAAhX,KAAG,EAEHjF,KAAKlD,SAASoyB,KAAK,gBAAiB,EAAEhkB,EAAAA,EAAAA,IAAQtJ,GAAO2Q,EAAQ7F,gBAAgB,cAAAuP,EAAArP,OAAA,SAAAqP,EAAAzP,MAAA,wBAAAyP,EAAAhP,OAAA,GAAAmP,EAAA,S,GAC7F,CAAA/b,IAAA,qBAAAX,MAEK,SAAmBuJ,G,wIAEL,OADVrH,EAA6B,kBAAbqH,GAAyB4B,EAAAA,EAAAA,IAAY5B,GAAUA,EAAOqT,EAAArX,KAAA,EACtDjF,KAAKiW,aAAY,OAGhC,OAHD1D,EAAO+J,EAAA9P,KAAA8P,EAAArX,KAAG,EAGHjF,KAAKlD,SAASoyB,KAAK,WAAY,CAAE3c,EAAQ7F,eAAexB,EAAAA,EAAAA,IAAQtJ,KAAQ,cAAA0a,EAAA1P,OAAA,SAAA0P,EAAA9P,MAAA,wBAAA8P,EAAArP,OAAA,GAAAsP,EAAA,S,GACxF,CAAAlc,IAAA,iBAAAX,MAEK,SAAeiuB,EAAyB9B,EAA8CnsB,G,+IAEtE,O,SAAMgwB,GAAAA,aAA+B/B,EAAQ9B,EAAOnsB,GAAO,SAAC1C,GAC1E,OAAOwjB,EAAK1jB,SAASopB,YAAYlpB,EACrC,IAAE,OAEc,OAJV2yB,EAAS1R,EAAAzR,KAAAyR,EAAAhZ,KAAG,EAIIjF,KAAKiW,aAAY,OAEhC,OAFD1D,EAAO0L,EAAAzR,KAAAyR,EAAAhZ,KAAG,EAEHjF,KAAKlD,SAASoyB,KAAK,uBAAwB,CACpD3c,EAAQ7F,cACR6E,KAAKuK,UAAU4T,GAAAA,WAA6BC,EAAUhC,OAAQ9B,EAAO8D,EAAUjwB,UACjF,cAAAue,EAAArR,OAAA,SAAAqR,EAAAzR,MAAA,wBAAAyR,EAAAhR,OAAA,GAAAiR,EAAA,S,GACL,CAAA7d,IAAA,SAAAX,MAEK,SAAOoP,G,wIAGO,OAFVhS,EAAWkD,KAAKlD,SAAQuhB,EAAApZ,KAAA,EAERjF,KAAKiW,aAAY,OAA1B,OAAP1D,EAAO8L,EAAA7R,KAAA6R,EAAAzR,OAAA,SAEN9P,EAASoyB,KAAK,yBAA0B,CAAE3c,EAAQ7F,cAAeoC,EAAU,QAAO,wBAAAuP,EAAApR,OAAA,GAAAgS,EAAA,S,KAC5F0P,CAAA,CA1KsB,CAAQiB,GAAAA,GA6K7Bb,GAAuB,SAAAc,IAAAjT,EAAAA,EAAAA,GAAAmS,EAAAc,GAAA,IAAAC,GAAAhT,EAAAA,EAAAA,GAAAiS,GAAA,SAAAA,IAAA,OAAAjvB,EAAAA,EAAAA,GAAA,KAAAivB,GAAAe,EAAApmB,MAAA,KAAA4f,UAAA,CAgBxB,OAhBwBlpB,EAAAA,EAAAA,GAAA2uB,EAAA,EAAA1uB,IAAA,kBAAAX,MACzB,SAAgBmT,GAA2C,IAAA6N,EAAA,KACvD,OAAO1gB,KAAKyvB,yBAAyB5c,GAAahB,MAAK,SAACzG,GACpD,MAA4B,CACxBA,KAAMA,EACNsI,MAAO,KACPF,SAAU,KACVH,SAAU,KACVzR,KAAM,KACNlC,MAAO,KACP7B,QAAS,KACTsV,cAAe,EACfC,KAAM,KACNwR,KAAM,SAACzR,GAA6B,OAAOuN,EAAK5jB,SAASmmB,mBAAmB7X,EAAM+H,EAAgB,EAE1G,GACJ,KAAC4b,CAAA,CAhBwB,CAAQJ,IAmB/BoB,GAAuD,CACzDlyB,SAAS,EAAM+D,MAAM,EAAM4R,UAAU,EAAMH,UAAS,EAAMK,OAAO,EAAMD,IAAI,EAAM/T,OAAO,EACxF+N,MAAM,EAAMqF,YAAY,EACxBS,cAAc,EAAMD,sBAAsB,GAGjC3V,GAAgB,SAAAqyB,IAAApT,EAAAA,EAAAA,GAAAjf,EAAAqyB,GAAA,IAAAC,GAAAnT,EAAAA,EAAAA,GAAAnf,GAiBzB,SAAAA,EAAYD,EAA+B3B,GAAoB,IAAA+kB,GAAAhhB,EAAAA,EAAAA,GAAA,KAAAnC,GAC3D/B,GAAOsW,SAAS,gBAADvU,EAAA,KAAAwU,iBAAA,EAAaxU,GAE5B,IAAIuyB,EAAgDn0B,EA4BlC,OAzBI,MAAlBm0B,IACAA,EAAiB,IAAI7iB,SAAQ,SAACC,EAAS+C,GACnC9C,YAAW,WACPuT,EAAKzD,gBAAgBxL,MAAK,SAAC9V,GACvBuR,EAAQvR,EACZ,IAAG,SAACQ,GACA8T,EAAO9T,EACX,GACJ,GAAG,EACP,KAGJukB,EAAAmP,EAAAxtB,KAAA,KAAMytB,GAGDxyB,IAAOA,GAAMggB,EAAAA,EAAAA,IAAwBoD,EAAK3O,YAAa,aAA1CuL,IAEE,kBAAThgB,GACPqC,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA2D,GAAO,aAAa3S,OAAO2d,OAAO,CAC5CpuB,IAAKA,MAGTqC,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA2D,GAAO,aAAc3S,OAAO2d,QAAO5d,EAAAA,EAAAA,IAAYxQ,KAGjEojB,EAAKqP,QAAU,GAAGrP,CACtB,CA6SC,OA7SA1gB,EAAAA,EAAAA,GAAAzC,EAAA,EAAA0C,IAAA,SAAAsM,IAvCD,WAII,OAH4B,MAAxB3M,KAAKowB,kBACLpwB,KAAKowB,gBAAkB,CAAC,GAErBpwB,KAAKowB,eAChB,GAAC,CAAA/vB,IAAA,gBAAAX,MAwCD,WAAa,IAAAqhB,EAAA,KAST,OARK/gB,KAAKqwB,OAAsB,gBAC5BrwB,KAAKqwB,OAAsB,cAAIrwB,KAAKswB,yBAGpC/iB,YAAW,WACPwT,EAAKsP,OAAsB,cAAI,IACnC,GAAG,IAEArwB,KAAKqwB,OAAsB,aACtC,GAAC,CAAAhwB,IAAA,yBAAAX,MAEK,W,wIACF,O,SAAMyQ,GAAM,GAAE,OAIA,OAFVtS,EAAU,KAAIuhB,EAAAzO,KAAA,EAAAyO,EAAAna,KAAA,EAEEjF,KAAKkvB,KAAK,cAAe,IAAI,OAA7CrxB,EAAOuhB,EAAA5S,KAAA4S,EAAAna,KAAG,GAAH,aAGO,OAHPma,EAAAzO,KAAG,EAAHyO,EAAAnO,GAAAmO,EAAA,SAAAA,EAAAzO,KAAG,GAAHyO,EAAAna,KAAG,GAGUjF,KAAKkvB,KAAK,cAAe,IAAI,QAA7CrxB,EAAOuhB,EAAA5S,KAAA4S,EAAAna,KAAG,GAAH,cAAAma,EAAAzO,KAAG,GAAHyO,EAAAjO,GAAAiO,EAAA,qBAIA,MAAXvhB,EAAe,CAAAuhB,EAAAna,KAAA,SAC+E,OAAxF1F,GAAame,EAAAA,EAAAA,IAA4C1d,KAAKmS,YAAa,cAAaiN,EAAAzO,KAAA,GAAAyO,EAAAxS,OAAA,SAEnFrN,EAAWsW,EAAAA,GAAAA,KAAehY,GAASiY,aAAW,eAAAsJ,EAAAzO,KAAA,GAAAyO,EAAAtF,GAAAsF,EAAA,UAAAA,EAAAxS,OAAA,SAE9ChR,GAAOqT,WAAW,2BAA4BpT,EAAAA,GAAAA,OAAAA,cAA6B,CAC9EgC,QAASA,EACTsgB,MAAO,iBACPjN,YAAWkO,EAAAtF,MACb,eAAAsF,EAAAxS,OAAA,SAIHhR,GAAOqT,WAAW,2BAA4BpT,EAAAA,GAAAA,OAAAA,cAA6B,CAC9EsiB,MAAO,eACT,yBAAAiB,EAAAnS,OAAA,GAAA6S,EAAA,iC,GACL,CAAAzf,IAAA,YAAAX,MAED,SAAUovB,GACN,OAAO,IAAIH,GAAcD,GAAmB1uB,KAAM8uB,EACtD,GAAC,CAAAzuB,IAAA,qBAAAX,MAED,SAAmBovB,GACf,OAAO9uB,KAAKuwB,UAAUzB,GAAgB0B,kBAC1C,GAAC,CAAAnwB,IAAA,eAAAX,MAED,WAAY,IAAAgiB,EAAA,KACR,OAAO1hB,KAAKkvB,KAAK,eAAgB,IAAIrd,MAAK,SAACsd,GACvC,OAAOA,EAASxqB,KAAI,SAACH,GAAC,OAAKkd,EAAKjI,UAAUlH,QAAQ/N,EAAE,GACxD,GACJ,GAAC,CAAAnE,IAAA,OAAAX,MAED,SAAKgM,EAAgBqY,GAAkB,IAAA1B,EAAA,KAC7B5W,EAAU,CACZC,OAAQA,EACRqY,OAAQA,EACR0H,GAAKzrB,KAAKmwB,UACVM,QAAS,OAGbzwB,KAAK2d,KAAK,QAAS,CACf+S,OAAQ,UACRjlB,SAASsgB,EAAAA,EAAAA,IAAStgB,GAClB3O,SAAUkD,OAKd,IAAM+L,EAAS,CAAE,cAAe,mBAAoBhP,QAAQ2O,IAAW,EACvE,GAAIK,GAAS/L,KAAKqwB,OAAO3kB,GACrB,OAAO1L,KAAKqwB,OAAO3kB,GAGvB,IAAMrJ,EAASwL,GAAU7N,KAAK8N,WAAYyD,KAAKuK,UAAUrQ,GAAU8iB,IAAW1c,MAAK,SAACxP,GAQhF,OAPAggB,EAAK1E,KAAK,QAAS,CACf+S,OAAQ,WACRjlB,QAASA,EACTc,SAAUlK,EACVvF,SAAUulB,IAGPhgB,CAEX,IAAG,SAAC9F,GAQA,MAPA8lB,EAAK1E,KAAK,QAAS,CACf+S,OAAQ,WACRn0B,MAAOA,EACPkP,QAASA,EACT3O,SAAUulB,IAGR9lB,CACV,IAUA,OAPIwP,IACA/L,KAAKqwB,OAAO3kB,GAAUrJ,EACtBkL,YAAW,WACP8U,EAAKgO,OAAO3kB,GAAU,IAC1B,GAAG,IAGArJ,CACX,GAAC,CAAAhC,IAAA,iBAAAX,MAED,SAAegM,EAAgBqY,GAC3B,OAAQrY,GACJ,IAAK,iBACD,MAAO,CAAE,kBAAmB,IAEhC,IAAK,cACD,MAAO,CAAE,eAAgB,IAE7B,IAAK,aACD,MAAO,CAAE,iBAAkB,CAAE+iB,GAAa1K,EAAOxR,SAAUwR,EAAOrR,WAEtE,IAAK,sBACD,MAAO,CAAE,0BAA2B,CAAE+b,GAAa1K,EAAOxR,SAAUwR,EAAOrR,WAE/E,IAAK,UACD,MAAO,CAAE,cAAe,CAAE+b,GAAa1K,EAAOxR,SAAUwR,EAAOrR,WAEnE,IAAK,eACD,MAAO,CAAE,mBAAoB,CAAE+b,GAAa1K,EAAOxR,SAAUwR,EAAOM,SAAUN,EAAOrR,WAEzF,IAAK,kBACD,MAAO,CAAE,yBAA0B,CAAEqR,EAAOiB,oBAEhD,IAAK,WACD,OAAIjB,EAAOrR,SACA,CAAE,uBAAwB,CAAEqR,EAAOrR,WAAYqR,EAAOsC,sBACtDtC,EAAO/Q,UACP,CAAE,qBAAsB,CAAE+Q,EAAO/Q,YAAa+Q,EAAOsC,sBAEzD,KAEX,IAAK,iBACD,MAAO,CAAE,2BAA4B,CAAEtC,EAAO/P,kBAElD,IAAK,wBACD,MAAO,CAAE,4BAA6B,CAAE+P,EAAO/P,kBAEnD,IAAK,OAED,MAAO,CAAE,WAAY,EADM0J,EAAAA,EAAAA,IAAgG1d,KAAKmS,YAAa,qBACtHqd,CAAmBzL,EAAOlR,YAAa,CAAEO,MAAM,IAAS2Q,EAAOrR,WAG1F,IAAK,cAED,MAAO,CAAE,kBAAmB,EADDgL,EAAAA,EAAAA,IAAgG1d,KAAKmS,YAAa,qBAC/Gqd,CAAmBzL,EAAOlR,YAAa,CAAEO,MAAM,MAGjF,IAAK,UAID,OAHI2Q,EAAO5b,QAAmC,MAAzB4b,EAAO5b,OAAOoK,UAC/BwR,EAAO5b,OAAOoK,QAAUkc,GAAa1K,EAAO5b,OAAOoK,UAEhD,CAAE,cAAe,CAAEwR,EAAO5b,SAMzC,OAAO,IACX,GAAC,CAAA9H,IAAA,UAAAX,MAEK,SAAQgM,EAAgBqY,G,6IAGX,SAAXrY,GAAgC,gBAAXA,EAAwB,CAAAsU,EAAA/a,KAAA,QAChB,KAAvB2U,EAAKmK,EAAOlR,cACG,MAAX+G,EAAGnM,OAAgBoI,EAAAA,GAAAA,KAAe+D,EAAGnM,MAAMmJ,SAAQ,CAAAoJ,EAAA/a,KAAA,WAElC,MAAnB2U,EAAGrG,cAAmD,MAA3BqG,EAAGtG,qBAA4B,CAAA0M,EAAA/a,KAAA,QAC1C,OAD0C+a,EAAA/a,KAAA,EACpCjF,KAAK2wB,aAAY,OACX,OADtBC,EAAO5Q,EAAAxT,MACD+G,cAAwD,MAAhCqd,EAAQtd,wBAExCyQ,GAAS7V,EAAAA,EAAAA,IAAY6V,IACdlR,aAAc3E,EAAAA,EAAAA,IAAY0L,UAC1BmK,EAAOlR,YAAYpF,MAC7B,OAWF,OAJC,OAFN8b,EAAOvpB,KAAK6wB,eAAenlB,EAASqY,KAGtCnoB,GAAOqT,WAAWvD,EAAS,mBAAoB7P,EAAAA,GAAAA,OAAAA,gBAA+B,CAAEqe,UAAWxO,IAC9FsU,EAAArP,KAAA,GAAAqP,EAAA/a,KAAA,GAEgBjF,KAAKkvB,KAAK3F,EAAK,GAAIA,EAAK,IAAG,eAAAvJ,EAAApT,OAAA,SAAAoT,EAAAxT,MAAA,eAAAwT,EAAArP,KAAA,GAAAqP,EAAA/O,GAAA+O,EAAA,UAAAA,EAAApT,OAAA,SAEjCyhB,GAAW3iB,EAAMsU,EAAA/O,GAAS8S,IAAO,yBAAA/D,EAAA/S,OAAA,GAAAgT,EAAA,mB,GAE/C,CAAA5f,IAAA,cAAAX,MAED,SAAYye,GACU,YAAdA,EAAM1F,KAAqBzY,KAAK8wB,iBACpCC,EAAAA,GAAAA,IAAAC,EAAAA,GAAAA,GAAArzB,EAAAszB,WAAA,oBAAAxuB,KAAA,KAAkB0b,EACtB,GAAC,CAAA9d,IAAA,gBAAAX,MAED,WACI,GAA2B,MAAvBM,KAAKkxB,eAAT,CACA,IAAMC,EAAOnxB,KAEPoxB,EAAiCpxB,KAAKkvB,KAAK,kCAAmC,IACpFlvB,KAAKkxB,eAAiBE,EAEtBA,EAAcvf,MAAK,SAASwf,GAgCxB,OA/BA,SAAS5f,IACL0f,EAAKjC,KAAK,uBAAwB,CAAEmC,IAAYxf,MAAK,SAASyf,GAC1D,GAAIH,EAAKD,gBAAkBE,EAAiB,OAAO,KAEnD,IAAIG,EAAMlkB,QAAQC,UAYlB,OAXAgkB,EAAOhvB,SAAQ,SAAS8I,GAEpB+lB,EAAKlU,SAAS,KAAO7R,EAAKsB,eAAiB,UAC3C6kB,EAAMA,EAAI1f,MAAK,WACX,OAAOsf,EAAKpO,eAAe3X,GAAMyG,MAAK,SAAS+H,GAE3C,OADAuX,EAAKxT,KAAK,UAAW/D,GACd,IACX,GACJ,GACJ,IAEO2X,EAAI1f,MAAK,WACZ,OAAO1B,GAAM,IACjB,GACJ,IAAG0B,MAAK,WACJ,GAAIsf,EAAKD,gBAAkBE,EAM3B,OAFA7jB,YAAW,WAAakE,GAAQ,GAAG,GAE5B,KALH0f,EAAKjC,KAAK,sBAAuB,CAAEmC,GAM3C,IAAG9T,OAAM,SAAChhB,GAAmB,GACjC,CACAkV,GAEO4f,CACX,IAAG9T,OAAM,SAAChhB,GAAmB,G,CACjC,GAAC,CAAA8D,IAAA,aAAAX,MAED,SAAWye,GACW,YAAdA,EAAM1F,KAAuD,IAAlCzY,KAAKwxB,cAAc,aAC9CxxB,KAAKkxB,eAAiB,OAE1BH,EAAAA,GAAAA,IAAAC,EAAAA,GAAAA,GAAArzB,EAAAszB,WAAA,mBAAAxuB,KAAA,KAAiB0b,EACrB,IAUA,EAAA9d,IAAA,aAAAX,MA3QA,WACI,MAAO,uBACX,GAAC,CAAAW,IAAA,qBAAAX,MA0QD,SAA0BmT,EAAiC4e,GAEvD,IAAMC,GAAUxjB,EAAAA,EAAAA,IAAY6hB,IAC5B,GAAI0B,EACA,IAAK,IAAMpxB,KAAOoxB,EACVA,EAAWpxB,KAAQqxB,EAAQrxB,IAAO,IAI9CsxB,EAAAA,EAAAA,IAAgB9e,EAAa6e,GAE7B,IAAMrvB,EAAiD,CAAC,EAmBxD,MAhBA,CAAC,WAAY,WAAY,OAAQ,eAAgB,uBAAwB,QAAS,SAASC,SAAQ,SAASjC,GACxG,GAA+B,MAArBwS,EAAaxS,GAAvB,CACA,IAAMX,GAAQ0W,EAAAA,EAAAA,IAAevD,EAAaxS,IAC9B,aAARA,IAAsBA,EAAM,OAChCgC,EAAOhC,GAAOX,C,CAClB,IAEA,CAAC,OAAQ,KAAM,QAAQ4C,SAAQ,SAASjC,GACL,MAArBwS,EAAaxS,KACvBgC,EAAOhC,IAAO6K,EAAAA,EAAAA,IAAc2H,EAAaxS,IAC7C,IAEUwS,EAAaC,aACnBzQ,EAAmB,YAAIuT,EAAAA,GAAAA,IAAoB/C,EAAaC,aAGrDzQ,CACX,KAAC1E,CAAA,CA9VwB,CAAQ+e,ICjTjCkV,GAAU,KAEd,IAEI,GAAU,OADVA,GAAMC,WACY,MAAM,IAAIxwB,MAAM,gB,CACpC,MAAO9E,IACL,IAAMX,GAAS,IAAIC,EAAAA,GAAO2F,IAC1BowB,GAAK,WACDh2B,GAAOqT,WAAW,+CAAgDpT,EAAAA,GAAAA,OAAAA,sBAAqC,CACnGqe,UAAW,mBAEnB,C,4SCJEte,GAAS,IAAIC,EAAAA,GAAO2F,IAiBtBswB,GAAS,EAgBAC,GAAkB,SAAAC,IAAApV,EAAAA,EAAAA,GAAAmV,EAAAC,GAAA,IAAAnV,GAAAC,EAAAA,EAAAA,GAAAiV,GAa3B,SAAAA,EAAYr0B,EAAa3B,GAAoB,IAAAk2B,EAAA3f,GAAAxS,EAAAA,EAAAA,GAAA,KAAAiyB,GAEzB,QAAZh2B,GACAH,GAAOqT,WAAW,uDAAwDpT,EAAAA,GAAAA,OAAAA,sBAAqC,CAC3Gqe,UAAW,iBAInB5H,EAAAuK,EAAApa,KAAA,KAAM/E,EAAK3B,IACN+hB,kBAAoB,EAEzBxL,EAAK4f,UAAW,GAEhBnyB,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,aAAc,IAAIuf,GAAUvf,EAAKxE,WAAWpQ,OACjEqC,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,YAAa,CAAC,IACnCvS,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,QAAS,CAAC,IAC/BvS,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,UAAW,CAAC,IACjCvS,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,kBAAgBye,EAAAA,GAAAA,IAAAkB,GAAA9U,EAAAA,EAAAA,GAAA7K,IAAA0e,EAAAA,GAAAA,GAAAe,EAAAd,YAAA,gBAAAgB,GAAAxvB,KAAAwvB,IAGrC3f,EAAK6f,WAAWC,OAAS,WACrB9f,EAAK4f,UAAW,EAChB/jB,OAAOhH,KAAKmL,EAAK+f,WAAW/vB,SAAQ,SAACmpB,GACjCnZ,EAAK6f,WAAWjD,KAAK5c,EAAK+f,UAAU5G,GAAI+C,QAC5C,GACJ,EAEAlc,EAAK6f,WAAWG,UAAY,SAACC,GACzB,IAAM3wB,EAAO2wB,EAAa3wB,KACpBS,EAASkP,KAAKC,MAAM5P,GAC1B,GAAiB,MAAbS,EAAOopB,GAAY,CACnB,IAAMA,EAAK1pB,OAAOM,EAAOopB,IACnBhgB,EAAU6G,EAAK+f,UAAU5G,GAG/B,UAFOnZ,EAAK+f,UAAU5G,QAEArqB,IAAlBiB,EAAOA,OACPoJ,EAAQ6hB,SAAS,KAAMjrB,EAAOA,QAE9BiQ,EAAKqL,KAAK,QAAS,CACf+S,OAAQ,WACRjlB,QAAS8F,KAAKC,MAAM/F,EAAQ+iB,SAC5BjiB,SAAUlK,EAAOA,OACjBvF,UAAQqgB,EAAAA,EAAAA,GAAA7K,SAGT,CACH,IAAI/V,EAAe,KACf8F,EAAO9F,OACPA,EAAQ,IAAI8E,MAAMgB,EAAO9F,MAAM0M,SAAW,kBAC1ClJ,EAAAA,EAAAA,IAAoBxD,EAAO,OAAQ8F,EAAO9F,MAAMqT,MAAQ,OACxD7P,EAAAA,EAAAA,IAAoBxD,EAAO,WAAYqF,IAEvCrF,EAAQ,IAAI8E,MAAM,iBAGtBoK,EAAQ6hB,SAAS/wB,OAAO6E,GAExBkR,EAAKqL,KAAK,QAAS,CACf+S,OAAQ,WACRn0B,MAAOA,EACPkP,QAAS8F,KAAKC,MAAM/F,EAAQ+iB,SAC5B1xB,UAAQqgB,EAAAA,EAAAA,GAAA7K,I,OAKb,GAAsB,qBAAlBjQ,EAAOqJ,OAA+B,CAE7C,IAAM8mB,EAAMlgB,EAAKmgB,MAAMpwB,EAAO0hB,OAAO2O,cACjCF,GAEAA,EAAIxkB,YAAY3L,EAAO0hB,OAAO1hB,O,MAIlCqV,QAAQU,KAAK,yBAErB,EAKA,IAAMua,EAAWhS,aAAY,WACzBrO,EAAKqL,KAAK,OACd,GAAG,KACsC,OAArCgV,EAASrP,OAASqP,EAASrP,QAAUhR,CAC7C,CAgEC,OAhEAlS,EAAAA,EAAAA,GAAA2xB,EAAA,EAAA1xB,IAAA,gBAAAX,MAED,WACI,OAAOM,KAAK4yB,cAChB,GAAC,CAAAvyB,IAAA,kBAAAsM,IAED,WACI,OAAO,CACX,EAACvF,IAQD,SAAoB1H,GAChB9D,GAAOqT,WAAW,mDAAoDpT,EAAAA,GAAAA,OAAAA,sBAAqC,CACvGqe,UAAW,sBAEnB,GAAC,CAAA7Z,IAAA,mBAAAX,MAVD,SAAiBuT,GACbrX,GAAOqT,WAAW,iDAAkDpT,EAAAA,GAAAA,OAAAA,sBAAqC,CACrGqe,UAAW,mBAEnB,GAAC,CAAA7Z,IAAA,OAAAX,MAQK,W,yJACK,MAAI,wBAAA2M,EAAAY,OAAA,GAAAC,EAAA,I,GACd,CAAA7M,IAAA,UAAA+G,IAED,SAAY1H,GACHA,GAEL9D,GAAOqT,WAAW,0CAA2CpT,EAAAA,GAAAA,OAAAA,sBAAqC,CAC9Fqe,UAAW,cAEnB,GAAC,CAAA7Z,IAAA,OAAAX,MAED,SAAKgM,EAAgBqY,GAAmB,IAAA/M,EAAA,KAC9B6b,EAAMf,KAEZ,OAAO,IAAIzkB,SAAQ,SAACC,EAAS+C,GAMzB,IAAMme,EAAUjd,KAAKuK,UAAU,CAC3BpQ,OAAQA,EACRqY,OAAQA,EACR0H,GAAIoH,EACJpC,QAAS,QAGbzZ,EAAK2G,KAAK,QAAS,CACf+S,OAAQ,UACRjlB,QAAS8F,KAAKC,MAAMgd,GACpB1xB,SAAUka,IAGdA,EAAKqb,UAAUtwB,OAAO8wB,IAAQ,CAAEvF,SAlBhC,SAAkB/wB,EAAc8F,GAC5B,OAAI9F,EAAgB8T,EAAO9T,GACpB+Q,EAAQjL,EACnB,EAe0CmsB,QAAAA,GAEtCxX,EAAKkb,UAAYlb,EAAKmb,WAAWjD,KAAKV,EAC9C,GACJ,GAAC,CAAAnuB,IAAA,aAAAX,MAMK,SAAW+Y,EAAaqa,EAAmB9kB,G,+IAQ/B,OANM,OADhB+kB,EAAe/yB,KAAKgzB,QAAQva,MAE5Bsa,EAAe1lB,QAAQsC,IAAImjB,GAAOjhB,MAAK,SAACihB,GACpC,OAAO/T,EAAKmQ,KAAK,gBAAiB4D,EACtC,IACA9yB,KAAKgzB,QAAQva,GAAOsa,GACvBzY,EAAArV,KAAA,EACmB8tB,EAAY,OAA1BE,EAAK3Y,EAAA9N,KACXxM,KAAKyyB,MAAMQ,GAAS,CAAExa,IAAAA,EAAKzK,YAAAA,GAAc,wBAAAsM,EAAArN,OAAA,GAAAyN,EAAA,S,GAC5C,CAAAra,IAAA,cAAAX,MAED,SAAYye,GAAY,IAAAuB,EAAA,KACpB,OAAQvB,EAAM1Q,MACV,IAAK,QACDzN,KAAKkzB,WAAW,QAAS,CAAE,aAAc,SAAC7wB,GACtC,IAAM4Q,EAAc4C,EAAAA,GAAAA,KAAexT,EAAOuQ,QAAQkD,WAClD4J,EAAKzC,SAASrI,MAAQ3B,EACtByM,EAAK/B,KAAK,QAAS1K,EACvB,IACA,MAEJ,IAAK,UACDjT,KAAKkzB,WAAW,UAAW,CAAE,2BAA4B,SAAC7wB,GACtDqd,EAAK/B,KAAK,UAAWtb,EACzB,IACA,MAEJ,IAAK,SACDrC,KAAKkzB,WAAW/U,EAAM1F,IAAK,CAAE,OAAQzY,KAAK0nB,WAAWvJ,EAAMhW,UAAW,SAAC9F,GAC7C,MAAlBA,EAAOoT,UAAmBpT,EAAOoT,SAAU,GAC/CiK,EAAK/B,KAAKQ,EAAMhW,OAAQuX,EAAKjG,UAAUjE,UAAUnT,GACrD,IACA,MAEJ,IAAK,KACD,IAAM8wB,EAAc,SAAChV,GACjB,IAAM/S,EAAO+S,EAAM/S,KACnBsU,EAAKE,sBAAsBxU,GAAMyG,MAAK,SAACuC,GAC9BA,GACLsL,EAAK/B,KAAKvS,EAAMgJ,EACpB,GACJ,EAGA+e,EAAYhV,GAMZne,KAAKkzB,WAAW,KAAM,CAAE,aAAc,SAAC7wB,GACnCqd,EAAK1C,QAAQ7U,QAAO,SAACe,GAAC,MAAiB,OAAXA,EAAEuE,IAAa,IAAGnL,QAAQ6wB,EAC1D,IACA,MAIJ,IAAK,QACL,IAAK,OACL,IAAK,WACL,IAAK,UACL,IAAK,QACD,MAEJ,QACIzb,QAAQC,IAAI,aAAcwG,GAGtC,GAAC,CAAA9d,IAAA,aAAAX,MAED,SAAWye,GAAY,IAAAqC,EAAA,KACf/H,EAAM0F,EAAM1F,IAEhB,GAAmB,OAAf0F,EAAM1Q,KAAe,CAErB,GAAIzN,KAAKgd,QAAQ7U,QAAO,SAACe,GAAC,MAAiB,OAAXA,EAAEuE,IAAa,IAAGpQ,OAC9C,OAEJob,EAAM,I,MACH,GAAIzY,KAAKwxB,cAAcrT,EAAMA,OAEhC,OAGJ,IAAM8U,EAAQjzB,KAAKgzB,QAAQva,GACtBwa,WAECjzB,KAAKgzB,QAAQva,GACpBwa,EAAMphB,MAAK,SAACohB,GACFzS,EAAKiS,MAAMQ,YACTzS,EAAKiS,MAAMQ,GAClBzS,EAAK0O,KAAK,kBAAmB,CAAE+D,IACnC,IACJ,GAAC,CAAA5yB,IAAA,UAAAX,MAEK,W,8IAEEM,KAAKmyB,WAAWiB,aAAevB,GAAAA,WAAoB,CAAAjX,EAAA3V,KAAA,QACnD,OADmD2V,EAAA3V,KAAA,EAC5C,IAAIoI,SAAQ,SAACC,GAChBoT,EAAKyR,WAAWC,OAAS,WACrB9kB,GAAQ,EACZ,EAEAoT,EAAKyR,WAAWkB,QAAU,WACtB/lB,GAAQ,EACZ,CACJ,IAAG,OAKPtN,KAAKmyB,WAAWmB,MAAM,KAAM,wBAAA1Y,EAAA3N,OAAA,GAAA+O,EAAA,S,IAC/B,EAAA3b,IAAA,aAAAX,MArHD,WACI,MAAO,qBACX,KAACqyB,CAAA,CAnK0B,CAAQp0B,I,uSCpCjC/B,GAAS,IAAIC,EAAAA,GAAO2F,IAkBb+xB,GAAsB,SAAAvB,IAAApV,EAAAA,EAAAA,GAAA2W,EAAAvB,GAAA,IAAAlC,GAAAhT,EAAAA,EAAAA,GAAAyW,GAAA,SAAAA,IAAA,OAAAzzB,EAAAA,EAAAA,GAAA,KAAAyzB,GAAAzD,EAAApmB,MAAA,KAAA4f,UAAA,CAmB9B,OAnB8BlpB,EAAAA,EAAAA,GAAAmzB,EAAA,EAAAlzB,IAAA,gBAAAX,MACzB,WAAa,IAAA4S,EAAA,K,sPACW,GACX,OADXvW,EAAUiE,KAAKjE,SACA,CAAAsQ,EAAApH,KAAA,QACL,OADKoH,EAAApH,KAAA,EACC4X,EAAMQ,cAAa5a,KAAC,MAAC,QAArC1G,EAAOsQ,EAAAG,OAGH5Q,GAAOqT,WAAW,sBAAuBpT,EAAAA,GAAAA,OAAAA,cAA6B,CAAC,GAItD,MAAjBmE,KAAKge,YAELje,EAAAA,EAAAA,IAAeC,KAAM,WAAYjE,GAEjCiE,KAAK2d,KAAK,UAAW5hB,EAAS,OACjC,cAAAsQ,EAAAO,OAAA,SAEE7Q,GAAO,wBAAAsQ,EAAAY,OAAA,GAAAC,EAAA,S,KACjBqmB,CAAA,CAnB8B,CAAQ51B,IAsBrB61B,GAAmB,SAAAC,IAAA7W,EAAAA,EAAAA,GAAA4W,EAAAC,GAAA,IAAAxD,GAAAnT,EAAAA,EAAAA,GAAA0W,GAGrC,SAAAA,EAAYz3B,EAAsB23B,GAAY,IAAA1c,GAAAlX,EAAAA,EAAAA,GAAA,KAAA0zB,GAC1C53B,GAAO+3B,cAAc,gBAADH,EAAA,KAAArhB,iBAAA,EAAaqhB,GAGjCz3B,GAAU2hB,EAAAA,EAAAA,IAAS,gBAAA8V,EAAA,KAAArhB,iBAAA,EAA+C,aAAxDuL,CAAsE3hB,GAChF23B,GAAShW,EAAAA,EAAAA,IAAS,gBAAA8V,EAAA,KAAArhB,iBAAA,EAAyC,YAAlDuL,CAA+DgW,GAExE,IAAM5lB,GAAa4P,EAAAA,EAAAA,IAAS,gBAAA8V,EAAA,KAAArhB,iBAAA,EAAyB,SAAlCuL,CAA4C3hB,EAAS23B,GAUvE,OARD1c,EAAAiZ,EAAAxtB,KAAA,KAAMqL,EAAY/R,GAEK,kBAAZ23B,GACP3zB,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAAnG,GAAO,SAAU0c,GACd,MAAVA,GACPvlB,OAAOhH,KAAKusB,GAAQpxB,SAAQ,SAACjC,IACzBN,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAAnG,GAAiB3W,EAAKqzB,EAAOrzB,GAC/C,IACH2W,CACL,CAkCC,OAlCA5W,EAAAA,EAAAA,GAAAozB,EAAA,EAAAnzB,IAAA,gBAAAX,MAED,WACI9D,GAAOwc,KAAK,yDAChB,GAAC,CAAA/X,IAAA,sBAAAX,MAED,WACI,OAAO,CACX,GAAC,CAAAW,IAAA,YAAAX,MAED,SAAU6S,GACN,OAAO3W,GAAOqT,WACV,wCACApT,EAAAA,GAAAA,OAAAA,sBACA,CAAEqe,UAAW,aAErB,GAAC,CAAA7Z,IAAA,eAAAX,MAED,WACI,OAAO2N,QAAQC,QAAQ,GAC3B,IAEA,EAAAjN,IAAA,YAAAX,MACA,SAAiBg0B,GACb,OAAOA,CACX,GAIA,CAAArzB,IAAA,SAAAX,MACA,SAAc3D,EAAkB23B,GAC5B,OAAO93B,GAAOqT,WAAW,oDAAqDpT,EAAAA,GAAAA,OAAAA,gBAA+B,CACzGqe,UAAW,UAEnB,KAACsZ,CAAA,CAvDoC,CAAQD,ICtC3C33B,GAAS,IAAIC,EAAAA,GAAO2F,IASpBoyB,GAAgB,mCAETC,GAAyB,SAAAC,IAAAlX,EAAAA,EAAAA,GAAAiX,EAAAC,GAAA,IAAAjX,GAAAC,EAAAA,EAAAA,GAAA+W,GAGlC,SAAAA,EAAY93B,EAAsB23B,GAAY,IAAAphB,GAAAxS,EAAAA,EAAAA,GAAA,KAAA+zB,GAC1C,IAAM/2B,EAAW,IAAIJ,GAAgBX,EAAS23B,GAExCh2B,EAAMZ,EAASgR,WAAWpQ,IAAIgS,QAAQ,SAAU,MAClBA,QAAQ,eAAgB,mBAGZ,OADhD4C,EAAAuK,EAAApa,KAAA,KAAM/E,EAAKZ,EAASf,UACpBgE,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,SAAUxV,EAAS42B,QAAQphB,CACpD,CAIC,OAJAlS,EAAAA,EAAAA,GAAAyzB,EAAA,EAAAxzB,IAAA,sBAAAX,MAED,WACI,OAAQM,KAAK0zB,SAAWE,EAC5B,KAACC,CAAA,CAfiC,CAAQ9B,IAkBjCr1B,GAAgB,SAAAq3B,IAAAnX,EAAAA,EAAAA,GAAAlgB,EAAAq3B,GAAA,IAAAjE,GAAAhT,EAAAA,EAAAA,GAAApgB,GAAA,SAAAA,IAAA,OAAAoD,EAAAA,EAAAA,GAAA,KAAApD,GAAAozB,EAAApmB,MAAA,KAAA4f,UAAA,CAoDxB,OApDwBlpB,EAAAA,EAAAA,GAAA1D,EAAA,EAAA2D,IAAA,sBAAAX,MAsDzB,WACI,OAAQM,KAAK0zB,SAAWE,EAC5B,IAAC,EAAAvzB,IAAA,uBAAAX,MAtDD,SAA4B3D,EAAsB23B,GAC9C,OAAO,IAAIG,GAAyB93B,EAAS23B,EACjD,GAAC,CAAArzB,IAAA,YAAAX,MAED,SAAiBg0B,GACb,OAAc,MAAVA,EAAyBE,IACzBF,GAA6B,kBAAZA,GACjB93B,GAAO6D,mBAAmB,iBAAkB,SAAUi0B,GAEnDA,EACX,GAAC,CAAArzB,IAAA,SAAAX,MAED,SAAc3D,EAAkB23B,GAC5B,IAAIM,EAAO,KACX,OAAQj4B,EAAQiB,MACZ,IAAK,YACDg3B,EAAO,gCACP,MACJ,IAAK,UACDA,EAAO,gCACP,MACJ,IAAK,UACDA,EAAO,gCACP,MACJ,IAAK,SACDA,EAAO,+BACP,MACJ,IAAK,QACDA,EAAO,8BACP,MACJ,IAAK,QACDA,EAAO,oCACP,MACJ,IAAK,WACDA,EAAO,mCACP,MACJ,QACGp4B,GAAO6D,mBAAmB,sBAAuB,UAAW6pB,UAAU,IAG7E,MAAO,CACH1a,WAAW,EACXlR,IAAM,WAAkBs2B,EAAON,EAC/BnlB,iBAAkB,SAACmC,EAAiBhT,GAIhC,OAHIg2B,IAAWE,IACXnc,KAEGpK,QAAQC,SAAQ,EAC3B,EAER,KAAC5Q,CAAA,CApDwB,CAAQ82B,I,uSCjC/B53B,GAAS,IAAIC,EAAAA,GAAO2F,IAEbvE,GAAmB,SAAA82B,IAAAnX,EAAAA,EAAAA,GAAA3f,EAAA82B,GAAA,IAAAjE,GAAAhT,EAAAA,EAAAA,GAAA7f,GAAA,SAAAA,IAAA,OAAA6C,EAAAA,EAAAA,GAAA,KAAA7C,GAAA6yB,EAAApmB,MAAA,KAAA4f,UAAA,CAoB3B,OApB2BlpB,EAAAA,EAAAA,GAAAnD,EAAA,EAAAoD,IAAA,UAAAX,MAsBtB,SAAQgM,EAAgBqY,GAAW,IAAAzR,EAAA,K,6OAGtB,mBAAX5G,EAA2B,CAAAW,EAAApH,KAAA,QACb,OADaoH,EAAApH,KAAA,EACP4X,EAAM+B,QAAOnc,KAAC,gBAAY,CAAEiQ,SAAU,WAAW,OAA1D,OAALkC,EAAKvI,EAAAG,KAAAH,EAAAO,OAAA,SACJgI,EAAMhC,QAAM,cAAAvG,EAAAO,OAAA,SAGhBiQ,EAAM+B,QAAOnc,KAAC,KAAAiJ,EAAQqY,IAAM,wBAAA1X,EAAAY,OAAA,GAAAC,EAAA,S,IACtC,EAAA7M,IAAA,YAAAX,MA7BD,SAAiBg0B,GAIb,OAHc,MAAVA,GACA93B,GAAO6D,mBAAmB,sCAAuC,SAAUi0B,GAExE,IACX,GAAC,CAAArzB,IAAA,SAAAX,MAED,SAAc3D,EAAkB23B,GAC5B,IAAIM,EAAO,KACX,GACS,cADDj4B,EAAQiB,KAERg3B,EAAO,mCAGRp4B,GAAO6D,mBAAmB,sBAAuB,UAAW6pB,UAAU,IAG7E,OAAO0K,CACX,KAAC/2B,CAAA,CApB2B,CAAQu2B,I,uSCIlC53B,GAAS,IAAIC,EAAAA,GAAO2F,IAM1B,SAASyyB,GAAuBphB,GAC5B,IAAMxQ,EAAiC,CAAC,EACxC,IAAK,IAAIhC,KAAOwS,EACZ,GAA+B,MAArBA,EAAaxS,GAAvB,CACA,IAAIX,EAAcmT,EAAaxS,GACnB,SAARA,GAA4B,IAAVX,IAMlBA,EAHM,CAAE+N,MAAM,EAAM+F,UAAU,EAAMH,UAAU,EAAM6gB,aAAa,EAAM5gB,sBAAsB,EAAMI,OAAO,EAAMhU,OAAO,GAAQW,IACvH+V,EAAAA,EAAAA,KAASlL,EAAAA,EAAAA,IAAQxL,IACV,eAARW,EACC,KAAMuV,EAAAA,GAAAA,IAAclW,GAAOiF,KAAI,SAACyC,GACpC,MAAO,aAAP4B,OAAqB5B,EAAImL,QAAQ,oBAAAvJ,OAAoB5B,EAAI+sB,YAAYnc,KAAK,OAAO,MACrF,IAAGA,KAAK,KAAO,KAEP9M,EAAAA,EAAAA,IAAQxL,GAEpB2C,EAAOhC,GAAOX,E,CAElB,OAAO2C,CACX,CAEA,SAASksB,GAAUlsB,GAEf,GAAqB,GAAjBA,EAAOyK,SAAmC,qBAAnBzK,EAAO4G,SAAqD,0BAAnB5G,EAAO4G,SACvE,OAAO5G,EAAOA,OAGlB,GAAqB,GAAjBA,EAAOyK,QAAiC,MAAlBzK,EAAO4G,QAAiB,CAC9C,IAAM1M,EAAa,IAAI8E,MAAM,oBAK7B,MAJA9E,EAAM8F,OAASkP,KAAKuK,UAAUzZ,IACzBA,EAAOA,QAAU,IAAIqK,cAAc3P,QAAQ,eAAiB,IAC7DR,EAAM6U,eAAgB,GAEpB7U,C,CAGV,OAAO8F,EAAOA,MAClB,CAEA,SAAS+xB,GAAc/xB,GAEnB,GAAIA,GAAkC,GAAlBA,EAAQyK,QAAwC,SAAnBzK,EAAQ4G,UAAuB5G,EAAOA,QAAU,IAAIqK,cAAc3P,QAAQ,eAAiB,EAAG,CAC3I,IAAMR,EAAa,IAAI8E,MAAM,sBAG7B,MAFA9E,EAAM8F,OAASkP,KAAKuK,UAAUzZ,GAC9B9F,EAAM6U,eAAgB,EAChB7U,C,CAGV,GAAsB,OAAlB8F,EAAOouB,QAAkB,CAEzB,IAAMl0B,EAAa,IAAI8E,MAAM,oBAE7B,MADA9E,EAAM8F,OAASkP,KAAKuK,UAAUzZ,GACxB9F,C,CAGV,GAAI8F,EAAO9F,MAAO,CAEd,IAAMA,EAAa,IAAI8E,MAAMgB,EAAO9F,MAAM0M,SAAW,iBAGrD,MAFI5G,EAAO9F,MAAMqT,OAAQrT,EAAMqT,KAAOvN,EAAO9F,MAAMqT,MAC/CvN,EAAO9F,MAAMqF,OAAQrF,EAAMqF,KAAOS,EAAO9F,MAAMqF,MAC7CrF,C,CAGV,OAAO8F,EAAOA,MAClB,CAGA,SAASgyB,GAAY3hB,GACjB,GAAiB,YAAbA,EAA0B,MAAM,IAAIrR,MAAM,yBAC9C,MAAiB,WAAbqR,EAAgCA,EAE7B7C,SAAS6C,EAAS3D,UAAU,GAAI,GAC3C,CAGA,IAAM6kB,GAAgB,qCAEtB,SAASvF,GAAW3iB,EAAgBnP,EAAYsW,GAG5C,GAAe,SAAXnH,GAAqBnP,EAAMqT,OAAS/T,EAAAA,GAAAA,OAAAA,aAA4B,CAChE,IAAMqN,EAAI3M,EAAMA,MAGhB,GAAI2M,IAAMA,EAAED,QAAQuG,MAAM,cAAgBtG,EAAED,QAAQuG,MAAM,wBAAyB,CAE/E,IAAI5N,EAAOsH,EAAEtH,KAGb,GAFIA,IAAQA,EAAO,KAAOA,EAAK8N,QAAQ,SAAU,MAE7CsG,EAAAA,EAAAA,IAAYpU,GAAS,OAAOA,EAEhChG,GAAOqT,WAAW,wCAAyCpT,EAAAA,GAAAA,OAAAA,eAA8B,CACrFU,MAAAA,EAAOqF,KAAM,M,EAMzB,IAAIqH,EAAU1M,EAAM0M,QAuCpB,MAtCI1M,EAAMqT,OAAS/T,EAAAA,GAAAA,OAAAA,eACXU,EAAMA,OAAyC,kBAAzBA,EAAMA,MAAM0M,QAClCA,EAAU1M,EAAMA,MAAM0M,QACQ,kBAAhB1M,EAAMqP,KACpB3C,EAAU1M,EAAMqP,KACsB,kBAAxBrP,EAAM+xB,eACpBrlB,EAAU1M,EAAM+xB,gBAGxBrlB,GAAWA,GAAW,IAAIyD,eAGd8C,MAAM,uBACd5T,GAAOqT,WAAW,oDAAqDpT,EAAAA,GAAAA,OAAAA,mBAAkC,CACtGU,MAAAA,EAAOmP,OAAAA,EAAQmH,YAAAA,IAKlB5J,EAAQuG,MAAM,8EACd5T,GAAOqT,WAAW,8BAA+BpT,EAAAA,GAAAA,OAAAA,cAA6B,CAC3EU,MAAAA,EAAOmP,OAAAA,EAAQmH,YAAAA,IAKlB5J,EAAQuG,MAAM,wCACb5T,GAAOqT,WAAW,0BAA2BpT,EAAAA,GAAAA,OAAAA,wBAAuC,CACjFU,MAAAA,EAAOmP,OAAAA,EAAQmH,YAAAA,IAInB5J,EAAQuG,MAAM,4DACd5T,GAAOqT,WAAW,4EAA6EpT,EAAAA,GAAAA,OAAAA,wBAAuC,CAClIU,MAAAA,EAAOmP,OAAAA,EAAQmH,YAAAA,IAIjBtW,CACV,CAEO,IAAMC,GAAkB,SAAAwzB,IAAApT,EAAAA,EAAAA,GAAApgB,EAAAwzB,GAAA,IAAAF,GAAAhT,EAAAA,EAAAA,GAAAtgB,GAI3B,SAAAA,EAAYT,EAAsB23B,GAAe,IAAAphB,EAMW,OANXxS,EAAAA,EAAAA,GAAA,KAAAtD,GAC7CZ,GAAOsW,SAAS,gBAAD1V,EAAA,KAAA2V,iBAAA,EAAa3V,GAE5B8V,EAAAwd,EAAArtB,KAAA,KAAM1G,IAENgE,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,UAAWA,EAAKgiB,eACrCv0B,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,SAAUohB,GAAUE,IAAethB,CAC5D,CAqRC,OArRAlS,EAAAA,EAAAA,GAAA5D,EAAA,EAAA6D,IAAA,aAAAX,MAED,WACI,OAAOM,KAAKjE,QAAUiE,KAAKjE,QAAQiB,KAAM,WACrC,IAAK,YACD,MAAO,2BACX,IAAK,UACD,MAAO,mCACX,IAAK,UACD,MAAO,mCACX,IAAK,QACD,MAAO,iCACX,IAAK,SACD,MAAO,kCAIf,OAAOpB,GAAO6D,mBAAmB,sBAAuB,UAAWzC,KACvE,GAAC,CAAAqD,IAAA,SAAAX,MAED,SAAO60B,EAAgBxQ,GACnB,IAAMyQ,EAAQrmB,OAAOhH,KAAK4c,GAAQyJ,QAAO,SAACC,EAAOptB,GAC7C,IAAMX,EAAQqkB,EAAO1jB,GAIrB,OAHa,MAATX,IACA+tB,GAAS,IAAJzkB,OAAS3I,EAAI,KAAA2I,OAAKtJ,IAEpB+tB,CACX,GAAG,IACGiG,EAAW1zB,KAAK0zB,OAAM,WAAA1qB,OAAgBhJ,KAAK0zB,QAAW,GAC5D,MAAO,GAAP1qB,OAAWhJ,KAAKy0B,QAAQ,gBAAAzrB,OAAgBurB,GAAOvrB,OAAIwrB,GAAMxrB,OAAI0qB,EACjE,GAAC,CAAArzB,IAAA,aAAAX,MAED,WACI,MAAO,GAAPsJ,OAAWhJ,KAAKy0B,QAAQ,OAC5B,GAAC,CAAAp0B,IAAA,cAAAX,MAED,SAAY60B,EAAgBxQ,GAGxB,OAFAA,EAAOwQ,OAASA,EAChBxQ,EAAO2Q,OAAS10B,KAAK0zB,OACd3P,CACX,GAAC,CAAA1jB,IAAA,QAAAX,MAEK,SAAM60B,EAAgBxQ,EAA6B4Q,G,uJA8BtC,OA7BTj3B,EAAOi3B,EAAO30B,KAAK40B,aAAc50B,KAAKuL,OAAOgpB,EAAQxQ,GACrDyK,EAAWmG,EAAO30B,KAAK60B,YAAYN,EAAQxQ,GAAS,KACpD+Q,EAAuB,UAAXP,EAAsBH,GAAe7F,GAEvDvuB,KAAK2d,KAAK,QAAS,CACf+S,OAAQ,UACRjlB,QAAS/N,EACTZ,SAAUkD,OAGR8N,EAA6B,CAC/BpQ,IAAKA,EACL8Q,qBAAsB,IACtBD,iBAAkB,SAACmC,EAAiBhT,GAIhC,OAHIsZ,EAAKO,uBACLE,KAEGpK,QAAQC,SAAQ,EAC3B,GAGAynB,EAAqB,KACrBvG,IACA1gB,EAAWnC,QAAU,CAAE,eAAgB,oDACvCopB,EAAa5mB,OAAOhH,KAAKqnB,GAAS7pB,KAAI,SAACtE,GACnC,MAAO,GAAP2I,OAAW3I,EAAI,KAAA2I,OAAKwlB,EAAQnuB,GAChC,IAAG2X,KAAK,MACX3L,EAAApH,KAAA,EAEoB4I,GAAUC,EAAYinB,EAAYD,GAAYV,IAAc,OAO9E,OAPG/xB,EAAMgK,EAAAG,KAEZxM,KAAK2d,KAAK,QAAS,CACf+S,OAAQ,WACRjlB,QAAS/N,EACT6O,UAAUwf,EAAAA,EAAAA,IAAS1pB,GACnBvF,SAAUkD,OACXqM,EAAAO,OAAA,SAEIvK,GAAM,yBAAAgK,EAAAY,OAAA,GAAAC,EAAA,S,GAChB,CAAA7M,IAAA,gBAAAX,MAEK,W,yJACKM,KAAKjE,SAAO,wBAAAue,EAAArN,OAAA,GAAAyN,EAAA,S,GACtB,CAAAra,IAAA,UAAAX,MAEK,SAAQgM,EAAgBqY,GAAW,IAAAhF,EAAA,K,+PAE7BrT,EAAMkP,EAAA3V,KACL,mBADK2V,EAAA3J,GACW,EAGhB,gBAHgB2J,EAAA3J,GAGH,EAGb,eAHa2J,EAAA3J,GAGD,EAQZ,wBARY2J,EAAA3J,GAQS,EAOrB,YAPqB2J,EAAA3J,GAOZ,EAOT,iBAPS2J,EAAA3J,GAOK,EAQd,oBARc2J,EAAA3J,GAQG,EAQjB,aARiB2J,EAAA3J,GAQP,GAUV,mBAVU2J,EAAA3J,GAUM,GAMhB,0BANgB2J,EAAA3J,GAMO,GAMvB,SANuB2J,EAAA3J,GAMjB,GAgBN,gBAhBM2J,EAAA3J,GAgBO,GAYb,YAZa2J,EAAA3J,GAYJ,GAmDT,kBAnDS2J,EAAA3J,GAmDM,0BAAA2J,EAAAhO,OAAA,SAhJT5M,KAAKsM,MAAM,QAAS,CAAEokB,OAAQ,qBAAoB,cAAA9V,EAAAhO,OAAA,SAGlD5M,KAAKsM,MAAM,QAAS,CAAEokB,OAAQ,kBAAiB,cAAA9V,EAAAhO,OAAA,SAI/C5M,KAAKsM,MAAM,UAAW,CACzBokB,OAAQ,UACRne,QAASwR,EAAOxR,QAChBkG,IAAKsL,EAAOrR,YACd,cAAAkI,EAAAhO,OAAA,SAGK5M,KAAKsM,MAAM,QAAS,CACvBokB,OAAQ,0BACRne,QAASwR,EAAOxR,QAChBkG,IAAKsL,EAAOrR,YACd,cAAAkI,EAAAhO,OAAA,SAGK5M,KAAKsM,MAAM,QAAS,CACvBokB,OAAQ,cACRne,QAASwR,EAAOxR,QAChBkG,IAAKsL,EAAOrR,YACd,cAAAkI,EAAAhO,OAAA,SAGK5M,KAAKsM,MAAM,QAAS,CACvBokB,OAAQ,mBACRne,QAASwR,EAAOxR,QAChB8R,SAAUN,EAAOM,SACjB5L,IAAKsL,EAAOrR,YACd,cAAAkI,EAAAhO,OAAA,SAGK5M,KAAKsM,MAAM,QAAS,CACvBokB,OAAQ,yBACR/d,IAAKoR,EAAOiB,oBACb,GAAMzH,OAAM,SAAChhB,GACZ,OAAO8xB,GAAW,kBAAmB9xB,EAAOwnB,EAAOiB,kBACvD,KAAE,YAGEjB,EAAOrR,SAAU,CAAFkI,EAAA3V,KAAA,gBAAA2V,EAAAhO,OAAA,SACR5M,KAAKsM,MAAM,QAAS,CACvBokB,OAAQ,uBACRjY,IAAKsL,EAAOrR,SACZgD,QAAUqO,EAAOsC,oBAAsB,OAAQ,WACjD,cAEA,IAAIhlB,MAAM,yCAAwC,eAAAuZ,EAAAhO,OAAA,SAGjD5M,KAAKsM,MAAM,QAAS,CACvBokB,OAAQ,2BACRsE,OAAQjR,EAAO/P,mBACjB,eAAA4G,EAAAhO,OAAA,SAGK5M,KAAKsM,MAAM,QAAS,CACvBokB,OAAQ,4BACRsE,OAAQjR,EAAO/P,mBACjB,WAGsB,WAApB+P,EAAOrR,SAAqB,CAAAkI,EAAA3V,KAAA,eACtB,IAAI5D,MAAM,wDAAuD,QAQhE,OALL4zB,EAAWhB,GAAuBlQ,EAAOlR,cACtC0hB,OAAS,QAClBU,EAASvE,OAAS,WAAW9V,EAAAjK,KAAA,GAAAiK,EAAA3V,KAAA,GAGZjF,KAAKsM,MAAM,QAAS2oB,GAAU,GAAK,eAAAra,EAAAhO,OAAA,SAAAgO,EAAApO,MAAA,eAAAoO,EAAAjK,KAAA,GAAAiK,EAAAzJ,GAAAyJ,EAAA,UAAAA,EAAAhO,OAAA,SAEzCyhB,GAAW,OAAMzT,EAAAzJ,GAAS4S,EAAOlR,cAAY,QAU7C,OALLoiB,EAAWhB,GAAuBlQ,EAAOlR,cACtC0hB,OAAS,QAClBU,EAASvE,OAAS,kBAAkB9V,EAAAjK,KAAA,GAAAiK,EAAA3V,KAAA,GAGnBjF,KAAKsM,MAAM,QAAS2oB,GAAU,GAAK,eAAAra,EAAAhO,OAAA,SAAAgO,EAAApO,MAAA,eAAAoO,EAAAjK,KAAA,GAAAiK,EAAAd,GAAAc,EAAA,UAAAA,EAAAhO,OAAA,SAEzCyhB,GAAW,cAAazT,EAAAd,GAASiK,EAAOlR,cAAY,QAkCtC,OA7BnB0W,EAA4B,CAAEmH,OAAQ,WAExC3M,EAAO5b,OAAOmN,YACdiU,EAAKjU,UAAY+e,GAAYtQ,EAAO5b,OAAOmN,YAG3CyO,EAAO5b,OAAOoN,UACdgU,EAAKhU,QAAU8e,GAAYtQ,EAAO5b,OAAOoN,UAGzCwO,EAAO5b,OAAOoK,UACdgX,EAAKhX,QAAUwR,EAAO5b,OAAOoK,SAI7BwR,EAAO5b,OAAO8L,QAAU8P,EAAO5b,OAAO8L,OAAO5W,OAAS,IAClD0mB,EAAO5b,OAAO8L,OAAO5W,OAAS,GAC9BzB,GAAOqT,WAAW,0BAA2BpT,EAAAA,GAAAA,OAAAA,sBAAqC,CAAEoY,OAAQ8P,EAAO5b,OAAO8L,SAG1E,IAAhC8P,EAAO5b,OAAO8L,OAAO5W,SAEE,kBADjB63B,EAASnR,EAAO5b,OAAO8L,OAAO,KACiB,KAAlBihB,EAAO73B,QACtCzB,GAAOqT,WAAW,2BAA4BpT,EAAAA,GAAAA,OAAAA,sBAAqC,CAAEq5B,OAAQA,IAEjG3L,EAAK2L,OAASA,IAErBta,EAAA3V,KAAA,GAE8BjF,KAAKsM,MAAM,OAAQid,GAAK,QAAjD9U,EAAImG,EAAApO,KAGN2oB,EAAoC,CAAC,EAGhCj1B,EAAI,EAAC,aAAEA,EAAIuU,EAAKpX,QAAM,CAAAud,EAAA3V,KAAA,SACR,GACE,OADf0S,EAAMlD,EAAKvU,IACT8S,UAAiB,CAAA4H,EAAA3V,KAAA,gBAAA2V,EAAAhO,OAAA,0BACM,MAA3BuoB,EAAOxd,EAAI1E,aAAoB,CAAA2H,EAAA3V,KAAA,SACjB,OADiB2V,EAAA3V,KAAA,GACXjF,KAAKo1B,SAASzd,EAAI1E,aAAY,SAA5C2B,EAAKgG,EAAApO,QAEP2oB,EAAOxd,EAAI1E,aAAe2B,EAAMxJ,MACnC,QAELuM,EAAI3E,UAAYmiB,EAAOxd,EAAI1E,aAAa,QATX/S,IAAG0a,EAAA3V,KAAA,wBAAA2V,EAAAhO,OAAA,SAY7B6H,GAAI,WAIe,cAAtBzU,KAAKjE,QAAQiB,KAAoB,CAAA4d,EAAA3V,KAAA,gBAAA2V,EAAAhO,OAAA,SAAW,GAAG,QAChC,OADgCgO,EAAAQ,GAC5Cia,WAAUza,EAAA3V,KAAA,GAAQjF,KAAKsM,MAAM,QAAS,CAAEokB,OAAQ,aAAa,QAAQ,OAAR9V,EAAAU,GAAAV,EAAApO,KAAE8oB,OAAM1a,EAAAhO,OAAA,YAAAgO,EAAAQ,IAAAR,EAAAU,KAAA,eAAAV,EAAAhO,OAAA,2BAAAgO,EAAAhO,OAAA,SAM7EiQ,EAAM+B,QAAOnc,KAAC,KAAAiJ,EAAQqY,IAAM,yBAAAnJ,EAAA3N,OAAA,GAAA+O,EAAA,2B,GAMvC,CAAA3b,IAAA,aAAAX,MACM,SAAWkkB,EAAyC9B,EAAuByT,G,+IAG/D,O,SAAMv1B,KAAKkmB,YAAYtC,GAAc,OAMpC,OANoC3H,EAAAhL,GAAAgL,EAAAzP,KAAAyP,EAAA9K,GACnB,MAAd2Q,EAAsB,EAAGA,EAAU7F,EAAAnC,GACzB,MAAZyb,EAAoB,SAAUA,EAJxCxR,EAAS,CACX2M,OAAQ,SACRne,QAAO0J,EAAAhL,GACPukB,WAAUvZ,EAAA9K,GACVskB,SAAQxZ,EAAAnC,GACR9S,KAAM,OAAKiV,EAAAhX,KAAA,EAGMjF,KAAKsM,MAAM,UAAWyX,GAAO,OAAtC,OAAN1hB,EAAM4Z,EAAAzP,KAAAyP,EAAArP,OAAA,SAELvK,EAAOsC,KAAI,SAACiV,GACf,CAAC,kBAAmB,MAAMtX,SAAQ,SAASjC,GACxB,IAAXuZ,EAAGvZ,WAAqBuZ,EAAGvZ,EACnC,IACkB,MAAduZ,EAAGhG,SAAyC,MAAtBgG,EAAGvF,kBACzBuF,EAAGhG,QAAUgG,EAAGvF,iBAEpB,IAAMqhB,EAAOhW,EAAKjG,UAAUpE,oBAAoBuE,GAEhD,OADIA,EAAG+b,YAAaD,EAAK5gB,UAAYjF,SAAS+J,EAAG+b,YAC1CD,CACX,KAAE,yBAAAzZ,EAAAhP,OAAA,GAAAmP,EAAA,S,GACL,CAAA/b,IAAA,sBAAAX,MAED,WACI,OAAQM,KAAK0zB,SAAWE,EAC5B,KAACp3B,CAAA,CAhS0B,CAAQkgB,IC9JjC,SAAUkZ,GAASzzB,GAGrB,IAAK,IAAIjC,GAFTiC,EAAQA,EAAM8D,SAEK5I,OAAS,EAAG6C,EAAI,EAAGA,IAAK,CACvC,IAAMQ,EAAIiD,KAAKS,MAAMT,KAAKqN,UAAY9Q,EAAI,IACpC21B,EAAM1zB,EAAMjC,GAClBiC,EAAMjC,GAAKiC,EAAMzB,GACjByB,EAAMzB,GAAKm1B,C,CAGf,OAAO1zB,CACX,C,2SCEMvG,GAAS,IAAIC,EAAAA,GAAO2F,IAE1B,SAASwf,KAAQ,OAAQ,IAAI1I,MAAQD,SAAW,CAIhD,SAASyd,GAAc53B,GAGnB,IAFA,IAAImE,EAAS,KAEJnC,EAAI,EAAGA,EAAIhC,EAASb,OAAQ6C,IAAK,CACtC,IAAMnE,EAAUmC,EAASgC,GAGzB,GAAe,MAAXnE,EAAmB,OAAO,KAE1BsG,EAEMA,EAAOrF,OAASjB,EAAQiB,MAAQqF,EAAOxE,UAAY9B,EAAQ8B,UAC3DwE,EAAOvE,aAAe/B,EAAQ+B,YAAqC,MAArBuE,EAAOvE,YAA4C,MAAtB/B,EAAQ+B,aAErFlC,GAAO6D,mBAAmB,oBAAqB,WAAYvB,GAG/DmE,EAAStG,C,CAIjB,OAAOsG,CACX,CAEA,SAAS0zB,GAAO1Q,EAAuB2Q,GACnC3Q,EAASA,EAAOpf,QAAQe,OACxB,IAAMivB,EAAStyB,KAAKS,MAAMihB,EAAOhoB,OAAS,GAG1C,GAAIgoB,EAAOhoB,OAAS,EAChB,OAAOgoB,EAAO4Q,GAIlB,IAAMzxB,EAAI6gB,EAAO4Q,EAAS,GAAIxxB,EAAI4gB,EAAO4Q,GAEzC,OAAgB,MAAZD,GAAoBryB,KAAK4b,IAAI/a,EAAIC,GAAKuxB,EAC/B,MAGHxxB,EAAIC,GAAK,CACrB,CAEA,SAASyxB,GAAUx2B,GACf,GAAc,OAAVA,EACA,MAAO,OACJ,GAAsB,kBAAXA,GAAyC,mBAAXA,EAC5C,OAAO6R,KAAKuK,UAAUpc,GACnB,GAAsB,kBAAXA,EACd,OAAOA,EACJ,GAAImW,EAAAA,GAAAA,YAAsBnW,GAC7B,OAAOA,EAAMoK,WACV,GAAInH,MAAMC,QAAQlD,GACrB,OAAO6R,KAAKuK,UAAUpc,EAAMiF,KAAI,SAACzE,GAAC,OAAKg2B,GAAUh2B,EAAE,KAChD,GAAsB,kBAAXR,EAAqB,CACnC,IAAMyH,EAAOgH,OAAOhH,KAAKzH,GAEzB,OADAyH,EAAKH,OACE,IAAMG,EAAKxC,KAAI,SAACtE,GACnB,IAAIyC,EAAIpD,EAAMW,GAMd,OAJIyC,EADc,oBAAPA,EACH,aAEAozB,GAAUpzB,GAEXyO,KAAKuK,UAAUzb,GAAO,IAAMyC,CACvC,IAAGkV,KAAK,KAAO,G,CAGnB,MAAM,IAAI3W,MAAM,8BAAgC3B,EACpD,CAGA,IAAIy2B,GAAU,EA+Bd,SAASrlB,GAAM1D,GACX,IAAImD,EAAqB,KAErBJ,EAAsB,KACtBC,EAA0B,IAAI/C,SAAQ,SAACC,GACvCiD,EAAS,WACDJ,IACAK,aAAaL,GACbA,EAAQ,MAEZ7C,GACJ,EACA6C,EAAQ5C,WAAWgD,EAAQnD,EAC/B,IAWA,MAAO,CAAEmD,OAAAA,EAAQ6lB,WAJjB,WACI,OAAOhmB,CACX,EAE6BwU,KAThB,SAAC5oB,GAEV,OADAoU,EAAUA,EAAQyB,KAAK7V,EAE3B,EAOJ,CAEA,IAAMq6B,GAAgB,CAClBx6B,EAAAA,GAAAA,OAAAA,eACAA,EAAAA,GAAAA,OAAAA,mBACAA,EAAAA,GAAAA,OAAAA,cACAA,EAAAA,GAAAA,OAAAA,wBACAA,EAAAA,GAAAA,OAAAA,yBAGEy6B,GAAoB,CACtB,UACA,OACA,YACA,iBACA,SACA,eAeJ,SAASC,GAAkBC,EAAuBxV,GAC9C,IAAM3e,EAAc,CAChBo0B,OAAQD,EAAOC,QAYnB,OAVAtoB,OAAOuoB,eAAer0B,EAAQ,WAAY,CAAEsK,IAAK,kBAAM6pB,EAAO15B,QAAQ,IAClE05B,EAAOnyB,QAAShC,EAAOgC,MAAQmyB,EAAOnyB,OACtC2c,IAAO3e,EAAO+K,SAAY4T,EAAMwV,EAAOnyB,OACvCmyB,EAAO7tB,OACH6tB,EAAOj6B,MACP8F,EAAO9F,MAAQi6B,EAAOj6B,MAEtB8F,EAAOA,OAASm0B,EAAOn0B,QAAU,MAGlCA,CACX,CA0BA,SAASs0B,GAAe75B,EAA4B4O,EAAgBqY,GAEhE,IAAI9Z,EAAYisB,GAEhB,OAAQxqB,GACJ,IAAK,iBAKD,OAAO,SAASkrB,GACZ,IAAMvR,EAASuR,EAAQjyB,KAAI,SAACkyB,GAAC,OAAKA,EAAEx0B,MAAM,IAGtC4Q,EAAc8iB,GAAOa,EAAQjyB,KAAI,SAACkyB,GAAC,OAAKA,EAAEx0B,MAAM,IAAG,GACvD,GAAmB,MAAf4Q,EAYJ,OAVAA,EAActP,KAAKmzB,KAAK7jB,GAGpBoS,EAAOtoB,QAAQkW,EAAc,IAAM,GAAKA,IAGxCA,GAAenW,EAASi6B,sBACxBj6B,EAASi6B,oBAAsB9jB,GAG5BnW,EAASi6B,mBACpB,EAEJ,IAAK,cAID,OAAO,SAASH,GACZ,IAAMvR,EAASuR,EAAQjyB,KAAI,SAACkyB,GAAC,OAAKA,EAAEx0B,MAAM,IAE1C,OADAgjB,EAAOre,OACAqe,EAAO1hB,KAAKS,MAAMihB,EAAOhoB,OAAS,GAC7C,EAEJ,IAAK,gBAGD,OAAO,SAASu5B,GACZ,OAAOb,GAAOa,EAAQjyB,KAAI,SAACkyB,GAAC,OAAKA,EAAEx0B,MAAM,IAC7C,EAGJ,IAAK,aACL,IAAK,sBACL,IAAK,UACL,IAAK,eACL,IAAK,OACL,IAAK,cACL,IAAK,UACD,MAGJ,IAAK,iBACL,IAAK,wBACD4H,EAAY,SAAS2P,GACjB,OAAU,MAANA,EAAqB,OAEzBA,GAAK1L,EAAAA,EAAAA,IAAY0L,IACdzG,eAAiB,EACb+iB,GAAUtc,GACrB,EACA,MAGJ,IAAK,WAGG3P,EADA8Z,EAAOsC,oBACK,SAASzR,GACjB,OAAa,MAATA,EAAwB,OAE5BA,GAAQ1G,EAAAA,EAAAA,IAAY0G,IACdM,aAAeN,EAAMM,aAAavQ,KAAI,SAACiV,GAGzC,OAFAA,GAAK1L,EAAAA,EAAAA,IAAY0L,IACdzG,eAAiB,EACbyG,CACX,IACOsc,GAAUthB,GACrB,EAEY,SAASA,GACjB,OAAa,MAATA,EAAwB,KACrBshB,GAAUthB,EACrB,EAEJ,MAEJ,QACI,MAAM,IAAIvT,MAAM,mBAAqBqK,GAK7C,OA1HJ,SAAyBzB,EAAmC1M,GACxD,OAAO,SAASq5B,GAGZ,IAAMI,EAA4D,CAAC,EACnEJ,EAAQt0B,SAAQ,SAACu0B,GACb,IAAMn3B,EAAQuK,EAAU4sB,EAAEx0B,QACrB20B,EAAMt3B,KAAUs3B,EAAMt3B,GAAS,CAAEu3B,MAAO,EAAG50B,OAAQw0B,EAAEx0B,SAC1D20B,EAAMt3B,GAAOu3B,OACjB,IAIA,IADA,IAAM9vB,EAAOgH,OAAOhH,KAAK6vB,GAChB92B,EAAI,EAAGA,EAAIiH,EAAK9J,OAAQ6C,IAAK,CAClC,IAAMyH,EAAQqvB,EAAM7vB,EAAKjH,IACzB,GAAIyH,EAAMsvB,OAAS15B,EACf,OAAOoK,EAAMtF,M,CAMzB,CACJ,CAmGW60B,CAAgBjtB,EAAWnN,EAASS,OAE/C,CAIA,SAAe45B,GAAYX,EAAuBvjB,G,sIACC,KAElB,OAFvBnW,EAA0B05B,EAAO15B,UAEzBmW,aAAuBnW,EAASmW,aAAeA,IAAiC,IAAjBA,GAAkB,CAAA5G,EAAApH,KAAA,eAAAoH,EAAAO,OAAA,SACpF9P,GAAQ,cAAAuP,EAAAO,OAAA,SAGZ6E,IAAK,WACR,OAAO,IAAIpE,SAAQ,SAACC,EAAS+C,GACzB9C,YAAW,WAGP,OAAIzQ,EAASmW,aAAeA,EAAsB3F,EAAQxQ,GAGtD05B,EAAOrT,UAAoB7V,EAAQ,MAGhCA,OAAQlM,EACnB,GAAG,EACP,GACJ,GAAG,CAAE0Q,SAAUhV,KAAW,wBAAAuP,EAAAY,OAAA,GAAAC,EAAA,I,CAG9B,SAAekqB,GAAUZ,EAAuBa,EAA4B3rB,EAAgBqY,G,wIACpFjnB,EAAW05B,EAAO15B,SAAQwd,EAAArJ,GAEtBvF,EAAM4O,EAAArV,KACL,mBADKqV,EAAArJ,IAEL,gBADgBqJ,EAAArJ,GAAA,EAGhB,kBAFaqJ,EAAArJ,GAEE,EAKf,eALeqJ,EAAArJ,IAMf,wBADYqJ,EAAArJ,IAEZ,YADqBqJ,EAAArJ,GADT,EAOZ,iBALSqJ,EAAArJ,GAKK,GAKd,aALcqJ,EAAArJ,GAKJ,GAKV,SALUqJ,EAAArJ,IAMV,gBADMqJ,EAAArJ,GAAA,GAMN,mBALaqJ,EAAArJ,IAMb,0BADgBqJ,EAAArJ,GAAA,GAGhB,YAFuBqJ,EAAArJ,GAEd,0BAAAqJ,EAAA1N,OAAA,SAhCH9P,EAAS4O,MAAS,WAEf5O,EAAUw6B,cAAe,CAAFhd,EAAArV,KAAA,eAAAqV,EAAA1N,OAAA,SAChB9P,EAAUw6B,iBAAe,cAAAhd,EAAA1N,OAAA,uBAMtCmX,EAAOrR,YAAYsD,EAAAA,EAAAA,IAAY+N,EAAOrR,UAAS,CAAA4H,EAAArV,KAAA,SACpC,OADoCqV,EAAArV,KAAA,GAC9BkyB,GAAYX,EAAQa,GAAmB,QAAxDv6B,EAAQwd,EAAA9N,KAAA,eAAA8N,EAAA1N,OAAA,SAEL9P,EAAS4O,GAAQqY,EAAOxR,QAASwR,EAAOrR,UAAY,WAAS,YAEhEqR,EAAOrR,YAAYsD,EAAAA,EAAAA,IAAY+N,EAAOrR,UAAS,CAAA4H,EAAArV,KAAA,SACpC,OADoCqV,EAAArV,KAAA,GAC9BkyB,GAAYX,EAAQa,GAAmB,QAAxDv6B,EAAQwd,EAAA9N,KAAA,eAAA8N,EAAA1N,OAAA,SAEL9P,EAASy6B,aAAaxT,EAAOxR,QAASwR,EAAOM,SAAUN,EAAOrR,UAAY,WAAS,YAEtFqR,EAAOrR,YAAYsD,EAAAA,EAAAA,IAAY+N,EAAOrR,UAAS,CAAA4H,EAAArV,KAAA,SACpC,OADoCqV,EAAArV,KAAA,GAC9BkyB,GAAYX,EAAQa,GAAmB,QAAxDv6B,EAAQwd,EAAA9N,KAAA,eAAA8N,EAAA1N,OAAA,SAEL9P,EAAUinB,EAAOsC,oBAAsB,2BAA4B,YAAatC,EAAOrR,UAAYqR,EAAO/Q,YAAU,YAGvH+Q,EAAOrR,YAAYsD,EAAAA,EAAAA,IAAY+N,EAAOrR,UAAS,CAAA4H,EAAArV,KAAA,SACpC,OADoCqV,EAAArV,KAAA,GAC9BkyB,GAAYX,EAAQa,GAAmB,QAAxDv6B,EAAQwd,EAAA9N,KAAA,eAAA8N,EAAA1N,OAAA,SAEL9P,EAAS4O,GAAQqY,EAAOlR,cAAY,eAAAyH,EAAA1N,OAAA,SAGpC9P,EAAS4O,GAAQqY,EAAO/P,kBAAgB,QAErB,MAAtB7L,EAAS4b,EAAO5b,QACRmN,YAAaU,EAAAA,EAAAA,IAAY7N,EAAOmN,YAAgBnN,EAAOoN,UAAWS,EAAAA,EAAAA,IAAY7N,EAAOoN,UAAS,CAAA+E,EAAArV,KAAA,SAC3F,OAD2FqV,EAAArV,KAAA,GACrFkyB,GAAYX,EAAQa,GAAmB,QAAxDv6B,EAAQwd,EAAA9N,KAAA,eAAA8N,EAAA1N,OAAA,SAEL9P,EAAS+iB,QAAQ1X,IAAO,eAAAmS,EAAA1N,OAAA,SAIhChR,GAAOqT,WAAW,uBAAwBpT,EAAAA,GAAAA,OAAAA,cAA6B,CAC1E6P,OAAQA,EACRqY,OAAQA,KACV,yBAAAzJ,EAAArN,OAAA,GAAAyN,EAAA,I,CAGC,IAAMpd,GAAiB,SAAA0yB,IAAApT,EAAAA,EAAAA,GAAAtf,EAAA0yB,GAAA,IAAAnT,GAAAC,EAAAA,EAAAA,GAAAxf,GAS1B,SAAAA,EAAYrB,EAAqDsB,GAAe,IAAA+U,GAAAxS,EAAAA,EAAAA,GAAA,KAAAxC,GAC5E1B,GAAOsW,SAAS,gBAAD5U,EAAA,KAAA6U,iBAAA,EAAa7U,GAEH,IAArBrB,EAAUoB,QACVzB,GAAO6D,mBAAmB,oBAAqB,YAAaxD,GAGhE,IAAMu7B,EAAiDv7B,EAAU0I,KAAI,SAAC8yB,EAAkBC,GACpF,GAAI3a,EAAAA,GAAAA,WAAoB0a,GAAmB,CACvC,IAAME,EAAepgB,GAAoBkgB,GAAoB,IAAM,IAEnE,OAAOtpB,OAAO2d,OAAO,CAAEhvB,SAAU26B,EAAkBhB,OAAQ,EAAGkB,aAAAA,EAAcC,SAD3D,G,CAIrB,IAAMpB,GAAiCtoB,EAAAA,EAAAA,IAAYupB,GAE5B,MAAnBjB,EAAOoB,WAAoBpB,EAAOoB,SAAW,GACtB,MAAvBpB,EAAOmB,eACPnB,EAAOmB,aAAepgB,GAAoBkgB,GAAoB,IAAM,KAEnD,MAAjBjB,EAAOC,SAAkBD,EAAOC,OAAS,GAE7C,IAAMA,EAASD,EAAOC,OAKtB,OAJIA,EAAS,GAAKA,EAAS,KAAOA,EAAS,IACvC76B,GAAO6D,mBAAmB,8CAA+C,aAAFuJ,OAAgB0uB,EAAM,YAAYjB,GAGtGtoB,OAAO2d,OAAO0K,EACzB,IAEMrzB,EAAQq0B,EAAgBhK,QAAO,SAACC,EAAOoJ,GAAC,OAAMpJ,EAAQoJ,EAAEJ,MAAM,GAAG,GAEzD,MAAVl5B,EACAA,EAAS4F,EAAQ,EACV5F,EAAS4F,GAChBvH,GAAO6D,mBAAmB,oDAAqD,SAAUlC,GAI7F,IAAI2yB,EAA6C4F,GAAc0B,EAAgB7yB,KAAI,SAACkyB,GAAC,OAAYA,EAAE/5B,SAAWf,OAAO,KAiBvF,OAdR,MAAlBm0B,IACAA,EAAiB,IAAI7iB,SAAQ,SAACC,EAAS+C,GACnC9C,YAAW,WACP+E,EAAK+K,gBAAgBxL,KAAKvE,EAAS+C,EACvC,GAAG,EACP,KAGJiC,EAAAuK,EAAApa,KAAA,KAAMytB,IAGNnwB,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,kBAAmBnE,OAAO2d,OAAO0L,KACtDz3B,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,SAAU/U,GAE/B+U,EAAKykB,qBAAuB,EAAEzkB,CAClC,CAuLC,OAvLAlS,EAAAA,EAAAA,GAAA9C,EAAA,EAAA+C,IAAA,gBAAAX,MAEK,W,sIACe,O,SAAM2N,QAAQsC,IAAI3P,KAAKw3B,gBAAgB7yB,KAAI,SAACkyB,GAAC,OAAKA,EAAE/5B,SAASyC,YAAY,KAAE,OAA9E,OAARrB,EAAQ0c,EAAApO,KAAAoO,EAAAhO,OAAA,SACPkpB,GAAc53B,IAAS,wBAAA0c,EAAA3N,OAAA,GAAA+O,EAAA,S,GACjC,CAAA3b,IAAA,UAAAX,MAEK,SAAQgM,EAAgBqY,G,kKAEX,oBAAXrY,EAA4B,CAAAuS,EAAAhZ,KAAA,SACW,OADXgZ,EAAAhZ,KAAA,EACiBoI,QAAQsC,IAAI3P,KAAKw3B,gBAAgB7yB,KAAI,SAACkyB,GAC/E,OAAOA,EAAE/5B,SAAS+6B,gBAAgB9T,EAAOiB,mBAAmBnT,MAAK,SAACxP,GAC9D,OAAOA,EAAO+I,IAClB,IAAG,SAAC7O,GACA,OAAOA,CACX,GACJ,KAAG,OANGu7B,EAAO7Z,EAAAzR,KASJtM,EAAI,EAAC,YAAEA,EAAI43B,EAAQz6B,QAAM,CAAA4gB,EAAAhZ,KAAA,SACL,GACF,kBADjB5C,EAASy1B,EAAQ53B,IACQ,CAAA+d,EAAAhZ,KAAA,eAAAgZ,EAAArR,OAAA,SAAWvK,GAAM,OAFhBnC,IAAG+d,EAAAhZ,KAAA,sBAMjC6yB,EAAQ,GAAE,YAKc,IAA9B93B,KAAK+2B,qBAAyC,mBAAXrrB,EAA2B,CAAAuS,EAAAhZ,KAAA,SAC9D,OAD8DgZ,EAAAhZ,KAAA,GACxDjF,KAAKihB,iBAAgB,QAGzBjT,EAAc2oB,GAAe32B,KAAM0L,EAAQqY,IAI3C6S,EAAgChB,GAAS51B,KAAKw3B,gBAAgB7yB,IAAIuJ,EAAAA,MAChElH,MAAK,SAACxC,EAAGC,GAAC,OAAMD,EAAEozB,SAAWnzB,EAAEmzB,QAAQ,IAEzCP,EAAqBr3B,KAAK+2B,oBAE5B72B,EAAI,EACJ63B,GAAQ,EAAI1tB,GAAA6X,EAAAA,EAAAA,KAAAC,MAAA,SAAA9X,IAAA,IAAA4G,EAAA+mB,EAAAC,EAAAC,EAAAJ,EAAAK,EAAAC,EAAA,OAAAlW,EAAAA,EAAAA,KAAAI,MAAA,SAAAhG,GAAA,cAAAA,EAAA3L,KAAA2L,EAAArX,MAAA,OAENgM,EAAK+P,KAGPgX,EAAiBpB,EAAQzuB,QAAO,SAAC0uB,GAAC,OAAMA,EAAElX,QAAY1O,EAAK4lB,EAAExyB,MAASwyB,EAAEc,YAAa,IAC5DnK,QAAO,SAACC,EAAOoJ,GAAC,OAAMpJ,EAAQoJ,EAAEJ,MAAM,GAAG,GAEtEwB,GAAA/V,EAAAA,EAAAA,KAAAC,MAAA,SAAA8V,IAAA,IAAAzB,EAAA3D,EAAA,OAAA3Q,EAAAA,EAAAA,KAAAI,MAAA,SAAArG,GAAA,cAAAA,EAAAtL,KAAAsL,EAAAhX,MAAA,OAEUuxB,EAASI,EAAQ12B,KAEjB2yB,EAAMsD,KAEZK,EAAOnyB,MAAQ2c,KACfwV,EAAOrpB,QAAU2D,GAAM0lB,EAAOmB,cAC9BnB,EAAOrpB,QAAQyX,MAAK,WAAQ4R,EAAOrpB,QAAU,IAAM,IAEnDqpB,EAAO7W,OAASyX,GAAUZ,EAAQa,EAAoB3rB,EAAQqY,GAAQlS,MAAK,SAACxP,GACxEm0B,EAAO7tB,MAAO,EACd6tB,EAAOn0B,OAASA,EAEZ2U,EAAKwa,cAAc,UACnBxa,EAAK2G,KAAK,QAAS,CACf+S,OAAQ,UACRmC,IAAKA,EACLwF,QAAS9B,GAAkBC,EAAQxV,MACnCvV,QAAS,CAAEC,OAAQA,EAAQqY,QAAQgI,EAAAA,EAAAA,IAAShI,IAC5CjnB,SAAUka,GAItB,IAAG,SAACza,GACAi6B,EAAO7tB,MAAO,EACd6tB,EAAOj6B,MAAQA,EAEXya,EAAKwa,cAAc,UACnBxa,EAAK2G,KAAK,QAAS,CACf+S,OAAQ,UACRmC,IAAKA,EACLwF,QAAS9B,GAAkBC,EAAQxV,MACnCvV,QAAS,CAAEC,OAAQA,EAAQqY,QAAQgI,EAAAA,EAAAA,IAAShI,IAC5CjnB,SAAUka,GAGtB,IAEIA,EAAKwa,cAAc,UACnBxa,EAAK2G,KAAK,QAAS,CACf+S,OAAQ,UACRmC,IAAKA,EACLwF,QAAS9B,GAAkBC,EAAQ,MACnC/qB,QAAS,CAAEC,OAAQA,EAAQqY,QAAQgI,EAAAA,EAAAA,IAAShI,IAC5CjnB,SAAUka,IAIlBghB,GAAkBxB,EAAOC,OAAO,wBAAAxa,EAAAhP,OAAA,GAAAgrB,EAAA,gBAhD7BD,EAAiBhhB,EAAKzZ,QAAU2C,EAAI02B,EAAQv5B,QAAM,CAAAif,EAAArX,KAAA,eAAAqX,EAAAgc,cAAAL,IAAA,eAAA3b,EAAArX,KAAA,eAyDtD,GALGizB,EAA+B,GACrCtB,EAAQt0B,SAAQ,SAACu0B,IACTA,EAAEluB,MAASkuB,EAAElX,SACjBuY,EAAQ57B,KAAKu6B,EAAElX,QACXkX,EAAE1pB,SAAW+qB,EAAQ57B,KAAKu6B,EAAE1pB,QAAQipB,cAC5C,KAEI8B,EAAQ76B,OAAQ,CAAFif,EAAArX,KAAA,SAAI,OAAJqX,EAAArX,KAAA,GAAUoI,QAAQgE,KAAK6mB,GAAQ,QAIiB,MAA5DJ,EAAUlB,EAAQzuB,QAAO,SAAC0uB,GAAC,OAAMA,EAAEluB,MAAmB,MAAXkuB,EAAEt6B,KAAa,KACpDc,QAAU2Z,EAAKzZ,QAAM,CAAA+e,EAAArX,KAAA,SACM,QACpB7D,KADTiB,EAAS2L,EAAY8pB,IACH,CAAAxb,EAAArX,KAAA,SAKjB,OAHH2xB,EAAQt0B,SAAQ,SAAAu0B,GACRA,EAAE1pB,SAAW0pB,EAAE1pB,QAAQoD,SAC3BsmB,EAAE1T,WAAY,CAClB,IAAG7G,EAAA1P,OAAA,UAAA9J,EACIT,IAAM,WAEZ01B,EAAO,CAAFzb,EAAArX,KAAA,SAAI,OAAJqX,EAAArX,KAAA,GAAU6L,GAAM,KAAKslB,aAAY,QAC3C2B,GAAQ,EAAM,QAqClB,GAjCMK,EAASxB,EAAQpJ,QAAO,SAACC,EAAOoJ,GAClC,IAAKA,EAAEluB,MAAmB,MAAXkuB,EAAEt6B,MAAiB,OAAOkxB,EAEzC,IAAM7d,EAAcinB,EAAEt6B,MAAQqT,KAM9B,OALIymB,GAAct5B,QAAQ6S,IAAS,IAC1B6d,EAAM7d,KAAS6d,EAAM7d,GAAQ,CAAErT,MAAOs6B,EAAEt6B,MAAOk6B,OAAQ,IAC5DhJ,EAAM7d,GAAM6mB,QAAUI,EAAEJ,QAGrBhJ,CACX,GAA4D,CAAC,GAE7Dtf,OAAOhH,KAAKixB,GAAQ91B,SAAQ,SAACi2B,GACzB,IAAMvB,EAAQoB,EAAOG,GACrB,KAAIvB,EAAMP,OAASzf,EAAKzZ,QAAxB,CAGAq5B,EAAQt0B,SAAQ,SAAAu0B,GACRA,EAAE1pB,SAAW0pB,EAAE1pB,QAAQoD,SAC3BsmB,EAAE1T,WAAY,CAClB,IAEA,IAAMja,EAAU8tB,EAAMz6B,MAEhBi8B,EAAmC,CAAC,EAC1ClC,GAAkBh0B,SAAQ,SAACtF,GACR,MAAXkM,EAAElM,KACNw7B,EAAMx7B,GAAQkM,EAAElM,GACpB,IAEApB,GAAOqT,WAAW/F,EAAE2Z,QAAU3Z,EAAED,QAAcsvB,EAAWC,E,CAC7D,IAG8C,IAA1C5B,EAAQzuB,QAAO,SAAC0uB,GAAC,OAAMA,EAAEluB,IAAI,IAAEtL,OAAY,CAAAif,EAAArX,KAAA,gBAAAqX,EAAA1P,OAAA,2CAAA0P,EAAArP,OAAA,GAAA5C,EAAA,YAzHxC,OAAA4T,EAAAqa,cAAAjuB,IAAA,+BAAAouB,EAAAxa,EAAAhN,IAAA,CAAAgN,EAAAhZ,KAAA,gBAAAgZ,EAAArR,OAAA,yCAAA6rB,EAAA,CAAAxa,EAAAhZ,KAAA,gBAAAgZ,EAAArR,OAAA,SAAA6rB,EAAA31B,GAAA,QAAAmb,EAAAhZ,KAAA,iBAgIR,OAHH2xB,EAAQt0B,SAAQ,SAAAu0B,GACRA,EAAE1pB,SAAW0pB,EAAE1pB,QAAQoD,SAC3BsmB,EAAE1T,WAAY,CAClB,IAAGlF,EAAArR,OAAA,SAEIhR,GAAOqT,WAAW,wBAAyBpT,EAAAA,GAAAA,OAAAA,aAA4B,CAC1E6P,OAAQA,EACRqY,OAAQA,EAGR+T,QAASlB,EAAQjyB,KAAI,SAACkyB,GAAC,OAAKN,GAAkBM,EAAE,IAChD/5B,SAAUkD,QACZ,yBAAAie,EAAAhR,OAAA,GAAAmP,EAAA,S,KACL9e,CAAA,CAzPyB,CAAQof,IChZhCgc,GAAmB,KCSnB98B,GAAS,IAAIC,EAAAA,GAAO2F,IAKpBm3B,GAAmB,mCAEZC,GAAwB,SAAA9E,IAAAlX,EAAAA,EAAAA,GAAAgc,EAAA9E,GAAA,IAAAjX,GAAAC,EAAAA,EAAAA,GAAA8b,GAKjC,SAAAA,EAAY78B,EAAsB23B,GAAY,IAAAphB,GAAAxS,EAAAA,EAAAA,GAAA,KAAA84B,GAC1C,IAAM97B,EAAW,IAAIV,GAAeL,EAAS23B,GACvC5lB,EAAahR,EAASgR,WACxBA,EAAWgB,UACXlT,GAAOqT,WAAW,+CAAgDpT,EAAAA,GAAAA,OAAAA,sBAAqC,CACnGqe,UAAW,0CAInB,IAAMxc,EAAMoQ,EAAWpQ,IAAIgS,QAAQ,SAAU,MAAMA,QAAQ,OAAQ,WAKL,OAJ9D4C,EAAAuK,EAAApa,KAAA,KAAM/E,EAAK3B,IAEXgE,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,SAAUxV,EAAS+7B,YACxC94B,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,YAAaxV,EAAS+7B,YAC3C94B,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA7K,GAAO,gBAAiBxV,EAASg8B,eAAexmB,CAClE,CAIC,OAJAlS,EAAAA,EAAAA,GAAAw4B,EAAA,EAAAv4B,IAAA,sBAAAX,MAED,WACI,OAAQM,KAAK64B,YAAcF,EAC/B,KAACC,CAAA,CAxBgC,CAAQ7G,IA2BhC31B,GAAe,SAAA23B,IAAAnX,EAAAA,EAAAA,GAAAxgB,EAAA23B,GAAA,IAAAjE,GAAAhT,EAAAA,EAAAA,GAAA1gB,GAAA,SAAAA,IAAA,OAAA0D,EAAAA,EAAAA,GAAA,KAAA1D,GAAA0zB,EAAApmB,MAAA,KAAA4f,UAAA,CAsFvB,OAtFuBlpB,EAAAA,EAAAA,GAAAhE,EAAA,EAAAiE,IAAA,sBAAAX,MAwFxB,WACI,OAAQM,KAAK64B,YAAcF,EAC/B,IAAC,EAAAt4B,IAAA,uBAAAX,MAtFD,SAA4B3D,EAAsB23B,GAC9C,OAAO,IAAIkF,GAAwB78B,EAAS23B,EAChD,GAAC,CAAArzB,IAAA,YAAAX,MAED,SAAiBg0B,GACb,IAAMqF,EAA0E,CAC5ErF,OAAQiF,GACRE,UAAWF,GACXG,cAAe,MAGnB,OAAc,MAAVpF,IAEmB,kBAAZA,EACPqF,EAAUF,UAAYnF,EAES,MAAxBA,EAAOoF,eACdl9B,GAAO0S,eAA6C,kBAAtBolB,EAAOmF,UACjC,qCAAsC,YAAanF,EAAOmF,WAC9Dj9B,GAAO0S,eAAiD,kBAA1BolB,EAAOoF,cACjC,wBAAyB,gBAAiB,cAE9CC,EAAUF,UAAYnF,EAAOmF,UAC7BE,EAAUD,cAAgBpF,EAAOoF,eAE1BpF,EAAOmF,YACdE,EAAUF,UAAYnF,EAAOmF,WAGjCE,EAAUrF,OAASqF,EAAUF,WAlBAE,CAqBjC,GAAC,CAAA14B,IAAA,SAAAX,MAED,SAAc3D,EAAkB23B,GAC5B,IAAIM,EAAe,KACnB,OAAOj4B,EAAUA,EAAQiB,KAAM,WAC3B,IAAK,YACDg3B,EAAO,oBACP,MACJ,IAAK,UACDA,EAAO,oBACP,MACJ,IAAK,UACDA,EAAO,oBACP,MACJ,IAAK,QACDA,EAAO,kBACP,MACJ,IAAK,SACDA,EAAO,mBACP,MACJ,IAAK,QACDA,EAAO,4BACP,MACJ,IAAK,WACDA,EAAO,2BACP,MACJ,QACIp4B,GAAOqT,WAAW,sBAAuBpT,EAAAA,GAAAA,OAAAA,iBAAgC,CACrEqT,SAAU,UACVxP,MAAO3D,IAInB,IAAM+R,EAA6B,CAC/Bc,WAAW,EACXlR,IAAM,WAAkBs2B,EAAO,OAASN,EAAOmF,UAC/CtqB,iBAAkB,SAACmC,EAAiBhT,GAIhC,OAHIg2B,EAAOmF,YAAcF,IACrBlhB,KAEGpK,QAAQC,SAAQ,EAC3B,GAQJ,OAL4B,MAAxBomB,EAAOoF,gBACPhrB,EAAWe,KAAO,GAClBf,EAAWgB,SAAW4kB,EAAOoF,eAG1BhrB,CACX,KAAC1R,CAAA,CAtFuB,CAAQo3B,ICrCvBwF,GAAqB,SAAAhH,IAAApV,EAAAA,EAAAA,GAAAoc,EAAAhH,GAAA,IAAAnV,GAAAC,EAAAA,EAAAA,GAAAkc,GAAA,SAAAA,IAAA,OAAAl5B,EAAAA,EAAAA,GAAA,KAAAk5B,GAAAnc,EAAAnT,MAAA,KAAA4f,UAAA,CAuF7B,OAvF6BlpB,EAAAA,EAAAA,GAAA44B,EAAA,EAAA34B,IAAA,OAAAX,MAQ9B,SAAKgM,EAAgBqY,GAAkB,IAAAzR,EAAA,KAC7B7G,EAAU,CACZC,OAAQA,EACRqY,OAAQA,EACR0H,GAAKzrB,KAAKmwB,UACVM,QAAS,OAGa,MAAtBzwB,KAAKi5B,gBACLj5B,KAAKi5B,cAAgB,IAGzB,IAAMC,EAAuB,CAAEztB,QAAAA,EAAS6B,QAAS,KAAM+C,OAAQ,MAEzDD,EAAU,IAAI/C,SAAQ,SAACC,EAAS+C,GAClC6oB,EAAgB5rB,QAAUA,EAC1B4rB,EAAgB7oB,OAASA,CAC7B,IA6DA,OA3DArQ,KAAKi5B,cAAc38B,KAAK48B,GAEnBl5B,KAAKm5B,0BAENn5B,KAAKm5B,wBAA0B5rB,YAAW,WAItC,IAAM6rB,EAAQ9mB,EAAK2mB,cACnB3mB,EAAK2mB,cAAgB,KACrB3mB,EAAK6mB,wBAA0B,KAG/B,IAAM1tB,EAAU2tB,EAAMz0B,KAAI,SAAC00B,GAAQ,OAAKA,EAAS5tB,OAAO,IAQxD,OANA6G,EAAKqL,KAAK,QAAS,CACf+S,OAAQ,eACRjlB,SAASsgB,EAAAA,EAAAA,IAAStgB,GAClB3O,SAAUwV,IAGPzE,GAAUyE,EAAKxE,WAAYyD,KAAKuK,UAAUrQ,IAAUoG,MAAK,SAACxP,GAC7DiQ,EAAKqL,KAAK,QAAS,CACf+S,OAAQ,WACRjlB,QAASA,EACTc,SAAUlK,EACVvF,SAAUwV,IAKd8mB,EAAM92B,SAAQ,SAAC42B,EAAiBxB,GAC5B,IAAMlJ,EAAUnsB,EAAOq1B,GACvB,GAAIlJ,EAAQjyB,MAAO,CACf,IAAMA,EAAQ,IAAI8E,MAAMmtB,EAAQjyB,MAAM0M,SAChC1M,EAAOqT,KAAO4e,EAAQjyB,MAAMqT,KAC5BrT,EAAOqF,KAAO4sB,EAAQjyB,MAAMqF,KAClCs3B,EAAgB7oB,OAAO9T,E,MAEvB28B,EAAgB5rB,QAAQkhB,EAAQnsB,OAExC,GAEJ,IAAG,SAAC9F,GACA+V,EAAKqL,KAAK,QAAS,CACf+S,OAAQ,WACRn0B,MAAOA,EACPkP,QAASA,EACT3O,SAAUwV,IAGd8mB,EAAM92B,SAAQ,SAAC42B,GACXA,EAAgB7oB,OAAO9T,EAC3B,GACJ,GAEJ,GAAG,KAGA6T,CACX,KAAC4oB,CAAA,CAvF6B,CAAQr7B,ICCpC/B,GAAS,IAAIC,EAAAA,GAAO2F,IAKb83B,GAAkB,SAAAvF,IAAAnX,EAAAA,EAAAA,GAAA0c,EAAAvF,GAAA,IAAAlX,GAAAC,EAAAA,EAAAA,GAAAwc,GAAA,SAAAA,IAAA,OAAAx5B,EAAAA,EAAAA,GAAA,KAAAw5B,GAAAzc,EAAAnT,MAAA,KAAA4f,UAAA,CAkC1B,OAlC0BlpB,EAAAA,EAAAA,GAAAk5B,EAAA,OAAAj5B,IAAA,YAAAX,MAE3B,SAAiBg0B,GAIb,OAHIA,GAA6B,kBAAZA,GACjB93B,GAAO6D,mBAAmB,iBAAkB,SAAUi0B,GAEnDA,GARO,kBASlB,GAAC,CAAArzB,IAAA,SAAAX,MAED,SAAc3D,EAAkB23B,GAC5B93B,GAAOwc,KAAK,qFAEZ,IAAI4b,EAAO,KACX,OAAQj4B,EAAQiB,MACZ,IAAK,YACDg3B,EAAO,uDACP,MACJ,IAAK,UACDA,EAAO,uDACP,MACJ,IAAK,UACDA,EAAO,uDACP,MACJ,IAAK,SACDA,EAAO,sDACP,MACJ,IAAK,QACDA,EAAO,qDACP,MACJ,QACGp4B,GAAO6D,mBAAmB,sBAAuB,UAAW6pB,UAAU,IAG7E,OAAQ0K,EAAO,WAAaN,CAChC,KAAC4F,CAAA,CAlC0B,CAAQ9F,ICNjC53B,GAAS,IAAIC,EAAAA,GAAO2F,IAKpB+3B,GAAgD,CAClD37B,UAAW,2BACXI,QAAS,2BACTO,QAAS,2BACTE,OAAQ,4BAGC7B,GAAe,SAAAm3B,IAAAnX,EAAAA,EAAAA,GAAAhgB,EAAAm3B,GAAA,IAAAlX,GAAAC,EAAAA,EAAAA,GAAAlgB,GAKxB,SAAAA,EAAYb,EAAsB23B,GAI9B,IAJ0C5zB,EAAAA,EAAAA,GAAA,KAAAlD,GAI5B,MAAV82B,EAAgB,CAChB,IAAM1uB,GAAI0Y,EAAAA,EAAAA,IAAS,gBAAA9gB,EAAA,KAAAuV,iBAAA,EAA+C,aAAxDuL,CAAsE3hB,GAChF,GAAIiJ,EAAG,CACH,IAAMw0B,EAAgBD,GAAsBv0B,EAAEhI,MAC1Cw8B,IACA9F,EAAS,CACL8F,cAAeA,EACfC,cAAc,G,CAMZ,MAAV/F,GACA93B,GAAOqT,WAAW,sBAAuBpT,EAAAA,GAAAA,OAAAA,iBAAgC,CACrEqT,SAAU,UACVxP,MAAO3D,G,CAIlB,OAAA8gB,EAAApa,KAAA,KAEK1G,EAAS23B,EACnB,CAsFC,OAtFAtzB,EAAAA,EAAAA,GAAAxD,EAAA,EAAAyD,IAAA,sBAAAX,MAwFD,WACI,OAAQM,KAAKw5B,gBAAkBD,GAAsBv5B,KAAKjE,QAAQiB,KACtE,IAAC,EAAAqD,IAAA,YAAAX,MAxFD,SAAiBg0B,GAKC,MAAVA,GACA93B,GAAO6D,mBAAmB,wDAAyD,SAAUi0B,GAGjG,IAAMqF,EAA4F,CAC9FS,cAAe,KACfC,cAAc,EACdC,qBAAsB,MA4B1B,MAxBwB,kBAAZhG,EACRqF,EAAUS,cAAgB9F,EAEY,MAA/BA,EAAOgG,sBACd99B,GAAO0S,eAAkD,kBAA1BolB,EAAO8F,cAClC,iDAAkD,gBAAiB9F,EAAO8F,eAC9E59B,GAAO0S,eAAyD,kBAAjColB,EAAOgG,qBAClC,+BAAgC,uBAAwB,cAE5DX,EAAUS,cAAgB9F,EAAO8F,cACjCT,EAAUW,qBAAuBhG,EAAOgG,qBACxCX,EAAUU,eAAiB/F,EAAO+F,cAE3B/F,EAAO8F,eACd59B,GAAO0S,eAAkD,kBAA1BolB,EAAO8F,cAClC,wCAAyC,uBAAwB9F,EAAO8F,eAE5ET,EAAUS,cAAgB9F,EAAO8F,cACjCT,EAAUU,eAAiB/F,EAAO+F,cAGlC79B,GAAO6D,mBAAmB,oCAAqC,SAAUi0B,GAGtEqF,CACX,GAAC,CAAA14B,IAAA,SAAAX,MAED,SAAc3D,EAAkB23B,GAC5B,IAAIM,EAAe,KACnB,OAAQj4B,EAAUA,EAAQiB,KAAO,WAC7B,IAAK,YACDg3B,EAAO,mCACP,MACJ,IAAK,UACDA,EAAO,mCACP,MACJ,IAAK,UACDA,EAAO,mCACP,MACJ,IAAK,SACDA,EAAO,kCACP,MACJ,QACIp4B,GAAOqT,WAAW,sBAAuBpT,EAAAA,GAAAA,OAAAA,iBAAgC,CACrEqT,SAAU,UACVxP,MAAO3D,IAInB,IAOM+R,EAA6B,CAAEpQ,IANjCg2B,EAAO+F,aACD,WAAHzwB,OAAgBgrB,EAAK,WAAAhrB,OAAW0qB,EAAO8F,eAEpC,WAAHxwB,OAAgBgrB,EAAK,QAAAhrB,OAAQ0qB,EAAO8F,eAM3C1rB,QAAqB,CAAC,GAQtB,OALmC,MAA/B4lB,EAAOgG,uBACP5rB,EAAWe,KAAO,GAClBf,EAAWgB,SAAW4kB,EAAOgG,sBAG1B5rB,CACX,KAAClR,CAAA,CAtHuB,CAAQ42B,ICb9B53B,GAAS,IAAIC,EAAAA,GAAO2F,IAetB2uB,GAAU,EAMd,SAASwJ,GAAuB78B,EAA4B88B,GACxD,IAAMC,EAAU,oBAEhB,OAAO,SAASnuB,EAAgBqY,GAAkB,IAAAzR,EAAA,KACxC7G,EAAU,CACZC,OAAQA,EACRqY,OAAQA,EACR0H,GAAK0E,KACLM,QAAS,OAGb,OAAO,IAAIpjB,SAAQ,SAACC,EAAS+C,GACzBiC,EAAKqL,KAAK,QAAS,CACf+S,OAAQ,UACRmJ,QAAAA,EACApuB,SAASsgB,EAAAA,EAAAA,IAAStgB,GAClB3O,SAAUwV,IAGdsnB,EAASnuB,GAAS,SAAClP,EAAOgQ,GAEtB,GAAIhQ,EASA,OARA+V,EAAKqL,KAAK,QAAS,CACf+S,OAAQ,WACRmJ,QAAAA,EACAt9B,MAAAA,EACAkP,QAAAA,EACA3O,SAAUwV,IAGPjC,EAAO9T,GAWlB,GARA+V,EAAKqL,KAAK,QAAS,CACf+S,OAAQ,WACRmJ,QAAAA,EACApuB,QAAAA,EACAc,SAAAA,EACAzP,SAAUwV,IAGV/F,EAAShQ,MAAO,CAChB,IAAMA,EAAQ,IAAI8E,MAAMkL,EAAShQ,MAAM0M,SAGvC,OAFM1M,EAAOqT,KAAOrD,EAAShQ,MAAMqT,KAC7BrT,EAAOqF,KAAO2K,EAAShQ,MAAMqF,KAC5ByO,EAAO9T,E,CAGlB+Q,EAAQf,EAASlK,OACrB,GACJ,GACJ,CACJ,CAwCO,IAAMy3B,GAAa,SAAA9H,IAAApV,EAAAA,EAAAA,GAAAkd,EAAA9H,GAAA,IAAAnV,GAAAC,EAAAA,EAAAA,GAAAgd,GAItB,SAAAA,EAAYh9B,EAA+Cf,GAAoB,IAAAgjB,GAAAjf,EAAAA,EAAAA,GAAA,KAAAg6B,GAC3El+B,GAAOsW,SAAS,gBAAD4nB,EAAA,KAAA3nB,iBAAA,EAAa2nB,GAEZ,MAAZh9B,GACAlB,GAAO6D,mBAAmB,mBAAoB,WAAY3C,GAG9D,IAAIi9B,EAAe,KACfC,EAAqC,KACrCC,EAAgC,KA+BU,MA7BrB,oBAAdn9B,GACPi9B,EAAO,WACPC,EAAmBl9B,MAGnBi9B,EAAOj9B,EAASk3B,MAAQl3B,EAASi9B,MAAQ,KAC5Bj9B,EAASo9B,aAClBH,EAAO,YAGXE,EAAcn9B,EAEVA,EAAS2O,SACI,KAATsuB,IAAeA,EAAO,aAC1BC,EAnEhB,SAA6Bl9B,GACzB,OAAO,SAAS4O,EAAgBqY,GAAkB,IAAA/M,EAAA,KAChC,MAAV+M,IAAkBA,EAAS,IAE/B,IAAMtY,EAAU,CAAEC,OAAAA,EAAQqY,OAAAA,GAS1B,OAPA/jB,KAAK2d,KAAK,QAAS,CACf+S,OAAQ,UACRmJ,QAAS,iBACTpuB,SAASsgB,EAAAA,EAAAA,IAAStgB,GAClB3O,SAAUkD,OAGPlD,EAAS2O,QAAQA,GAASoG,MAAK,SAACtF,GASnC,OARAyK,EAAK2G,KAAK,QAAS,CACf+S,OAAQ,WACRmJ,QAAS,iBACTpuB,QAAAA,EACAc,SAAAA,EACAzP,SAAUka,IAGPzK,CAEX,IAAG,SAAChQ,GASA,MARAya,EAAK2G,KAAK,QAAS,CACf+S,OAAQ,WACRmJ,QAAS,iBACTpuB,QAAAA,EACAlP,MAAAA,EACAO,SAAUka,IAGRza,CACV,GACJ,CACJ,CA+BmC49B,CAAoBr9B,IAChCA,EAASs9B,UAChBJ,EAAmBL,GAAuB78B,EAAUA,EAASs9B,UAAU5nB,KAAK1V,IACrEA,EAASoyB,KAChB8K,EAAmBL,GAAuB78B,EAAUA,EAASoyB,KAAK1c,KAAK1V,IAEvElB,GAAO6D,mBAAmB,uBAAwB,WAAY3C,GAG7Di9B,IAAQA,EAAO,aAGxBhb,EAAAlC,EAAApa,KAAA,KAAMs3B,EAAMh+B,IAEZgE,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA4B,GAAO,mBAAoBib,IACzCj6B,EAAAA,EAAAA,KAAcod,EAAAA,EAAAA,GAAA4B,GAAO,WAAYkb,GAAalb,CAClD,CAIC,OAJA3e,EAAAA,EAAAA,GAAA05B,EAAA,EAAAz5B,IAAA,OAAAX,MAED,SAAKgM,EAAgBqY,GACjB,OAAO/jB,KAAKg6B,iBAAiBtuB,EAAQqY,EACzC,KAAC+V,CAAA,CAjDqB,CAAQn8B,IChF5B/B,GAAS,IAAIC,EAAAA,GAAO2F,IAK1B,SAAS64B,GAAmBt+B,EAAsBG,GAI9C,GAHe,MAAXH,IAAmBA,EAAU,aAGT,kBAAbA,EAAuB,CAI9B,IAAMyT,EAAQzT,EAAQyT,MAAM,kBAC5B,GAAIA,EACA,OAAQA,EAAM,IACV,IAAK,OACD,OAAO,IAAI7R,GAAgB5B,GAC/B,IAAK,KACD,OAAO,IAAIg2B,GAAkBh2B,GACjC,QACIH,GAAO6D,mBAAmB,yBAA0B,UAAW1D,G,CAK/E,IAAMiJ,EAAIzF,EAAWxD,GAQrB,OAPKiJ,GAAMA,EAAEjH,kBACTnC,GAAOqT,WAAW,yCAA0CpT,EAAAA,GAAAA,OAAAA,cAA6B,CACrFqe,UAAW,qBACXne,QAASA,IAIViJ,EAAEjH,iBAAiB,CACtBT,iBAAAA,GAEAZ,gBAAAA,GACAO,mBAAAA,GACAT,kBAAAA,GACAJ,eAAAA,GACAuB,gBAAAA,GACA27B,kBAAAA,GACA18B,eAAAA,GACAk9B,aAAAA,GAEApB,YAAAA,IACDx8B,EACP,C","sources":["../node_modules/@ethersproject/networks/src.ts/index.ts","../node_modules/@ethersproject/networks/src.ts/_version.ts","../node_modules/@ethersproject/basex/src.ts/index.ts","../node_modules/@ethersproject/hash/src.ts/_version.ts","../node_modules/@ethersproject/base64/src.ts/browser-base64.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/decoder.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/lib.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/include.ts","../node_modules/@ethersproject/hash/src.ts/namehash.ts","../node_modules/@ethersproject/sha2/src.ts/browser-sha2.ts","../node_modules/@ethersproject/sha2/src.ts/_version.ts","../node_modules/@ethersproject/web/src.ts/_version.ts","../node_modules/@ethersproject/web/src.ts/browser-geturl.ts","../node_modules/@ethersproject/web/src.ts/index.ts","../node_modules/@ethersproject/providers/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/formatter.ts","../node_modules/@ethersproject/constants/src.ts/addresses.ts","../node_modules/@ethersproject/providers/src.ts/base-provider.ts","../node_modules/@ethersproject/constants/src.ts/hashes.ts","../node_modules/@ethersproject/hash/src.ts/typed-data.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/url-json-rpc-provider.ts","../node_modules/@ethersproject/providers/src.ts/alchemy-provider.ts","../node_modules/@ethersproject/providers/src.ts/cloudflare-provider.ts","../node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts","../node_modules/@ethersproject/random/src.ts/shuffle.ts","../node_modules/@ethersproject/providers/src.ts/fallback-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ipc-provider.ts","../node_modules/@ethersproject/providers/src.ts/infura-provider.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-batch-provider.ts","../node_modules/@ethersproject/providers/src.ts/nodesmith-provider.ts","../node_modules/@ethersproject/providers/src.ts/pocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/web3-provider.ts","../node_modules/@ethersproject/providers/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\" ];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [ \"ropsten\" ];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\n// See: https://chainlist.org\nconst networks: { [name: string]: Network } = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: { chainId: 2, name: \"morden\" },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n\n    xdai: { chainId: 100, name: \"xdai\" },\n\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n","export const version = \"networks/5.7.1\";\n","/**\n * var basex = require(\"base-x\");\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nexport class BaseX {\n    readonly alphabet: string;\n    readonly base: number;\n\n    _alphabetMap: { [ character: string ]: number };\n    _leader: string;\n\n    constructor(alphabet: string) {\n        defineReadOnly(this, \"alphabet\", alphabet);\n        defineReadOnly(this, \"base\", alphabet.length);\n\n        defineReadOnly(this, \"_alphabetMap\", { });\n        defineReadOnly(this, \"_leader\", alphabet.charAt(0));\n\n        // pre-compute lookup table\n        for (let i = 0; i < alphabet.length; i++) {\n            this._alphabetMap[alphabet.charAt(i)] = i;\n        }\n    }\n\n    encode(value: BytesLike): string {\n        let source = arrayify(value);\n\n        if (source.length === 0) { return \"\"; }\n\n        let digits = [ 0 ]\n        for (let i = 0; i < source.length; ++i) {\n            let carry = source[i];\n            for (let j = 0; j < digits.length; ++j) {\n                carry += digits[j] << 8;\n                digits[j] = carry % this.base;\n                carry = (carry / this.base) | 0;\n            }\n\n            while (carry > 0) {\n                digits.push(carry % this.base);\n                carry = (carry / this.base) | 0;\n            }\n        }\n\n        let string = \"\"\n\n        // deal with leading zeros\n        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n            string += this._leader;\n        }\n\n        // convert digits to a string\n        for (let q = digits.length - 1; q >= 0; --q) {\n            string += this.alphabet[digits[q]];\n        }\n\n        return string;\n    }\n\n    decode(value: string): Uint8Array {\n        if (typeof(value) !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n\n        let bytes: Array<number> = [];\n        if (value.length === 0) { return new Uint8Array(bytes); }\n\n        bytes.push(0);\n        for (let i = 0; i < value.length; i++) {\n            let byte = this._alphabetMap[value[i]];\n\n            if (byte === undefined) {\n                throw new Error(\"Non-base\" + this.base + \" character\");\n            }\n\n            let carry = byte;\n            for (let j = 0; j < bytes.length; ++j) {\n                carry += bytes[j] * this.base;\n                bytes[j] = carry & 0xff;\n                carry >>= 8;\n            }\n\n            while (carry > 0) {\n                bytes.push(carry & 0xff);\n                carry >>= 8;\n            }\n        }\n\n        // deal with leading zeros\n        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n            bytes.push(0)\n        }\n\n        return arrayify(new Uint8Array(bytes.reverse()))\n    }\n}\n\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n\nexport { Base32, Base58 };\n\n//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n","export const version = \"hash/5.7.0\";\n","\"use strict\";\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nexport function decode(textData: string): Uint8Array {\n    textData = atob(textData);\n    const data = [];\n    for (let i = 0; i < textData.length; i++) {\n        data.push(textData.charCodeAt(i));\n    }\n    return arrayify(data);\n}\n\nexport function encode(data: BytesLike): string {\n    data = arrayify(data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n}\n\n\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nexport type Numbers = Uint8Array | Array<number>;\nexport type NextFunc = (...args: Array<any>) => number;\n\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array: Array<any>, depth?: number): Array<any> {\n    if (depth == null) { depth = 1; }\n    const result: Array<any> = [];\n\n    const forEach = result.forEach;\n\n    const flatDeep = function (arr: Array<any>, depth: number) {\n        forEach.call(arr, function (val: any) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            } else {\n               result.push(val);\n            }\n        });\n    };\n\n    flatDeep(array, depth);\n    return result;\n}\n\nfunction fromEntries<T extends string | number | symbol = string | number | symbol, U = any>(array: Array<[T, U]>): Record<T, U> {\n    const result: Record<T, U> = <Record<T, U>>{ };\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\n\nexport function decode_arithmetic(bytes: Numbers): Array<number> {\n\tlet pos = 0;\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n\t\n\t// decode the frequency table\n\tlet symbol_count = u16();\n\tlet total = 1;\n\tlet acc = [0, 1]; // first symbol has frequency 1\n\tfor (let i = 1; i < symbol_count; i++) {\n\t\tacc.push(total += u16());\n\t}\n\n\t// skip the sized-payload that the last 3 symbols index into\n\tlet skip = u16();\n\tlet pos_payload = pos;\n\tpos += skip;\n\n\tlet read_width = 0;\n\tlet read_buffer = 0; \n\tfunction read_bit() {\n\t\tif (read_width == 0) {\n\t\t\t// this will read beyond end of buffer\n\t\t\t// but (undefined|0) => zero pad\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\n\t\t\tread_width = 8;\n\t\t}\n\t\treturn (read_buffer >> --read_width) & 1;\n\t}\n\n\tconst N = 31;\n\tconst FULL = 2**N;\n\tconst HALF = FULL >>> 1;\n\tconst QRTR = HALF >> 1;\n\tconst MASK = FULL - 1;\n\n\t// fill register\n\tlet register = 0;\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\n\n\tlet symbols = [];\n\tlet low = 0;\n\tlet range = FULL; // treat like a float\n\twhile (true) {\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\n\t\tlet start = 0;\n\t\tlet end = symbol_count;\n\t\twhile (end - start > 1) { // binary search\n\t\t\tlet mid = (start + end) >>> 1;\n\t\t\tif (value < acc[mid]) {\n\t\t\t\tend = mid;\n\t\t\t} else {\n\t\t\t\tstart = mid;\n\t\t\t}\n\t\t}\n\t\tif (start == 0) break; // first symbol is end mark\n\t\tsymbols.push(start);\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1\n\t\twhile (((a ^ b) & HALF) == 0) {\n\t\t\tregister = (register << 1) & MASK | read_bit();\n\t\t\ta = (a << 1) & MASK;\n\t\t\tb = (b << 1) & MASK | 1;\n\t\t}\n\t\twhile (a & ~b & QRTR) {\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n\t\t\ta = (a << 1) ^ HALF;\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\n\t\t}\n\t\tlow = a;\n\t\trange = 1 + b - a;\n\t}\n\tlet offset = symbol_count - 4;\n\treturn symbols.map(x => { // index into payload\n\t\tswitch (x - offset) {\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 1: return offset + bytes[pos_payload++];\n\t\t\tdefault: return x - 1;\n\t\t}\n\t});\n}\t\n\n\n// returns an iterator which returns the next symbol\nexport function read_payload(v: Numbers): NextFunc {\n\tlet pos = 0;\n\treturn () => v[pos++];\n}\nexport function read_compressed_payload(bytes: Numbers): NextFunc {\n\treturn read_payload(decode_arithmetic(bytes));\n}\n\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i: number): number { \n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\n}\n\nfunction read_counts(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0; i < n; i++) v[i] = 1 + next();\n\treturn v;\n}\n\nfunction read_ascending(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = -1; i < n; i++) v[i] = x += 1 + next();\n\treturn v;\n}\n\nfunction read_deltas(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\n\treturn v;\n}\n\nexport function read_member_array(next: NextFunc, lookup?: Record<number, number>) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next: NextFunc): Record<number, Array<number>> {\n\tlet ret = [];\n\twhile (true) {\n\t\tlet w = next();\n\t\tif (w == 0) break;\n\t\tret.push(read_linear_table(w, next));\n\t}\n\twhile (true) {\n\t\tlet w = next() - 1;\n\t\tif (w < 0) break;\n\t\tret.push(read_replacement_table(w, next));\n\t}\n\treturn fromEntries<number, Array<number>>(flat(ret));\n}\n\nexport function read_zero_terminated_array(next: NextFunc): Array<number> {\n\tlet v = [];\n\twhile (true) {\n\t\tlet i = next();\n\t\tif (i == 0) break;\n\t\tv.push(i);\n\t}\n\treturn v;\n}\n\nfunction read_transposed(n: number, w: number, next: NextFunc): Array<Array<number>> {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\n\n\nfunction read_linear_table(w: number, next: NextFunc): Array<Array<number | Array<number>>> {\n\tlet dx = 1 + next();\n\tlet dy = next();\n\tlet vN = read_zero_terminated_array(next);\n\tlet m = read_transposed(vN.length, 1+w, next);\n\treturn flat(m.map((v, i) => {\n\t  const x = v[0], ys = v.slice(1);\n\t\t//let [x, ...ys] = v;\n\t\t//return Array(vN[i]).fill().map((_, j) => {\n\t\treturn Array(vN[i]).fill(undefined).map((_, j) => {\n\t\t\tlet j_dy = j * dy;\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\n\t\t});\n\t}));\n}\n\nfunction read_replacement_table(w: number, next: NextFunc): Array<[ number, Array<number> ]> {\n\tlet n = 1 + next();\n\tlet m = read_transposed(n, 1+w, next);\n\treturn m.map(v => [v[0], v.slice(1)]);\n}\n\nexport type Branch = {\n    set: Set<number>;\n    node: Node;\n};\n\nexport type Node = {\n    branches: Array<Branch>;\n    valid: number;\n    fe0f: boolean;\n    save: boolean;\n    check: boolean;\n};\n\nexport function read_emoji_trie(next: NextFunc): Node {\n\tlet sorted = read_member_array(next).sort((a, b) => a - b);\n\treturn read();\n\tfunction read(): Node {\n\t\tlet branches = [];\n\t\twhile (true) {\n\t\t\tlet keys = read_member_array(next, sorted);\n\t\t\tif (keys.length == 0) break;\n\t\t\tbranches.push({set: new Set(keys), node: read()});\n\t\t}\n    branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n \t\tlet temp = next();\n \t\tlet valid = temp % 3;\n \t\ttemp = (temp / 3)|0;\n \t\tlet fe0f = !!(temp & 1);\n \t\ttemp >>= 1;\n \t\tlet save = temp == 1;\n \t\tlet check = temp == 2;\n \t\treturn {branches, valid, fe0f, save, check};\n\t}\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\n\nimport { getData } from './include.js';\nconst r = getData();\n\nimport {read_member_array, read_mapped_map, read_emoji_trie} from './decoder.js';\n\n// @TODO: This should be lazily loaded\n\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\n\nfunction explode_cp(name: string): Array<number> {\n    return toUtf8CodePoints(name);\n}\n\nfunction filter_fe0f(cps: Array<number>): Array<number> {\n    return cps.filter(cp => cp != 0xFE0F);\n}\n\nexport function ens_normalize_post_check(name: string): string {\n\tfor (let label of name.split('.')) {\n\t\tlet cps = explode_cp(label);\n\t\ttry {\n\t\t\tfor (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n\t\t\t\tif (cps[i] !== UNDERSCORE) {\n\t\t\t\t\tthrow new Error(`underscore only allowed at start`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n\t\t\t\tthrow new Error(`invalid label extension`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthrow new Error(`Invalid label \"${label}\": ${err.message}`);\n\t\t}\n\t}\n\treturn name;\n}\n\nexport function ens_normalize(name: string): string {\n\treturn ens_normalize_post_check(normalize(name, filter_fe0f));\n}\n\nfunction normalize(name: string, emoji_filter: (a: Array<number>) => Array<number>): string {\n\tlet input = explode_cp(name).reverse(); // flip for pop\n\tlet output = [];\n\twhile (input.length) {\t\t\n\t\tlet emoji = consume_emoji_reversed(input);\n\t\tif (emoji) {\n\t\t\toutput.push(...emoji_filter(emoji));\n\t\t\tcontinue;\n\t\t}\n\t\tlet cp = input.pop();\n\t\tif (VALID.has(cp)) {\n\t\t\toutput.push(cp);\n\t\t\tcontinue;\n\t\t} \n\t\tif (IGNORED.has(cp)) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet cps = MAPPED[cp];\n\t\tif (cps) {\n\t\t\toutput.push(...cps);\n\t\t\tcontinue;\n\t\t}\n\t\tthrow new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n\t}\n\treturn ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\n\nfunction nfc(s: string): string {\n    return s.normalize('NFC');\n}\n\nfunction consume_emoji_reversed(cps: Array<number>, eaten?: Array<number>) {\n\tlet node = EMOJI_ROOT;\n\tlet emoji;\n\tlet saved;\n\tlet stack = [];\n\tlet pos = cps.length;\n\tif (eaten) eaten.length = 0; // clear input buffer (if needed)\n\twhile (pos) {\n\t\tlet cp = cps[--pos];\n\t\tnode = node.branches.find(x => x.set.has(cp))?.node;\n\t\tif (!node) break;\n\t\tif (node.save) { // remember\n\t\t\tsaved = cp;\n\t\t} else if (node.check) { // check exclusion\n\t\t\tif (cp === saved) break;\n\t\t}\n\t\tstack.push(cp);\n\t\tif (node.fe0f) {\n\t\t\tstack.push(0xFE0F);\n\t\t\tif (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n\t\t}\n\t\tif (node.valid) { // this is a valid emoji (so far)\n\t\t\temoji = stack.slice(); // copy stack\n\t\t\tif (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n\t\t\tcps.length = pos; // truncate\n\t\t}\n\t}\n\treturn emoji;\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nimport { decode } from \"@ethersproject/base64\";\n\nimport {read_compressed_payload} from './decoder.js';\n\nexport function getData(): () => number {\n    return read_compressed_payload(decode(''));\n}\n\n","import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { ens_normalize } from \"./ens-normalize/lib\";\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp: Uint8Array): Uint8Array {\n    if (comp.length === 0) { throw new Error(\"invalid ENS name; empty component\"); }\n    return comp;\n}\n\nfunction ensNameSplit(name: string): Array<Uint8Array> {\n    const bytes = toUtf8Bytes(ens_normalize(name));\n    const comps: Array<Uint8Array> = [ ];\n\n    if (name.length === 0) { return comps; }\n\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n\n    // There was a stray separator at the end of the name\n    if (last >= bytes.length) { throw new Error(\"invalid ENS name; empty component\"); }\n\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n\nexport function ensNormalize(name: string): string {\n    return ensNameSplit(name).map((comp) => toUtf8String(comp)).join(\".\");\n}\n\nexport function isValidName(name: string): boolean {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    } catch (error) { }\n    return false;\n}\n\nexport function namehash(name: string): string {\n    /* istanbul ignore if */\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n\n    let result: string | Uint8Array = Zeros;\n\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256(comps.pop())]));\n    }\n\n    return hexlify(result);\n}\n\nexport function dnsEncode(name: string): string {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n\n    }))) + \"00\";\n}\n","\"use strict\";\n\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nimport { SupportedAlgorithm } from \"./types\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport function ripemd160(data: BytesLike): string {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha256(data: BytesLike): string {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha512(data: BytesLike): string {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function computeHmac(algorithm: SupportedAlgorithm, key: BytesLike, data: BytesLike): string {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n\n    return \"0x\" + hash.hmac((<any>hash)[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n\n","export const version = \"sha2/5.7.0\";\n","export const version = \"web/5.7.1\";\n","\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n","\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    fetchOptions?: Record<string, string>;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\")},\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]): unpercent(dataMatch[3]))\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n","export const version = \"providers/5.5.0\";\n","\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: hash,\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: address,\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n","export const AddressZero = \"0x0000000000000000000000000000000000000000\";\n\n","\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string): null | string {\n    try {\n        return toUtf8String(_parseBytes(result));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        try {\n            return _parseBytes(await this.provider.call(tx));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const transaction = {\n                    to: this.address,\n                    data: (\"0x3b3b57de\" + namehash(this.name).substring(2))\n                };\n                const hexBytes = await this.provider.call(transaction);\n\n                // No address\n                if (hexBytes === \"0x\" || hexBytes === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(hexBytes);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ ];\n        try {\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n\n                if (match == null) { continue; }\n                switch (match[1]) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: `https:/\\/gateway.ipfs.io/ipfs/${ avatar.substring(7) }` }\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (match[1] === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: match[1], content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (match[1] === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (match[1] === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n                        let metadataUrl = _parseString(await this.provider.call(tx))\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (match[1] === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                        }\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n\n                        // Pull the image URL out\n                        if (!metadata || typeof(metadata.image) !== \"string\" || !metadata.image.match(/^https:\\/\\//i)) {\n                            return null;\n                        }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                        linkage.push({ type: \"url\", content: metadata.image });\n\n                        return { linkage, url: metadata.image };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        logger.checkNew(new.target, Provider);\n\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    const filter = event.filter;\n                    filter.fromBlock = this._lastBlockNumber + 1;\n                    filter.toBlock = blockNumber;\n\n                    const runner = this.getLogs(filter).then((logs) => {\n                        if (logs.length === 0) { return; }\n                        logs.forEach((log: Log) => {\n                            this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                            this.emit(filter, log);\n                        });\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n                    runners.push(runner);\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"call\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params, result, error\n            });\n        }\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        try {\n            const address = await this._getResolver(name);\n            if (address == null) { return null; }\n            return new Resolver(this, address, name);\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    async _getResolver(name: string): Promise<string> {\n        // Get the resolver from the blockchain\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation: \"ENS\", network: network.name }\n            );\n        }\n\n        // keccak256(\"resolver(bytes32)\")\n        const transaction = {\n            to: network.ensAddress,\n            data: (\"0x0178b8bf\" + namehash(name).substring(2))\n        };\n\n        try {\n            return this.formatter.callAddress(await this.call(transaction));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resovler\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddress = await this._getResolver(reverseName);\n        if (!resolverAddress) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        let bytes = arrayify(await this.call({\n            to: resolverAddress,\n            data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n        }));\n\n        // Strip off the dynamic string pointer (0x20)\n        if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) { return null; }\n        bytes = bytes.slice(32);\n\n        // Not a length-prefixed string\n        if (bytes.length < 32) { return null; }\n\n        // Get the length of the string (from the length-prefix)\n        const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n        bytes = bytes.slice(32);\n\n        // Length longer than available data\n        if (length > bytes.length) { return null; }\n\n        const name = toUtf8String(bytes.slice(0, length));\n\n        // Make sure the reverse record matches the foward record\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(reverseName);\n            if (!resolverAddress) { return null; }\n\n            resolver = new Resolver(this, resolverAddress, \"_\", address);\n\n        } else {\n            // ENS name; forward lookup\n            resolver = await this.getResolver(nameOrAddress);\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n","export const HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n","import { TypedDataDomain, TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { id } from \"./id\";\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\n\nconst NegativeOne: BigNumber = BigNumber.from(-1);\nconst Zero: BigNumber = BigNumber.from(0);\nconst One: BigNumber = BigNumber.from(1);\nconst MaxUint256: BigNumber = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nfunction hexPadRight(value: BytesLike) {\n    const bytes = arrayify(value);\n    const padOffset = bytes.length % 32\n    if (padOffset) {\n        return hexConcat([ bytes, padding.slice(padOffset) ]);\n    }\n    return hexlify(bytes);\n}\n\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\n\nconst domainFieldTypes: Record<string, string> = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\n\nconst domainFieldNames: Array<string> = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\n\nfunction checkString(key: string): (value: any) => string {\n    return function (value: any){\n        if (typeof(value) !== \"string\") {\n            logger.throwArgumentError(`invalid domain value for ${ JSON.stringify(key) }`, `domain.${ key }`, value);\n        }\n        return value;\n    }\n}\n\nconst domainChecks: Record<string, (value: any) => any> = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(value: any) {\n        try {\n            return BigNumber.from(value).toString()\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n    },\n    verifyingContract: function(value: any) {\n        try {\n            return getAddress(value).toLowerCase();\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function(value: any) {\n        try {\n            const bytes = arrayify(value);\n            if (bytes.length !== 32) { throw new Error(\"bad length\"); }\n            return hexlify(bytes);\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n    }\n}\n\nfunction getBaseEncoder(type: string): (value: any) => string {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n\n            const boundsUpper = MaxUint256.mask(signed ? (width - 1): width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne): Zero;\n\n            return function(value: BigNumberish) {\n                const v = BigNumber.from(value);\n\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(`value out-of-bounds for ${ type }`, \"value\", value);\n                }\n\n                return hexZeroPad(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n\n            return function(value: BytesLike) {\n                const bytes = arrayify(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(`invalid length for ${ type }`, \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n\n    switch (type) {\n        case \"address\": return function(value: string) {\n            return hexZeroPad(getAddress(value), 32);\n        };\n        case \"bool\": return function(value: boolean) {\n            return ((!value) ? hexFalse: hexTrue);\n        };\n        case \"bytes\": return function(value: BytesLike) {\n            return keccak256(value);\n        };\n        case \"string\": return function(value: string) {\n            return id(value);\n        };\n    }\n\n    return null;\n}\n\nfunction encodeType(name: string, fields: Array<TypedDataField>): string {\n    return `${ name }(${ fields.map(({ name, type }) => (type + \" \" + name)).join(\",\") })`;\n}\n\nexport class TypedDataEncoder {\n    readonly primaryType: string;\n    readonly types: Record<string, Array<TypedDataField>>;\n\n    readonly _encoderCache: Record<string, (value: any) => string>;\n    readonly _types: Record<string, string>;\n\n    constructor(types: Record<string, Array<TypedDataField>>) {\n        defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n\n        defineReadOnly(this, \"_encoderCache\", { });\n        defineReadOnly(this, \"_types\", { });\n\n        // Link struct types to their direct child structs\n        const links: Record<string, Record<string, boolean>> = { };\n\n        // Link structs to structs which contain them as a child\n        const parents: Record<string, Array<string>> = { };\n\n        // Link all subtypes within a given struct\n        const subtypes: Record<string, Record<string, boolean>> = { };\n\n        Object.keys(types).forEach((type) => {\n            links[type] = { };\n            parents[type] = [ ];\n            subtypes[type] = { }\n        });\n\n        for (const name in types) {\n\n            const uniqueNames: Record<string, boolean> = { };\n\n            types[name].forEach((field) => {\n\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(`duplicate variable name ${ JSON.stringify(field.name) } in ${ JSON.stringify(name) }`, \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(`circular type reference to ${ JSON.stringify(baseType) }`, \"types\", types);\n                }\n\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) { return ;}\n\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(`unknown type ${ JSON.stringify(baseType) }`, \"types\", types);\n                }\n\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));\n\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        } else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(`ambiguous primary types or unused types: ${ primaryTypes.map((t) => (JSON.stringify(t))).join(\", \") }`, \"types\", types);\n        }\n\n        defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n\n        // Check for circular type references\n        function checkCircular(type: string, found: Record<string, boolean>) {\n            if (found[type]) {\n                logger.throwArgumentError(`circular type reference to ${ JSON.stringify(type) }`, \"types\", types);\n            }\n\n            found[type] = true;\n\n            Object.keys(links[type]).forEach((child) => {\n                if (!parents[child]) { return; }\n\n                // Recursively check children\n                checkCircular(child, found);\n\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype) => {\n                    subtypes[subtype][child] = true;\n                });\n            });\n\n            delete found[type];\n        }\n        checkCircular(this.primaryType, { });\n\n        // Compute each fully describe type\n        for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n        }\n    }\n\n    getEncoder(type: string): (value: any) => string {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n\n    _getEncoder(type: string): (value: any) => string {\n\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return encoder; }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value: Array<any>) => {\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(keccak256);\n                }\n\n                return keccak256(hexConcat(result));\n            };\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value: Record<string, any>) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) { return keccak256(result); }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return hexConcat(values);\n            }\n        }\n\n        return logger.throwArgumentError(`unknown type: ${ type }`, \"type\", type);\n    }\n\n    encodeType(name: string): string {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(`unknown type: ${ JSON.stringify(name) }`, \"name\", name);\n        }\n        return result;\n    }\n\n    encodeData(type: string, value: any): string {\n        return this.getEncoder(type)(value);\n    }\n\n    hashStruct(name: string, value: Record<string, any>): string {\n        return keccak256(this.encodeData(name, value));\n    }\n\n    encode(value: Record<string, any>): string {\n        return this.encodeData(this.primaryType, value);\n    }\n\n    hash(value: Record<string, any>): string {\n        return this.hashStruct(this.primaryType, value);\n    }\n\n    _visit(type: string, value: any, callback: (type: string, data: any) => any): any {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return callback(type, value); }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v: any) => this._visit(subtype, v, callback));\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, <Record<string, any>>{});\n        }\n\n        return logger.throwArgumentError(`unknown type: ${ type }`, \"type\", type);\n    }\n\n    visit(value: Record<string, any>, callback: (type: string, data: any) => any): any {\n        return this._visit(this.primaryType, value, callback);\n    }\n\n    static from(types: Record<string, Array<TypedDataField>>): TypedDataEncoder {\n        return new TypedDataEncoder(types);\n    }\n\n    static getPrimaryType(types: Record<string, Array<TypedDataField>>): string {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n\n    static hashStruct(name: string, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n\n    static hashDomain(domain: TypedDataDomain): string {\n        const domainFields: Array<TypedDataField> = [ ];\n        for (const name in domain) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(`invalid typed-data domain key: ${ JSON.stringify(name) }`, \"domain\", domain);\n            }\n            domainFields.push({ name, type });\n        }\n\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n\n    static encode(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return hexConcat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n\n    static hash(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n\n    // Replaces all address types with ENS names with their looked up address\n    static async resolveNames(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, resolveName: (name: string) => Promise<string>): Promise<{ domain: TypedDataDomain, value: any }> {\n        // Make a copy to isolate it from the object passed in\n        domain = shallowCopy(domain);\n\n        // Look up all ENS names\n        const ensCache: Record<string, string> = { };\n\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get a list of all the addresses\n        encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && ensCache[value]) { return ensCache[value]; }\n            return value;\n        });\n\n        return { domain, value };\n    }\n\n    static getPayload(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): any {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n\n        // Derive the EIP712Domain Struct reference type\n        const domainValues: Record<string, any> = { };\n        const domainTypes: Array<{ name: string, type:string }> = [ ];\n\n        domainFieldNames.forEach((name) => {\n            const value = (<any>domain)[name];\n            if (value == null) { return; }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n\n        const encoder = TypedDataEncoder.from(types);\n\n        const typesWithDomain = shallowCopy(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        } else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n\n        // Validate the data structures and types\n        encoder.encode(value);\n\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type: string, value: any) => {\n\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(arrayify(value));\n                }\n\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return BigNumber.from(value).toString();\n                }\n\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof(value) !== \"string\") {\n                            logger.throwArgumentError(`invalid string`, \"value\", value);\n                        }\n                        return value;\n                }\n\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction checkError(method: string, error: any, params: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n            return e.data;\n        }\n\n        logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n            error, data: \"0x\"\n        });\n    }\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        logger.checkNew(new.target, JsonRpcSigner);\n\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            address.toLowerCase(),\n            JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        logger.checkNew(new.target, JsonRpcProvider);\n\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), params.position, params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n        [\"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue((<any>transaction)[key]);\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string, network?: Networkish) {\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        super(url, network);\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this._websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this._websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this._websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this._websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this._websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this._websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this._websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this._websocket.close(1000);\n    }\n}\n","\n\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { CommunityResourcable } from \"./formatter\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\n\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    async detectNetwork(): Promise<Network> {\n        let network = this.network;\n        if (network == null) {\n            network = await super.detectNetwork();\n\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // If still not set, set it\n            if (this._network == null) {\n                // A static network does not support \"any\"\n                defineReadOnly(this, \"_network\", network);\n\n                this.emit(\"network\", network, null);\n            }\n        }\n        return network;\n    }\n}\n\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\n    readonly apiKey: any;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n\n        // Normalize the Network and API Key\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\n\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\n\n        super(connection, network);\n\n        if (typeof(apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly<any, any>(this, key, apiKey[key]);\n            });\n        }\n    }\n\n    _startPending(): void {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n\n    isCommunityResource(): boolean {\n        return false;\n    }\n\n    getSigner(address?: string): JsonRpcSigner {\n        return logger.throwError(\n            \"API provider does not support signing\",\n            Logger.errors.UNSUPPORTED_OPERATION,\n            { operation: \"getSigner\" }\n        );\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return Promise.resolve([]);\n    }\n\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey: any): any {\n        return apiKey;\n    }\n\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.alchemyapi.io/v2/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n","\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || result.message != \"OK\") {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        logger.checkNew(new.target, EtherscanProvider);\n\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"ropsten\":\n                return \"https:/\\/api-ropsten.etherscan.io\";\n            case \"rinkeby\":\n                return \"https:/\\/api-rinkeby.etherscan.io\";\n            case \"kovan\":\n                return \"https:/\\/api-kovan.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\"use strict\";\n\nexport function shuffled(array: Array<any>): Array<any> {\n    array = array.slice();\n\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n\n    return array;\n}\n","\"use strict\";\n\nimport { Block, BlockWithTransactions, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\n\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction now() { return (new Date()).getTime(); }\n\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks: Array<Network>): Network {\n    let result = null;\n\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n\n        // Null! We do not know our network; bail.\n        if (network == null) { return null; }\n\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n           }\n        } else {\n            result = network;\n        }\n    }\n\n    return result;\n}\n\nfunction median(values: Array<number>, maxDelta?: number): number {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n\n    return (a + b) / 2;\n}\n\nfunction serialize(value: any): string {\n    if (value === null) {\n        return \"null\";\n    } else if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return JSON.stringify(value);\n    } else if (typeof(value) === \"string\") {\n        return value;\n    } else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    } else if (typeof(value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof(v) === \"function\") {\n                v = \"[function]\";\n            } else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n\n    throw new Error(\"unknown value type: \" + typeof(value));\n}\n\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n\n\nexport interface FallbackProviderConfig {\n    // The Provider\n    provider: Provider;\n\n    // The priority to favour this Provider; lower values are used first (higher priority)\n    priority?: number;\n\n    // Timeout before also triggering the next provider; this does not stop\n    // this provider and if its result comes back before a quorum is reached\n    // it will be incorporated into the vote\n    // - lower values will cause more network traffic but may result in a\n    //   faster result.\n    stallTimeout?: number;\n\n    // How much this provider contributes to the quorum; sometimes a specific\n    // provider may be more reliable or trustworthy than others, but usually\n    // this should be left as the default\n    weight?: number;\n};\n\n// A Staller is used to provide a delay to give a Provider a chance to response\n// before asking the next Provider to try.\ntype Staller = {\n    wait: (func: () => void) => Promise<void>\n    getPromise: () => Promise<void>,\n    cancel: () => void\n};\n\nfunction stall(duration: number): Staller {\n    let cancel: () => void = null;\n\n    let timer: NodeJS.Timer = null;\n    let promise = <Promise<void>>(new Promise((resolve) => {\n        cancel = function() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        }\n        timer = setTimeout(cancel, duration);\n    }));\n\n    const wait = (func: () => void) => {\n        promise = promise.then(func);\n        return promise;\n    }\n\n    function getPromise(): Promise<void> {\n        return promise;\n    }\n\n    return { cancel, getPromise, wait };\n}\n\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\n\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n\n\n// @TODO: Make this an object with staller and cancel built-in\ninterface RunningConfig extends FallbackProviderConfig {\n    start?: number;\n    done?: boolean;\n    cancelled?: boolean;\n    runner?: Promise<any>;\n    staller?: Staller;\n    result?: any;\n    error?: Error;\n};\n\nfunction exposeDebugConfig(config: RunningConfig, now?: number): any {\n    const result: any = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) { result.start = config.start; }\n    if (now) { result.duration = (now - config.start); }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        } else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\n\nfunction normalizedTally(normalize: (value: any) => string, quorum: number): (configs: Array<RunningConfig>) => any {\n    return function(configs: Array<RunningConfig>): any {\n\n        // Count the votes for each result\n        const tally: { [ key: string]: { count: number, result: any } } = { };\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) { tally[value] = { count: 0, result: c.result }; }\n            tally[value].count++;\n        });\n\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n\n        // No quroum\n        return undefined;\n    }\n}\nfunction getProcessFunc(provider: FallbackProvider, method: string, params: { [ key: string ]: any }): (configs: Array<RunningConfig>) => any {\n\n    let normalize = serialize;\n\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function(configs: Array<RunningConfig>): number {\n                const values = configs.map((c) => c.result);\n\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) { return undefined; }\n\n                blockNumber = Math.ceil(blockNumber);\n\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) { blockNumber++; }\n\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n\n                return provider._highestBlockNumber;\n            };\n\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function(configs: Array<RunningConfig>): BigNumber {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            }\n\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function(configs: Array<RunningConfig>): number {\n                return median(configs.map((c) => c.result));\n            }\n\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function(tx: any): string {\n                if (tx == null) { return null; }\n\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            }\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function(block: BlockWithTransactions): string {\n                    if (block == null) { return null; }\n\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            } else {\n                normalize = function(block: Block): string {\n                    if (block == null) { return null; }\n                    return serialize(block);\n                }\n            }\n            break;\n\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n\n}\n\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nasync function waitForSync(config: RunningConfig, blockNumber: number): Promise<BaseProvider> {\n    const provider = <BaseProvider>(config.provider);\n\n    if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n        return provider;\n    }\n\n    return poll(() => {\n        return new Promise((resolve, reject) => {\n            setTimeout(function() {\n\n                // We are synced\n                if (provider.blockNumber >= blockNumber) { return resolve(provider); }\n\n                // We're done; just quit\n                if (config.cancelled) { return resolve(null); }\n\n                // Try again, next block\n                return resolve(undefined);\n            }, 0);\n        });\n    }, { oncePoll: provider });\n}\n\nasync function getRunner(config: RunningConfig, currentBlockNumber: number, method: string, params: { [ key: string]: any }): Promise<any> {\n    let provider = config.provider;\n\n    switch (method) {\n        case \"getBlockNumber\":\n        case \"getGasPrice\":\n            return provider[method]();\n        case \"getEtherPrice\":\n            if ((<any>provider).getEtherPrice) {\n                return (<any>provider).getEtherPrice();\n            }\n            break;\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.address, params.blockTag || \"latest\");\n        case \"getStorageAt\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n        case \"getBlock\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[(params.includeTransactions ? \"getBlockWithTransactions\": \"getBlock\")](params.blockTag || params.blockHash);\n        case \"call\":\n        case \"estimateGas\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.transaction);\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            return provider[method](params.transactionHash);\n        case \"getLogs\": {\n            let filter = params.filter;\n            if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getLogs(filter);\n        }\n    }\n\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n        method: method,\n        params: params\n    });\n}\n\nexport class FallbackProvider extends BaseProvider {\n    readonly providerConfigs: ReadonlyArray<FallbackProviderConfig>;\n    readonly quorum: number;\n\n    // Due to the highly asyncronous nature of the blockchain, we need\n    // to make sure we never unroll the blockNumber due to our random\n    // sample of backends\n    _highestBlockNumber: number;\n\n    constructor(providers: Array<Provider | FallbackProviderConfig>, quorum?: number) {\n        logger.checkNew(new.target, FallbackProvider);\n\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n\n        const providerConfigs: Array<FallbackProviderConfig> = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n\n            const config: FallbackProviderConfig = shallowCopy(configOrProvider);\n\n            if (config.priority == null) { config.priority = 1; }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n            }\n            if (config.weight == null) { config.weight = 1; }\n\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${ index }].weight`, weight);\n            }\n\n            return Object.freeze(config);\n        });\n\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n\n        if (quorum == null) {\n            quorum = total / 2;\n        } else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n\n        // Are all providers' networks are known\n        let networkOrReady: Network | Promise<Network> = checkNetworks(providerConfigs.map((c) => (<any>(c.provider)).network));\n\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n\n        this._highestBlockNumber = -1;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        const networks = await Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n        return checkNetworks(networks);\n    }\n\n    async perform(method: string, params: { [name: string]: any }): Promise<any> {\n        // Sending transactions is special; always broadcast it to all backends\n        if (method === \"sendTransaction\") {\n            const results: Array<string | Error> = await Promise.all(this.providerConfigs.map((c) => {\n                return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                    return result.hash;\n                }, (error) => {\n                    return error;\n                });\n            }));\n\n            // Any success is good enough (other errors are likely \"already seen\" errors\n            for (let i = 0; i < results.length; i++) {\n                const result = results[i];\n                if (typeof(result) === \"string\") { return result; }\n            }\n\n            // They were all an error; pick the first error\n            throw results[0];\n        }\n\n        // We need to make sure we are in sync with our backends, so we need\n        // to know this before we can make a lot of calls\n        if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n            await this.getBlockNumber();\n        }\n\n        const processFunc = getProcessFunc(this, method, params);\n\n        // Shuffle the providers and then sort them by their priority; we\n        // shallowCopy them since we will store the result in them too\n        const configs: Array<RunningConfig> = shuffled(this.providerConfigs.map(shallowCopy));\n        configs.sort((a, b) => (a.priority - b.priority));\n\n        const currentBlockNumber = this._highestBlockNumber;\n\n        let i = 0;\n        let first = true;\n        while (true) {\n            const t0 = now();\n\n            // Compute the inflight weight (exclude anything past)\n            let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                                        .reduce((accum, c) => (accum + c.weight), 0);\n\n            // Start running enough to meet quorum\n            while (inflightWeight < this.quorum && i < configs.length) {\n                const config = configs[i++];\n\n                const rid = nextRid++;\n\n                config.start = now();\n                config.staller = stall(config.stallTimeout);\n                config.staller.wait(() => { config.staller = null; });\n\n                config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                    config.done = true;\n                    config.result = result;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                     }\n\n                }, (error) => {\n                    config.done = true;\n                    config.error = error;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                });\n\n                if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                        action: \"request\",\n                        rid: rid,\n                        backend: exposeDebugConfig(config, null),\n                        request: { method: method, params: deepCopy(params) },\n                        provider: this\n                    });\n                }\n\n                inflightWeight += config.weight;\n            }\n\n            // Wait for anything meaningful to finish or stall out\n            const waiting: Array<Promise<any>> = [ ];\n            configs.forEach((c) => {\n                if (c.done || !c.runner) { return; }\n                waiting.push(c.runner);\n                if (c.staller) { waiting.push(c.staller.getPromise()); }\n            });\n\n            if (waiting.length) { await Promise.race(waiting); }\n\n            // Check the quorum and process the results; the process function\n            // may additionally decide the quorum is not met\n            const results = configs.filter((c) => (c.done && c.error == null));\n            if (results.length >= this.quorum) {\n                const result = processFunc(results);\n                if (result !== undefined) {\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) { c.staller.cancel(); }\n                        c.cancelled = true;\n                    });\n                    return result;\n                }\n                if (!first) { await stall(100).getPromise(); }\n                first = false;\n            }\n\n            // No result, check for errors that should be forwarded\n            const errors = configs.reduce((accum, c) => {\n                if (!c.done || c.error == null) { return accum; }\n\n                const code = (<any>(c.error)).code;\n                if (ForwardErrors.indexOf(code) >= 0) {\n                    if (!accum[code]) { accum[code] = { error: c.error, weight: 0 }; }\n                    accum[code].weight += c.weight;\n                }\n\n                return accum;\n            }, <{ [ code: string ]: { error: Error, weight: number } }>({ }));\n\n            Object.keys(errors).forEach((errorCode: string) => {\n                const tally = errors[errorCode];\n                if (tally.weight < this.quorum) { return; }\n\n                // Shut down any stallers\n                configs.forEach(c => {\n                    if (c.staller) { c.staller.cancel(); }\n                    c.cancelled = true;\n                });\n\n                const e = <any>(tally.error);\n\n                const props: { [ name: string ]: any } = { };\n                ForwardProperties.forEach((name) => {\n                    if (e[name] == null) { return; }\n                    props[name] = e[name];\n                });\n\n                logger.throwError(e.reason || e.message, <any>errorCode, props);\n            });\n\n            // All configs have run to completion; we will never get more data\n            if (configs.filter((c) => !c.done).length === 0) { break; }\n        }\n\n        // Shut down any stallers; shouldn't be any\n        configs.forEach(c => {\n            if (c.staller) { c.staller.cancel(); }\n            c.cancelled = true;\n        });\n\n        return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n            method: method,\n            params: params,\n            //results: configs.map((c) => c.result),\n            //errors: configs.map((c) => c.error),\n            results: configs.map((c) => exposeDebugConfig(c)),\n            provider: this\n        });\n    }\n}\n","\"use strict\";\n\nconst IpcProvider: any = null;\n\nexport {\n    IpcProvider\n};\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\n\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n\n        if (apiKey == null) { return apiKeyObj; }\n\n        if (typeof(apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch(network ? network.name: \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n","\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    _pendingBatchAggregator: NodeJS.Timer;\n    _pendingBatch: Array<{\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\n        resolve: (result: any) => void,\n        reject: (error: Error) => void\n    }>;\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [ ];\n        }\n\n        const inflightRequest: any = { request, resolve: null, reject: null };\n\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n\n        this._pendingBatch.push(inflightRequest);\n\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            (<any>error).code = payload.error.code;\n                            (<any>error).data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n\n            }, 10);\n        }\n\n        return promise;\n    }\n}\n","/* istanbul ignore file */\n\n\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Special API key provided by Nodesmith for ethers.js\nconst defaultApiKey = \"ETHERS_JS_SHARED\";\n\nexport class NodesmithProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return (host + \"?apiKey=\" + apiKey);\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// These are load-balancer-based application IDs\nconst defaultApplicationIds: Record<string, string> = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n\n        if (apiKey == null) {\n            const n = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n\n        }\n\n        super(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"),\n                \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n        } else {\n            url = `https:/\\/${ host }/v1/${ apiKey.applicationId }`\n        }\n\n        const connection: ConnectionInfo = { url };\n\n        // Initialize empty headers\n        connection.headers = {}\n\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n","\"use strict\";\n\nimport { Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Exported Types\nexport type ExternalProvider = {\n    isMetaMask?: boolean;\n    isStatus?: boolean;\n    host?: string;\n    path?: string;\n    sendAsync?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    send?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    request?: (request: { method: string, params?: Array<any> }) => Promise<any>\n}\n\nlet _nextId = 1;\n\nexport type JsonRpcFetchFunc = (method: string, params?: Array<any>) => Promise<any>;\n\ntype Web3LegacySend = (request: any, callback: (error: Error, response: any) => void) => void;\n\nfunction buildWeb3LegacyFetcher(provider: ExternalProvider, sendFunc: Web3LegacySend) : JsonRpcFetchFunc {\n    const fetcher = \"Web3LegacyFetcher\";\n\n    return function(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: deepCopy(request),\n                provider: this\n            });\n\n            sendFunc(request, (error, response) => {\n\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n\n                    return reject(error);\n                }\n\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    (<any>error).code = response.error.code;\n                    (<any>error).data = response.error.data;\n                    return reject(error);\n                }\n\n                resolve(response.result);\n            });\n        });\n    }\n}\n\nfunction buildEip1193Fetcher(provider: ExternalProvider): JsonRpcFetchFunc {\n    return function(method: string, params: Array<any>): Promise<any> {\n        if (params == null) { params = [ ]; }\n\n        const request = { method, params };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n\n            return response;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n\n            throw error;\n        });\n    }\n}\n\nexport class Web3Provider extends JsonRpcProvider {\n    readonly provider: ExternalProvider;\n    readonly jsonRpcFetchFunc: JsonRpcFetchFunc;\n\n    constructor(provider: ExternalProvider | JsonRpcFetchFunc, network?: Networkish) {\n        logger.checkNew(new.target, Web3Provider);\n\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n\n        let path: string = null;\n        let jsonRpcFetchFunc: JsonRpcFetchFunc = null;\n        let subprovider: ExternalProvider = null;\n\n        if (typeof(provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n\n            subprovider = provider;\n\n            if (provider.request) {\n                if (path === \"\") { path = \"eip-1193:\"; }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n\n            if (!path) { path = \"unknown:\"; }\n        }\n\n        super(path, network);\n\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n","\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1]) {\n                case \"http\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concrete Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    FallbackProviderConfig,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n"],"names":["logger","Logger","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","infura","push","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","pocket","provider","indexOf","name","CloudflareProvider","cloudflare","AnkrProvider","ankr","length","FallbackProvider","quorum","renetwork","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","sepolia","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","value","defaultProvider","BaseX","alphabet","_classCallCheck","defineReadOnly","this","charAt","i","_alphabetMap","_createClass","key","source","arrayify","digits","carry","j","base","string","k","_leader","q","TypeError","bytes","Uint8Array","byte","undefined","Error","reverse","Base58","version","decode","textData","atob","data","charCodeAt","encode","String","fromCharCode","btoa","flat","array","depth","result","forEach","flatDeep","arr","call","val","Array","isArray","read_compressed_payload","v","pos","read_payload","u16","symbol_count","total","acc","skip","pos_payload","read_width","read_buffer","read_bit","FULL","Math","pow","HALF","QRTR","MASK","register","symbols","low","range","floor","start","end","mid","a","b","offset","map","x","decode_arithmetic","signed","read_ascending","n","next","read_deltas","read_member_array","lookup","vX","vN","read_counts","read_transposed","w","m","fill","read_linear_table","dx","dy","read_zero_terminated_array","ys","slice","_","j_dy","y","read_replacement_table","r","VALID","Set","IGNORED","MAPPED","ret","fromEntries","read_mapped_map","EMOJI_ROOT","sorted","sort","read","branches","keys","set","node","size","temp","valid","fe0f","save","check","read_emoji_trie","HYPHEN","UNDERSCORE","explode_cp","toUtf8CodePoints","filter_fe0f","cps","filter","cp","ens_normalize_post_check","_step","_iterator","_createForOfIteratorHelper","split","s","done","label","lastIndexOf","every","err","concat","message","e","f","ens_normalize","emoji_filter","input","output","emoji","consume_emoji_reversed","apply","_toConsumableArray","pop","has","toString","toUpperCase","fromCodePoint","normalize","eaten","saved","stack","_loop","_a","find","splice","Zeros","checkComponent","comp","ensNameSplit","toUtf8Bytes","comps","last","namehash","keccak256","hexlify","sha256","hash","update","digest","getUrl","href","request","method","headers","body","skipFetchSetup","mode","cache","credentials","redirect","referrer","fetchOptions","opts","_context","fetch","response","sent","arrayBuffer","toLowerCase","get","abrupt","statusCode","status","statusMessage","statusText","stop","_callee","staller","duration","Promise","resolve","setTimeout","bodyify","type","isBytesLike","trim","toUtf8String","fetchJson","connection","json","processFunc","updated","shallowCopy","Object","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","errorPassThrough","allow304","timeout","allowGzip","user","password","substring","allowInsecureAuthentication","throwError","argument","authorization","base64Encode","reData","RegExp","dataMatch","match","base64Decode","replace","all","code","parseInt","requestBody","requestMethod","flatHeaders","header","runningTimeout","timer","promise","reject","makeError","cancel","clearTimeout","runningFetch","attempt","prev","location","tryAgain","stall","retryAfter","random","t0","serverError","t1","throttleRetry","race","_fetchData","JSON","parse","poll","ceiling","interval","retryLimit","then","oncePoll","once","onceBlock","Formatter","checkNew","constructor","formats","getDefaultFormats","_this","address","bind","bigNumber","blockTag","hex","number","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","nonce","uint256","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","transactionResponse","fromBlock","toBlock","filterLog","removed","boolean","allowFalsish","accessListify","BigNumber","toNumber","strict","isHexString","getAddress","hexDataSlice","getContractAddress","hexValue","hexDataLength","hexZeroPad","format","author","_difficulty","_block","gas","isZero","networkId","parseTransaction","byzantium","_this2","object","checkKey","checkValue","nullValue","replaceValue","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log","checkTopic","topic","serializeTopics","unique","join","getEventTag","eventName","ForkEvent","warn","getTime","Date","PollableEvents","Event","tag","listener","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","toHexString","base58Encode","matchers","_parseString","_parseBytes","Resolver","resolvedAddress","formatter","selector","parameters","tx","hexConcat","t2","coinType","hexBytes","coinInfo","operation","words","bech32","unshift","_context2","callAddress","_fetchBytes","_getAddress","_callee2","linkage","_context3","getText","avatar","content","_resolvedAddress","owner","addr","tokenId","t3","tokenOwner","t4","t5","balance","t6","t7","metadataUrl","metadata","image","stringify","t8","_callee3","_context4","ipfs","swarm","_callee4","keyBytes","_context5","_callee5","defaultFormatter","nextPollId","BaseProvider","_Provider","_inherits","_super","_createSuper","Provider","_events","_emitted","getFormatter","_assertThisInitialized","anyNetwork","detectNetwork","_networkPromise","catch","_ready","knownNetwork","getStatic","emit","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","_context6","_callee6","event","maxAge","_context7","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","resolveProperties","perform","networkError","_ref","_this3","_setFastBlockNumber","_callee7","pollId","runners","_context8","_getInternalBlockNumber","pollingInterval","abs","previousBlockNumber","eventBlockNumber","_this4","runner","getTransactionReceipt","getLogs","_callee8","polling","_context9","_callee9","_context10","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_callee10","_this5","_poller","_this6","setInterval","_bootstrapPoll","clearInterval","_this7","_this8","now","getBlockNumber","_waitForTransaction","_context11","_callee11","replaceable","_context14","cancelFuncs","alreadyDone","minedHandler","_this9","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","_regeneratorRuntime","mark","_callee13","_this10","wrap","_context13","getTransactionCount","_callee12","mined","ti","_receipt","reason","_context12","getTransaction","getBlockWithTransactions","waitForTransaction","eq","cancelled","replacement","_wrapTransaction","unref","_callee14","_context15","_callee15","_context16","_callee16","addressOrName","_context17","_getBlockTag","params","_callee17","_context18","_callee18","_context19","_callee19","position","_context20","p","_callee20","_this11","expectedHash","returnedHash","wait","confirms","_callee21","_context21","signedTransaction","_context22","t","hexTx","_callee22","values","_context23","_this12","_callee23","_context24","_this13","_callee24","_context25","_getTransactionRequest","_callee25","_context26","_callee26","_context27","resolveName","_callee27","blockHashOrBlockTag","includeTransactions","_context29","_this14","_callee28","_blockNumber","blockWithTxs","_this15","_context28","_callee29","_getBlock","_context31","_this16","_callee30","_context30","_callee31","_context33","_this17","_callee32","_context32","_callee33","_context34","_getFilter","_callee34","_context35","_callee35","_context36","_callee36","_getResolver","_context37","_callee37","_context38","_callee38","_context39","getResolver","resolver","_callee39","_context40","reverseName","resolverAddress","_callee40","nameOrAddress","_context41","getAvatar","_callee41","pollable","_startEvent","_addEventListener","_this18","_len","arguments","args","_key","stopped","eventTag","_stopEvent","_this19","removeAllListeners","found","_this20","padding","NegativeOne","Zero","One","MaxUint256","hexTrue","hexFalse","domainFieldTypes","verifyingContract","salt","domainFieldNames","checkString","domainChecks","getBaseEncoder","width","boundsUpper","mask","boundsLower","add","mul","lt","gt","toTwos","padOffset","hexPadRight","id","encodeType","fields","TypedDataEncoder","types","freeze","deepCopy","links","parents","subtypes","uniqueNames","field","baseType","primaryTypes","checkCircular","child","subtype","primaryType","st","_types","encoder","_encoderCache","_getEncoder","subEncoder","getEncoder","encodedType","_ref2","encodeData","hashStruct","callback","_visit","reduce","accum","_ref3","domain","domainFields","EIP712Domain","hashDomain","ensCache","visit","domainValues","domainTypes","typesWithDomain","errorGas","checkError","responseText","getResult","payload","getLowerCase","_constructorGuard","JsonRpcSigner","_Signer","constructorGuard","addressOrIndex","UncheckedJsonRpcSigner","_address","_index","send","accounts","fromAddress","estimate","estimateGas","sender","hexlifyTransaction","sendUncheckedTransaction","_TypedDataEncoder","populated","Signer","_JsonRpcSigner","_super2","allowedTransactionKeys","_BaseProvider","_super3","networkOrReady","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","getSigner","connectUnchecked","jsonrpc","action","getFeeData","feeData","prepareRequest","_startPending","_get","_getPrototypeOf","prototype","_pendingFilter","self","pendingFilter","filterId","hashes","seq","listenerCount","allowExtra","allowed","checkProperties","WS","WebSocket","NextId","WebSocketProvider","_JsonRpcProvider","_thisSuper","_wsReady","_websocket","onopen","_requests","onmessage","messageEvent","sub","_subs","subscription","fauxPoll","_detectNetwork","rid","param","subIdPromise","_subIds","subId","_subscribe","emitReceipt","readyState","onerror","close","StaticJsonRpcProvider","UrlJsonRpcProvider","_StaticJsonRpcProvide","apiKey","checkAbstract","defaultApiKey","AlchemyWebSocketProvider","_WebSocketProvider","_UrlJsonRpcProvider","host","getTransactionPostData","maxFeePerGs","storageKeys","getJsonResult","checkLogTag","getBaseUrl","module","query","baseUrl","apikey","post","getPostUrl","getPostData","procFunc","payloadStr","txhash","postData","topic0","blocks","getBlock","parseFloat","ethusd","endBlock","startblock","endblock","item","timeStamp","shuffled","tmp","checkNetworks","median","maxDelta","middle","serialize","nextRid","getPromise","ForwardErrors","ForwardProperties","exposeDebugConfig","config","weight","defineProperty","getProcessFunc","configs","c","ceil","_highestBlockNumber","tally","count","normalizedTally","waitForSync","getRunner","currentBlockNumber","getEtherPrice","getStorageAt","providerConfigs","configOrProvider","index","stallTimeout","priority","sendTransaction","results","first","inflightWeight","_loop2","waiting","_result","errors","backend","delegateYield","errorCode","props","_ret","IpcProvider","defaultProjectId","InfuraWebSocketProvider","projectId","projectSecret","apiKeyObj","JsonRpcBatchProvider","_pendingBatch","inflightRequest","_pendingBatchAggregator","batch","inflight","NodesmithProvider","defaultApplicationIds","applicationId","loadBalancer","applicationSecretKey","buildWeb3LegacyFetcher","sendFunc","fetcher","Web3Provider","path","jsonRpcFetchFunc","subprovider","isMetaMask","buildEip1193Fetcher","sendAsync","getDefaultProvider"],"sourceRoot":""}